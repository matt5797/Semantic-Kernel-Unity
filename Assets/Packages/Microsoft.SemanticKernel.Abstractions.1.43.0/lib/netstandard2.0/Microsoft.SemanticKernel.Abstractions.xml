<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.SemanticKernel.Abstractions</name>
    </assembly>
    <members>
        <member name="F:Microsoft.SemanticKernel.AbstractionsJsonContext.s_defaultToolJsonOptions">
            <summary>Gets the <see cref="T:System.Text.Json.JsonSerializerOptions"/> singleton used as the default in JSON serialization operations.</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.AbstractionsJsonContext.GetTypeInfo(System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Gets JSON type information for the specified type.</summary>
            <remarks>
            This first tries to get the type information from <paramref name="firstOptions"/>,
            falling back to <see cref="F:Microsoft.SemanticKernel.AbstractionsJsonContext.s_defaultToolJsonOptions"/> if it can't.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.AbstractionsJsonContext.TryGetTypeInfo(System.Type,System.Text.Json.JsonSerializerOptions,System.Text.Json.Serialization.Metadata.JsonTypeInfo@)">
            <summary>Gets JSON type information for the specified type.</summary>
            <remarks>
            This first tries to get the type information from <paramref name="firstOptions"/>,
            falling back to <see cref="F:Microsoft.SemanticKernel.AbstractionsJsonContext.s_defaultToolJsonOptions"/> if it can't.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.AbstractionsJsonContext.CreateDefaultToolJsonOptions">
            <summary>Creates the default <see cref="T:System.Text.Json.JsonSerializerOptions"/> to use for serialization-related operations.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.AbstractionsJsonContext.Boolean">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.AbstractionsJsonContext.NullableBoolean">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.AbstractionsJsonContext.Double">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.AbstractionsJsonContext.Single">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.AbstractionsJsonContext.AutoFunctionChoiceBehavior">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.AbstractionsJsonContext.FunctionChoiceBehavior">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.AbstractionsJsonContext.FunctionChoiceBehaviorOptions">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.AbstractionsJsonContext.KernelFunctionSchemaModel">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.AbstractionsJsonContext.NoneFunctionChoiceBehavior">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.AbstractionsJsonContext.PromptExecutionSettings">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.AbstractionsJsonContext.RequiredFunctionChoiceBehavior">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.AbstractionsJsonContext.DictionaryStringJsonElement">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.AbstractionsJsonContext.IDictionaryStringObject">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.AbstractionsJsonContext.IListString">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.AbstractionsJsonContext.ListString">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.AbstractionsJsonContext.JsonElement">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.AbstractionsJsonContext.Int32">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.AbstractionsJsonContext.Int64">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.AbstractionsJsonContext.Object">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.AbstractionsJsonContext.String">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.AbstractionsJsonContext.Default">
            <summary>
            The default <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/> associated with a default <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.AbstractionsJsonContext.GeneratedSerializerOptions">
            <summary>
            The source-generated options associated with this context.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.AbstractionsJsonContext.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.AbstractionsJsonContext.#ctor(System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.AbstractionsJsonContext.GetTypeInfo(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.AudioToText.AudioToTextServiceExtensions">
            <summary>
            Class with extension methods for <see cref="T:Microsoft.SemanticKernel.AudioToText.IAudioToTextService"/> interface.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.AudioToText.AudioToTextServiceExtensions.GetTextContentAsync(Microsoft.SemanticKernel.AudioToText.IAudioToTextService,Microsoft.SemanticKernel.AudioContent,Microsoft.SemanticKernel.PromptExecutionSettings,Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <summary>
            Get text content from audio content.
            </summary>
            <param name="audioToTextService">Target <see cref="T:Microsoft.SemanticKernel.AudioToText.IAudioToTextService"/> instance.</param>
            <param name="content">Audio content.</param>
            <param name="executionSettings">The AI execution settings (optional).</param>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>Text content from audio content.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.AudioToText.IAudioToTextService">
            <summary>
            Interface for audio-to-text services.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.AudioToText.IAudioToTextService.GetTextContentsAsync(Microsoft.SemanticKernel.AudioContent,Microsoft.SemanticKernel.PromptExecutionSettings,Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <summary>
            Get text contents from audio content.
            </summary>
            <param name="content">Audio content.</param>
            <param name="executionSettings">The AI execution settings (optional).</param>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>Text contents from audio content.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.ChatCompletion.AIFunctionKernelFunction">
            <summary>Provides a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> that wraps an <see cref="T:Microsoft.Extensions.AI.AIFunction"/>.</summary>
            <remarks>
            The implementation of <see cref="T:Microsoft.SemanticKernel.ChatCompletion.ChatCompletionServiceChatClient"/> only manufactures these to pass along to the underlying
            <see cref="T:Microsoft.SemanticKernel.ChatCompletion.IChatCompletionService"/> with autoInvoke:false, which means the <see cref="T:Microsoft.SemanticKernel.ChatCompletion.IChatCompletionService"/>
            implementation shouldn't be invoking these functions at all. As such, the <see cref="M:Microsoft.SemanticKernel.ChatCompletion.AIFunctionKernelFunction.InvokeCoreAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)"/> and
            <see cref="M:Microsoft.SemanticKernel.ChatCompletion.AIFunctionKernelFunction.InvokeStreamingCoreAsync``1(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)"/> methods both unconditionally throw, even though they could be implemented.
            </remarks>
        </member>
        <member name="T:Microsoft.SemanticKernel.ChatCompletion.AuthorRole">
            <summary>
            A description of the intended purpose of a message within a chat completions interaction.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.ChatCompletion.AuthorRole.Developer">
            <summary>
            The role that instructs or sets the behavior of the assistant.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.ChatCompletion.AuthorRole.System">
            <summary>
            The role that instructs or sets the behavior of the assistant.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.ChatCompletion.AuthorRole.Assistant">
            <summary>
            The role that provides responses to system-instructed, user-prompted input.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.ChatCompletion.AuthorRole.User">
            <summary>
            The role that provides input for chat completions.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.ChatCompletion.AuthorRole.Tool">
            <summary>
            The role that provides additional information and references for chat completions.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.ChatCompletion.AuthorRole.Label">
            <summary>
            Gets the label associated with this <see cref="T:Microsoft.SemanticKernel.ChatCompletion.AuthorRole"/>.
            </summary>
            <remarks>
            The label is what will be serialized into the "role" message field of the Chat Message format.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.AuthorRole.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.SemanticKernel.ChatCompletion.AuthorRole"/> instance with the provided label.
            </summary>
            <param name="label">The label to associate with this <see cref="T:Microsoft.SemanticKernel.ChatCompletion.AuthorRole"/>.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.AuthorRole.op_Equality(Microsoft.SemanticKernel.ChatCompletion.AuthorRole,Microsoft.SemanticKernel.ChatCompletion.AuthorRole)">
            <summary>
            Returns a value indicating whether two <see cref="T:Microsoft.SemanticKernel.ChatCompletion.AuthorRole"/> instances are equivalent, as determined by a
            case-insensitive comparison of their labels.
            </summary>
            <param name="left"> the first <see cref="T:Microsoft.SemanticKernel.ChatCompletion.AuthorRole"/> instance to compare </param>
            <param name="right"> the second <see cref="T:Microsoft.SemanticKernel.ChatCompletion.AuthorRole"/> instance to compare </param>
            <returns> true if left and right are both null or have equivalent labels; false otherwise </returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.AuthorRole.op_Inequality(Microsoft.SemanticKernel.ChatCompletion.AuthorRole,Microsoft.SemanticKernel.ChatCompletion.AuthorRole)">
            <summary>
            Returns a value indicating whether two <see cref="T:Microsoft.SemanticKernel.ChatCompletion.AuthorRole"/> instances are not equivalent, as determined by a
            case-insensitive comparison of their labels.
            </summary>
            <param name="left"> the first <see cref="T:Microsoft.SemanticKernel.ChatCompletion.AuthorRole"/> instance to compare </param>
            <param name="right"> the second <see cref="T:Microsoft.SemanticKernel.ChatCompletion.AuthorRole"/> instance to compare </param>
            <returns> false if left and right are both null or have equivalent labels; true otherwise </returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.AuthorRole.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.AuthorRole.Equals(Microsoft.SemanticKernel.ChatCompletion.AuthorRole)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.AuthorRole.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.AuthorRole.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.ChatCompletion.ChatClientChatCompletionService">
            <summary>Provides an implementation of <see cref="T:Microsoft.SemanticKernel.ChatCompletion.IChatCompletionService"/> around an <see cref="T:Microsoft.Extensions.AI.IChatClient"/>.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.ChatCompletion.ChatClientChatCompletionService._chatClient">
            <summary>The wrapped <see cref="T:Microsoft.Extensions.AI.IChatClient"/>.</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatClientChatCompletionService.#ctor(Microsoft.Extensions.AI.IChatClient,System.IServiceProvider)">
            <summary>Initializes the <see cref="T:Microsoft.SemanticKernel.ChatCompletion.ChatClientChatCompletionService"/> for <paramref name="chatClient"/>.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.ChatCompletion.ChatClientChatCompletionService.Attributes">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatClientChatCompletionService.GetChatMessageContentsAsync(Microsoft.SemanticKernel.ChatCompletion.ChatHistory,Microsoft.SemanticKernel.PromptExecutionSettings,Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatClientChatCompletionService.GetStreamingChatMessageContentsAsync(Microsoft.SemanticKernel.ChatCompletion.ChatHistory,Microsoft.SemanticKernel.PromptExecutionSettings,Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatClientChatCompletionService.ToChatOptions(Microsoft.SemanticKernel.PromptExecutionSettings,Microsoft.SemanticKernel.Kernel)">
            <summary>Converts a pair of <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/> and <see cref="T:Microsoft.SemanticKernel.Kernel"/> to a <see cref="T:Microsoft.Extensions.AI.ChatOptions"/>.</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatClientChatCompletionService.ToStreamingChatMessageContent(Microsoft.Extensions.AI.ChatResponseUpdate)">
            <summary>Converts a <see cref="T:Microsoft.Extensions.AI.ChatResponseUpdate"/> to a <see cref="T:Microsoft.SemanticKernel.StreamingChatMessageContent"/>.</summary>
            <remarks>This conversion should not be necessary once SK eventually adopts the shared content types.</remarks>
        </member>
        <member name="T:Microsoft.SemanticKernel.ChatCompletion.ChatCompletionServiceChatClient">
            <summary>Provides an implementation of <see cref="T:Microsoft.Extensions.AI.IChatClient"/> around an arbitrary <see cref="T:Microsoft.SemanticKernel.ChatCompletion.IChatCompletionService"/>.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.ChatCompletion.ChatCompletionServiceChatClient._chatCompletionService">
            <summary>The wrapped <see cref="T:Microsoft.SemanticKernel.ChatCompletion.IChatCompletionService"/>.</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatCompletionServiceChatClient.#ctor(Microsoft.SemanticKernel.ChatCompletion.IChatCompletionService)">
            <summary>Initializes the <see cref="T:Microsoft.SemanticKernel.ChatCompletion.ChatCompletionServiceChatClient"/> for <paramref name="chatCompletionService"/>.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.ChatCompletion.ChatCompletionServiceChatClient.Metadata">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatCompletionServiceChatClient.GetResponseAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatCompletionServiceChatClient.GetStreamingResponseAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatCompletionServiceChatClient.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatCompletionServiceChatClient.GetService(System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatCompletionServiceChatClient.ToPromptExecutionSettings(Microsoft.Extensions.AI.ChatOptions)">
            <summary>Converts a <see cref="T:Microsoft.Extensions.AI.ChatOptions"/> to a <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/>.</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatCompletionServiceChatClient.ToStreamingChatCompletionUpdate(Microsoft.SemanticKernel.StreamingChatMessageContent)">
            <summary>Converts a <see cref="T:Microsoft.SemanticKernel.StreamingChatMessageContent"/> to a <see cref="T:Microsoft.Extensions.AI.ChatResponseUpdate"/>.</summary>
            <remarks>This conversion should not be necessary once SK eventually adopts the shared content types.</remarks>
        </member>
        <member name="T:Microsoft.SemanticKernel.ChatCompletion.ChatCompletionServiceExtensions">
            <summary>
            Class sponsor that holds extension methods for <see cref="T:Microsoft.SemanticKernel.ChatCompletion.IChatCompletionService"/> interface.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatCompletionServiceExtensions.GetChatMessageContentsAsync(Microsoft.SemanticKernel.ChatCompletion.IChatCompletionService,System.String,Microsoft.SemanticKernel.PromptExecutionSettings,Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <summary>
            Get chat multiple chat message content choices for the prompt and settings.
            </summary>
            <remarks>
            This should be used when the settings request for more than one choice.
            </remarks>
            <param name="chatCompletionService">Target chat completion service.</param>
            <param name="prompt">The standardized prompt input.</param>
            <param name="executionSettings">The AI execution settings (optional).</param>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>List of different chat message content choices generated by the remote model</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatCompletionServiceExtensions.GetChatMessageContentAsync(Microsoft.SemanticKernel.ChatCompletion.IChatCompletionService,System.String,Microsoft.SemanticKernel.PromptExecutionSettings,Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <summary>
            Get a single chat message content for the prompt and settings.
            </summary>
            <param name="chatCompletionService">The target <see cref="T:Microsoft.SemanticKernel.ChatCompletion.IChatCompletionService"/> interface to extend.</param>
            <param name="prompt">The standardized prompt input.</param>
            <param name="executionSettings">The AI execution settings (optional).</param>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>Single chat message content generated by the remote model.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatCompletionServiceExtensions.GetChatMessageContentAsync(Microsoft.SemanticKernel.ChatCompletion.IChatCompletionService,Microsoft.SemanticKernel.ChatCompletion.ChatHistory,Microsoft.SemanticKernel.PromptExecutionSettings,Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <summary>
            Get a single chat message content for the chat history and settings provided.
            </summary>
            <param name="chatCompletionService">The target <see cref="T:Microsoft.SemanticKernel.ChatCompletion.IChatCompletionService"/> interface to extend.</param>
            <param name="chatHistory">The chat history to complete.</param>
            <param name="executionSettings">The AI execution settings (optional).</param>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>List of different chat results generated by the remote model</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatCompletionServiceExtensions.GetStreamingChatMessageContentsAsync(Microsoft.SemanticKernel.ChatCompletion.IChatCompletionService,System.String,Microsoft.SemanticKernel.PromptExecutionSettings,Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <summary>
            Get streaming chat message contents for the chat history provided using the specified settings.
            </summary>
            <exception cref="T:System.NotSupportedException">Throws if the specified type is not the same or fail to cast</exception>
            <param name="chatCompletionService">The target <see cref="T:Microsoft.SemanticKernel.ChatCompletion.IChatCompletionService"/> interface to extend.</param>
            <param name="prompt">The standardized prompt input.</param>
            <param name="executionSettings">The AI execution settings (optional).</param>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>Streaming list of different completion streaming string updates generated by the remote model</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatCompletionServiceExtensions.AsChatClient(Microsoft.SemanticKernel.ChatCompletion.IChatCompletionService)">
            <summary>Creates an <see cref="T:Microsoft.Extensions.AI.IChatClient"/> for the specified <see cref="T:Microsoft.SemanticKernel.ChatCompletion.IChatCompletionService"/>.</summary>
            <param name="service">The chat completion service to be represented as a chat client.</param>
            <returns>
            The <see cref="T:Microsoft.Extensions.AI.IChatClient"/>. If the <paramref name="service"/> is an <see cref="T:Microsoft.Extensions.AI.IChatClient"/>, the <paramref name="service"/>
            will be returned. Otherwise, a new <see cref="T:Microsoft.Extensions.AI.IChatClient"/> will be created that wraps <paramref name="service"/>.
            </returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatCompletionServiceExtensions.AsChatCompletionService(Microsoft.Extensions.AI.IChatClient,System.IServiceProvider)">
            <summary>Creates an <see cref="T:Microsoft.SemanticKernel.ChatCompletion.IChatCompletionService"/> for the specified <see cref="T:Microsoft.Extensions.AI.IChatClient"/>.</summary>
            <param name="client">The chat client to be represented as a chat completion service.</param>
            <param name="serviceProvider">An optional <see cref="T:System.IServiceProvider"/> that can be used to resolve services to use in the instance.</param>
            <returns>
            The <see cref="T:Microsoft.SemanticKernel.ChatCompletion.IChatCompletionService"/>. If <paramref name="client"/> is an <see cref="T:Microsoft.SemanticKernel.ChatCompletion.IChatCompletionService"/>, <paramref name="client"/> will
            be returned. Otherwise, a new <see cref="T:Microsoft.SemanticKernel.ChatCompletion.IChatCompletionService"/> will be created that wraps <paramref name="client"/>.
            </returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatCompletionServiceExtensions.ToChatMessage(Microsoft.SemanticKernel.ChatMessageContent)">
            <summary>Converts a <see cref="T:Microsoft.SemanticKernel.ChatMessageContent"/> to a <see cref="T:Microsoft.Extensions.AI.ChatMessage"/>.</summary>
            <remarks>This conversion should not be necessary once SK eventually adopts the shared content types.</remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatCompletionServiceExtensions.ToChatMessageContent(Microsoft.Extensions.AI.ChatMessage,Microsoft.Extensions.AI.ChatResponse)">
            <summary>Converts a <see cref="T:Microsoft.Extensions.AI.ChatMessage"/> to a <see cref="T:Microsoft.SemanticKernel.ChatMessageContent"/>.</summary>
            <remarks>This conversion should not be necessary once SK eventually adopts the shared content types.</remarks>
        </member>
        <member name="T:Microsoft.SemanticKernel.ChatCompletion.ChatHistory">
            <summary>
            Provides a history of chat messages from a chat conversation.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.ChatCompletion.ChatHistory._messages">
            <summary>The messages.</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatHistory.#ctor">
            <summary>Initializes an empty history.</summary>
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.SemanticKernel.ChatCompletion.ChatHistory"/> class
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatHistory.#ctor(System.String,Microsoft.SemanticKernel.ChatCompletion.AuthorRole)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.SemanticKernel.ChatCompletion.ChatHistory"/> with a first message in the provided <see cref="T:Microsoft.SemanticKernel.ChatCompletion.AuthorRole"/>.
            If not role is provided then the first message will default to <see cref="P:Microsoft.SemanticKernel.ChatCompletion.AuthorRole.System"/> role.
            </summary>
            <param name="message">The text message to add to the first message in chat history.</param>
            <param name="role">The role to add as the first message.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatHistory.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.SemanticKernel.ChatCompletion.ChatHistory"/> class with a system message.
            </summary>
            <param name="systemMessage">The system message to add to the history.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatHistory.#ctor(System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.ChatMessageContent})">
            <summary>Initializes the history will all of the specified messages.</summary>
            <param name="messages">The messages to copy into the history.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="messages"/> is null.</exception>
        </member>
        <member name="P:Microsoft.SemanticKernel.ChatCompletion.ChatHistory.Count">
            <summary>Gets the number of messages in the history.</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatHistory.AddMessage(Microsoft.SemanticKernel.ChatCompletion.AuthorRole,System.String,System.Text.Encoding,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            <param name="authorRole">Role of the message author</param>
            <param name="content">Message content</param>
            <param name="encoding">Encoding of the message content</param>
            <param name="metadata">Dictionary for any additional metadata</param>
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatHistory.AddMessage(Microsoft.SemanticKernel.ChatCompletion.AuthorRole,Microsoft.SemanticKernel.ChatCompletion.ChatMessageContentItemCollection,System.Text.Encoding,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            <param name="authorRole">Role of the message author</param>
            <param name="contentItems">Instance of <see cref="T:Microsoft.SemanticKernel.ChatCompletion.ChatMessageContentItemCollection"/> with content items</param>
            <param name="encoding">Encoding of the message content</param>
            <param name="metadata">Dictionary for any additional metadata</param>
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatHistory.AddUserMessage(System.String)">
            <summary>
            Add a user message to the chat history
            </summary>
            <param name="content">Message content</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatHistory.AddUserMessage(Microsoft.SemanticKernel.ChatCompletion.ChatMessageContentItemCollection)">
            <summary>
            Add a user message to the chat history
            </summary>
            <param name="contentItems">Instance of <see cref="T:Microsoft.SemanticKernel.ChatCompletion.ChatMessageContentItemCollection"/> with content items</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatHistory.AddAssistantMessage(System.String)">
            <summary>
            Add an assistant message to the chat history
            </summary>
            <param name="content">Message content</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatHistory.AddSystemMessage(System.String)">
            <summary>
            Add a system message to the chat history
            </summary>
            <param name="content">Message content</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatHistory.AddDeveloperMessage(System.String)">
            <summary>
            Add a developer message to the chat history
            </summary>
            <param name="content">Message content</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatHistory.Add(Microsoft.SemanticKernel.ChatMessageContent)">
            <summary>Adds a message to the history.</summary>
            <param name="item">The message to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is null.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatHistory.AddRange(System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.ChatMessageContent})">
            <summary>Adds the messages to the history.</summary>
            <param name="items">The collection whose messages should be added to the history.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="items"/> is null.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatHistory.Insert(System.Int32,Microsoft.SemanticKernel.ChatMessageContent)">
            <summary>Inserts a message into the history at the specified index.</summary>
            <param name="index">The index at which the item should be inserted.</param>
            <param name="item">The message to insert.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is null.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatHistory.CopyTo(Microsoft.SemanticKernel.ChatMessageContent[],System.Int32)">
            <summary>
            Copies all of the messages in the history to an array, starting at the specified destination array index.
            </summary>
            <param name="array">The destination array into which the messages should be copied.</param>
            <param name="arrayIndex">The zero-based index into <paramref name="array"/> at which copying should begin.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The number of messages in the history is greater than the available space from <paramref name="arrayIndex"/> to the end of <paramref name="array"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatHistory.Clear">
            <summary>Removes all messages from the history.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.ChatCompletion.ChatHistory.Item(System.Int32)">
            <summary>Gets or sets the message at the specified index in the history.</summary>
            <param name="index">The index of the message to get or set.</param>
            <returns>The message at the specified index.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index"/> was not valid for this history.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatHistory.Contains(Microsoft.SemanticKernel.ChatMessageContent)">
            <summary>Determines whether a message is in the history.</summary>
            <param name="item">The message to locate.</param>
            <returns>true if the message is found in the history; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is null.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatHistory.IndexOf(Microsoft.SemanticKernel.ChatMessageContent)">
            <summary>Searches for the specified message and returns the index of the first occurrence.</summary>
            <param name="item">The message to locate.</param>
            <returns>The index of the first found occurrence of the specified message; -1 if the message could not be found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is null.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatHistory.RemoveAt(System.Int32)">
            <summary>Removes the message at the specified index from the history.</summary>
            <param name="index">The index of the message to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index"/> was not valid for this history.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatHistory.Remove(Microsoft.SemanticKernel.ChatMessageContent)">
            <summary>Removes the first occurrence of the specified message from the history.</summary>
            <param name="item">The message to remove from the history.</param>
            <returns>true if the item was successfully removed; false if it wasn't located in the history.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is null.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatHistory.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of messages from the history.
            </summary>
            <param name="index">The index of the range of elements to remove.</param>
            <param name="count">The number of elements to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="count"/> and <paramref name="count"/> do not denote a valid range of messages.</exception>
        </member>
        <member name="P:Microsoft.SemanticKernel.ChatCompletion.ChatHistory.System#Collections#Generic#ICollection{Microsoft#SemanticKernel#ChatMessageContent}#IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatHistory.System#Collections#Generic#IEnumerable{Microsoft#SemanticKernel#ChatMessageContent}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatHistory.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.ChatCompletion.ChatHistoryExtensions">
            <summary>
            Extension methods for chat history.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatHistoryExtensions.ReduceInPlaceAsync(Microsoft.SemanticKernel.ChatCompletion.ChatHistory,Microsoft.SemanticKernel.ChatCompletion.IChatHistoryReducer,System.Threading.CancellationToken)">
            <summary>
            Process history reduction and mutate the provided history in place.
            </summary>
            <param name="chatHistory">The source history</param>
            <param name="reducer">The target reducer</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>True if reduction has occurred.</returns>
            <remarks>
            Using the existing <see cref="T:Microsoft.SemanticKernel.ChatCompletion.ChatHistory"/> for a reduction in collection size eliminates the need
            for re-allocation (of memory).
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatHistoryExtensions.ReduceAsync(System.Collections.Generic.IReadOnlyList{Microsoft.SemanticKernel.ChatMessageContent},Microsoft.SemanticKernel.ChatCompletion.IChatHistoryReducer,System.Threading.CancellationToken)">
            <summary>
            Returns the reduced history using the provided reducer without mutating the source history.
            </summary>
            <param name="chatHistory">The source history</param>
            <param name="reducer">The target reducer</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatHistoryExtensions.ReduceAsync(Microsoft.SemanticKernel.ChatCompletion.ChatHistory,Microsoft.SemanticKernel.ChatCompletion.IChatHistoryReducer,System.Threading.CancellationToken)">
            <summary>
            Returns the reduced history using the provided reducer without mutating the source history.
            </summary>
            <param name="chatHistory">The source history</param>
            <param name="reducer">The target reducer</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.ChatCompletion.ChatMessageContentItemCollection">
            <summary>
            Contains collection of chat message content items of type <see cref="T:Microsoft.SemanticKernel.KernelContent"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatMessageContentItemCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.ChatCompletion.ChatMessageContentItemCollection"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.ChatCompletion.ChatMessageContentItemCollection.Item(System.Int32)">
            <summary>
            Gets or sets the content item at the specified index in the collection.
            </summary>
            <param name="index">The index of the content item to get or set.</param>
            <returns>The content item at the specified index.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index"/> was not valid for this collection.</exception>
        </member>
        <member name="P:Microsoft.SemanticKernel.ChatCompletion.ChatMessageContentItemCollection.Count">
            <summary>
            Gets the number of content items in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatMessageContentItemCollection.Add(Microsoft.SemanticKernel.KernelContent)">
            <summary>
            Adds a content item to the collection.
            </summary>
            <param name="item">The content item to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is null.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatMessageContentItemCollection.Clear">
            <summary>
            Removes all content items from the collection.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatMessageContentItemCollection.Contains(Microsoft.SemanticKernel.KernelContent)">
            <summary>
            Determines whether a content item is in the collection.
            </summary>
            <param name="item">The content item to locate.</param>
            <returns>True if the content item is found in the collection; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is null.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatMessageContentItemCollection.CopyTo(Microsoft.SemanticKernel.KernelContent[],System.Int32)">
            <summary>
            Copies all of the content items in the collection to an array, starting at the specified destination array index.
            </summary>
            <param name="array">The destination array into which the content items should be copied.</param>
            <param name="arrayIndex">The zero-based index into <paramref name="array"/> at which copying should begin.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The number of content items in the collection is greater than the available space from <paramref name="arrayIndex"/> to the end of <paramref name="array"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatMessageContentItemCollection.IndexOf(Microsoft.SemanticKernel.KernelContent)">
            <summary>
            Searches for the specified content item and returns the index of the first occurrence.
            </summary>
            <param name="item">The content item to locate.</param>
            <returns>The index of the first found occurrence of the specified content item; -1 if the content item could not be found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is null.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatMessageContentItemCollection.Insert(System.Int32,Microsoft.SemanticKernel.KernelContent)">
            <summary>
            Inserts a content item into the collection at the specified index.
            </summary>
            <param name="index">The index at which the content item should be inserted.</param>
            <param name="item">The content item to insert.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is null.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatMessageContentItemCollection.Remove(Microsoft.SemanticKernel.KernelContent)">
            <summary>
            Removes the first occurrence of the specified content item from the collection.
            </summary>
            <param name="item">The content item to remove from the collection.</param>
            <returns>True if the item was successfully removed; false if it wasn't located in the collection.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is null.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatMessageContentItemCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the content item at the specified index from the collection.
            </summary>
            <param name="index">The index of the content item to remove.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.ChatCompletion.ChatPromptParser">
            <summary>
            Chat Prompt parser.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatPromptParser.TryParse(System.String,Microsoft.SemanticKernel.ChatCompletion.ChatHistory@)">
            <summary>
            Parses a prompt for an XML representation of a <see cref="T:Microsoft.SemanticKernel.ChatCompletion.ChatHistory"/>.
            </summary>
            <param name="prompt">The prompt to parse.</param>
            <param name="chatHistory">The parsed <see cref="T:Microsoft.SemanticKernel.ChatCompletion.ChatHistory"/>, or null if it couldn't be parsed.</param>
            <returns>true if the history could be parsed; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatPromptParser.TryParse(System.Collections.Generic.List{Microsoft.SemanticKernel.PromptNode},Microsoft.SemanticKernel.ChatCompletion.ChatHistory@)">
            <summary>
            Parses collection of <see cref="T:Microsoft.SemanticKernel.PromptNode"/> instances and sets output as <see cref="T:Microsoft.SemanticKernel.ChatCompletion.ChatHistory"/>.
            </summary>
            <param name="nodes">Collection of <see cref="T:Microsoft.SemanticKernel.PromptNode"/> to parse.</param>
            <param name="chatHistory">Parsing output as <see cref="T:Microsoft.SemanticKernel.ChatCompletion.ChatHistory"/>.</param>
            <returns>Returns true if parsing was successful, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatPromptParser.ParseChatNode(Microsoft.SemanticKernel.PromptNode)">
            <summary>
            Parses a chat node and constructs a <see cref="T:Microsoft.SemanticKernel.ChatMessageContent"/> object.
            </summary>
            <param name="node">The prompt node to parse.</param>
            <returns><see cref="T:Microsoft.SemanticKernel.ChatMessageContent"/> object.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatPromptParser.IsValidChatMessage(Microsoft.SemanticKernel.PromptNode)">
            <summary>
            Checks if <see cref="T:Microsoft.SemanticKernel.PromptNode"/> is valid chat message.
            </summary>
            <param name="node">Instance of <see cref="T:Microsoft.SemanticKernel.PromptNode"/>.</param>
            <remarks>
            A valid chat message is a node with the following structure:<br/>
            TagName = "message"<br/>
            Attributes = { "role" : "..." }<br/>
            optional one or more child nodes <image>...</image><br/>
            optional one or more child nodes <text>...</text>
            </remarks>
        </member>
        <member name="T:Microsoft.SemanticKernel.ChatCompletion.IChatCompletionService">
            <summary>
            Interface for chat completion services.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.IChatCompletionService.GetChatMessageContentsAsync(Microsoft.SemanticKernel.ChatCompletion.ChatHistory,Microsoft.SemanticKernel.PromptExecutionSettings,Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <summary>
            Get chat multiple chat content choices for the prompt and settings.
            </summary>
            <remarks>
            This should be used when the settings request for more than one choice.
            </remarks>
            <param name="chatHistory">The chat history context.</param>
            <param name="executionSettings">The AI execution settings (optional).</param>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>List of different chat results generated by the remote model</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.IChatCompletionService.GetStreamingChatMessageContentsAsync(Microsoft.SemanticKernel.ChatCompletion.ChatHistory,Microsoft.SemanticKernel.PromptExecutionSettings,Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <summary>
            Get streaming chat contents for the chat history provided using the specified settings.
            </summary>
            <exception cref="T:System.NotSupportedException">Throws if the specified type is not the same or fail to cast</exception>
            <param name="chatHistory">The chat history to complete.</param>
            <param name="executionSettings">The AI execution settings (optional).</param>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>Streaming list of different completion streaming string updates generated by the remote model</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.ChatCompletion.IChatHistoryReducer">
            <summary>
            Interface for reducing the chat history.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.IChatHistoryReducer.ReduceAsync(System.Collections.Generic.IReadOnlyList{Microsoft.SemanticKernel.ChatMessageContent},System.Threading.CancellationToken)">
            <summary>
            Reduces the chat history.
            </summary>
            <param name="chatHistory">Chat history to be reduced.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>The reduced history or <see langword="null"/> if no reduction has occurred.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.ChatCompletion.StreamingKernelContentItemCollection">
            <summary>
            Contains collection of streaming kernel content items of type <see cref="T:Microsoft.SemanticKernel.StreamingKernelContent"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.StreamingKernelContentItemCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.ChatCompletion.ChatMessageContentItemCollection"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.ChatCompletion.StreamingKernelContentItemCollection.Item(System.Int32)">
            <summary>
            Gets or sets the content item at the specified index in the collection.
            </summary>
            <param name="index">The index of the content item to get or set.</param>
            <returns>The content item at the specified index.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index"/> was not valid for this collection.</exception>
        </member>
        <member name="P:Microsoft.SemanticKernel.ChatCompletion.StreamingKernelContentItemCollection.Count">
            <summary>
            Gets the number of content items in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.StreamingKernelContentItemCollection.Add(Microsoft.SemanticKernel.StreamingKernelContent)">
            <summary>
            Adds a content item to the collection.
            </summary>
            <param name="item">The content item to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is null.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.StreamingKernelContentItemCollection.Clear">
            <summary>
            Removes all content items from the collection.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.StreamingKernelContentItemCollection.Contains(Microsoft.SemanticKernel.StreamingKernelContent)">
            <summary>
            Determines whether a content item is in the collection.
            </summary>
            <param name="item">The content item to locate.</param>
            <returns>True if the content item is found in the collection; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is null.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.StreamingKernelContentItemCollection.CopyTo(Microsoft.SemanticKernel.StreamingKernelContent[],System.Int32)">
            <summary>
            Copies all of the content items in the collection to an array, starting at the specified destination array index.
            </summary>
            <param name="array">The destination array into which the content items should be copied.</param>
            <param name="arrayIndex">The zero-based index into <paramref name="array"/> at which copying should begin.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The number of content items in the collection is greater than the available space from <paramref name="arrayIndex"/> to the end of <paramref name="array"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.StreamingKernelContentItemCollection.IndexOf(Microsoft.SemanticKernel.StreamingKernelContent)">
            <summary>
            Searches for the specified content item and returns the index of the first occurrence.
            </summary>
            <param name="item">The content item to locate.</param>
            <returns>The index of the first found occurrence of the specified content item; -1 if the content item could not be found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is null.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.StreamingKernelContentItemCollection.Insert(System.Int32,Microsoft.SemanticKernel.StreamingKernelContent)">
            <summary>
            Inserts a content item into the collection at the specified index.
            </summary>
            <param name="index">The index at which the content item should be inserted.</param>
            <param name="item">The content item to insert.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is null.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.StreamingKernelContentItemCollection.Remove(Microsoft.SemanticKernel.StreamingKernelContent)">
            <summary>
            Removes the first occurrence of the specified content item from the collection.
            </summary>
            <param name="item">The content item to remove from the collection.</param>
            <returns>True if the item was successfully removed; false if it wasn't located in the collection.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is null.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.StreamingKernelContentItemCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the content item at the specified index from the collection.
            </summary>
            <param name="index">The index of the content item to remove.</param>
        </member>
        <member name="P:Microsoft.SemanticKernel.ChatCompletion.StreamingKernelContentItemCollection.System#Collections#Generic#ICollection{Microsoft#SemanticKernel#StreamingKernelContent}#IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.StreamingKernelContentItemCollection.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.StreamingKernelContentItemCollection.System#Collections#Generic#IEnumerable{Microsoft#SemanticKernel#StreamingKernelContent}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.Embeddings.EmbeddingGenerationExtensions">
            <summary>
            Provides a collection of static methods for operating on <see cref="T:Microsoft.SemanticKernel.Embeddings.IEmbeddingGenerationService`2"/> objects.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Embeddings.EmbeddingGenerationExtensions.DimensionsKey">
            <summary>
            Gets the key used to store the dimensions value in the <see cref="T:Microsoft.SemanticKernel.Embeddings.IEmbeddingGenerationService`2"/> dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Embeddings.EmbeddingGenerationExtensions.GenerateEmbeddingAsync``2(Microsoft.SemanticKernel.Embeddings.IEmbeddingGenerationService{``0,``1},``0,Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <summary>
            Generates an embedding from the given <paramref name="value"/>.
            </summary>
            <typeparam name="TValue">The type from which embeddings will be generated.</typeparam>
            <typeparam name="TEmbedding">The numeric type of the embedding data.</typeparam>
            <param name="generator">The embedding generator.</param>
            <param name="value">A value from which an embedding will be generated.</param>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A list of embedding structs representing the input <paramref name="value"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Embeddings.EmbeddingGenerationExtensions.AsEmbeddingGenerator``2(Microsoft.SemanticKernel.Embeddings.IEmbeddingGenerationService{``0,``1})">
            <summary>Creates an <see cref="T:Microsoft.Extensions.AI.IEmbeddingGenerator`2"/> for the specified <see cref="T:Microsoft.SemanticKernel.Embeddings.IEmbeddingGenerationService`2"/>.</summary>
            <param name="service">The embedding generation service to be represented as an embedding generator.</param>
            <returns>
            The <see cref="T:Microsoft.Extensions.AI.IEmbeddingGenerator`2"/>. If the <paramref name="service"/> is an <see cref="T:Microsoft.Extensions.AI.IEmbeddingGenerator`2"/>,
            the <paramref name="service"/> will be returned. Otherwise, a new <see cref="T:Microsoft.Extensions.AI.IEmbeddingGenerator`2"/> will be created that wraps the <paramref name="service"/>.
            </returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Embeddings.EmbeddingGenerationExtensions.AsEmbeddingGenerationService``2(Microsoft.Extensions.AI.IEmbeddingGenerator{``0,Microsoft.Extensions.AI.Embedding{``1}},System.IServiceProvider)">
            <summary>Creates an <see cref="T:Microsoft.SemanticKernel.Embeddings.IEmbeddingGenerationService`2"/> for the specified <see cref="T:Microsoft.Extensions.AI.IEmbeddingGenerator`2"/>.</summary>
            <param name="generator">The embedding generator to be represented as an embedding generation service.</param>
            <param name="serviceProvider">An optional <see cref="T:System.IServiceProvider"/> that can be used to resolve services to use in the instance.</param>
            <returns>
            The <see cref="T:Microsoft.SemanticKernel.Embeddings.IEmbeddingGenerationService`2"/>. If the <paramref name="generator"/> is an <see cref="T:Microsoft.SemanticKernel.Embeddings.IEmbeddingGenerationService`2"/>,
            the <paramref name="generator"/> will be returned. Otherwise, a new <see cref="T:Microsoft.SemanticKernel.Embeddings.IEmbeddingGenerationService`2"/> will be created that wraps the <paramref name="generator"/>.
            </returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Embeddings.EmbeddingGenerationExtensions.AsTextEmbeddingGenerationService(Microsoft.Extensions.AI.IEmbeddingGenerator{System.String,Microsoft.Extensions.AI.Embedding{System.Single}},System.IServiceProvider)">
            <summary>Creates a <see cref="T:Microsoft.SemanticKernel.Embeddings.ITextEmbeddingGenerationService"/> from a <see cref="T:Microsoft.Extensions.AI.IEmbeddingGenerator`2"/> where input of <see cref="T:System.String"/> and an embedding of <see cref="T:System.Single"/>.</summary>
            <param name="generator">Input as string with embedding as floats generator</param>
            <param name="serviceProvider">An optional <see cref="T:System.IServiceProvider"/> that can be used to resolve services to use in the instance.</param>
            <returns>
            The <see cref="T:Microsoft.SemanticKernel.Embeddings.ITextEmbeddingGenerationService"/>. If the <paramref name="generator"/> is an <see cref="T:Microsoft.SemanticKernel.Embeddings.ITextEmbeddingGenerationService"/>,
            the <paramref name="generator"/> will be returned. Otherwise, a new <see cref="T:Microsoft.SemanticKernel.Embeddings.ITextEmbeddingGenerationService"/> will be created that wraps the <paramref name="generator"/>.
            </returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Embeddings.EmbeddingGenerationExtensions.GetDimensions``2(Microsoft.SemanticKernel.Embeddings.IEmbeddingGenerationService{``0,``1})">
            <summary>
            Gets the dimensions from <paramref name="service"/>'s <see cref="T:Microsoft.SemanticKernel.Embeddings.IEmbeddingGenerationService`2"/>.
            </summary>
            <param name="service">The service from which to get the dimensions.</param>
            <returns>The dimensions if it was specified in the service's attributes; otherwise, null.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Embeddings.EmbeddingGenerationExtensions.EmbeddingGenerationServiceEmbeddingGenerator`2">
            <summary>Provides an implementation of <see cref="T:Microsoft.Extensions.AI.IEmbeddingGenerator`2"/> around an <see cref="T:Microsoft.SemanticKernel.Embeddings.IEmbeddingGenerationService`2"/>.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Embeddings.EmbeddingGenerationExtensions.EmbeddingGenerationServiceEmbeddingGenerator`2._service">
            <summary>The wrapped <see cref="T:Microsoft.SemanticKernel.Embeddings.IEmbeddingGenerationService`2"/></summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Embeddings.EmbeddingGenerationExtensions.EmbeddingGenerationServiceEmbeddingGenerator`2.#ctor(Microsoft.SemanticKernel.Embeddings.IEmbeddingGenerationService{`0,`1})">
            <summary>Initializes the <see cref="T:Microsoft.SemanticKernel.Embeddings.EmbeddingGenerationExtensions.EmbeddingGenerationServiceEmbeddingGenerator`2"/> for <paramref name="service"/>.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Embeddings.EmbeddingGenerationExtensions.EmbeddingGenerationServiceEmbeddingGenerator`2.Metadata">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.SemanticKernel.Embeddings.EmbeddingGenerationExtensions.EmbeddingGenerationServiceEmbeddingGenerator`2.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.SemanticKernel.Embeddings.EmbeddingGenerationExtensions.EmbeddingGenerationServiceEmbeddingGenerator`2.GenerateAsync(System.Collections.Generic.IEnumerable{`0},Microsoft.Extensions.AI.EmbeddingGenerationOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.SemanticKernel.Embeddings.EmbeddingGenerationExtensions.EmbeddingGenerationServiceEmbeddingGenerator`2.GetService(System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.SemanticKernel.Embeddings.EmbeddingGenerationExtensions.EmbeddingGeneratorEmbeddingGenerationService`2">
            <summary>Provides an implementation of <see cref="T:Microsoft.SemanticKernel.Embeddings.IEmbeddingGenerationService`2"/> around an <see cref="T:Microsoft.SemanticKernel.Embeddings.EmbeddingGenerationExtensions.EmbeddingGeneratorEmbeddingGenerationService`2"/>.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Embeddings.EmbeddingGenerationExtensions.EmbeddingGeneratorEmbeddingGenerationService`2._generator">
            <summary>The wrapped <see cref="T:Microsoft.Extensions.AI.IEmbeddingGenerator`2"/></summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Embeddings.EmbeddingGenerationExtensions.EmbeddingGeneratorEmbeddingGenerationService`2.#ctor(Microsoft.Extensions.AI.IEmbeddingGenerator{`0,Microsoft.Extensions.AI.Embedding{`1}},System.IServiceProvider)">
            <summary>Initializes the <see cref="T:Microsoft.SemanticKernel.Embeddings.EmbeddingGenerationExtensions.EmbeddingGeneratorEmbeddingGenerationService`2"/> for <paramref name="generator"/>.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Embeddings.EmbeddingGenerationExtensions.EmbeddingGeneratorEmbeddingGenerationService`2.Attributes">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.SemanticKernel.Embeddings.EmbeddingGenerationExtensions.EmbeddingGeneratorEmbeddingGenerationService`2.GenerateEmbeddingsAsync(System.Collections.Generic.IList{`0},Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.SemanticKernel.Embeddings.IEmbeddingGenerationService`2">
            <summary>
            Represents a generator of embeddings.
            </summary>
            <typeparam name="TValue">The type from which embeddings will be generated.</typeparam>
            <typeparam name="TEmbedding">The numeric type of the embedding data.</typeparam>
        </member>
        <member name="M:Microsoft.SemanticKernel.Embeddings.IEmbeddingGenerationService`2.GenerateEmbeddingsAsync(System.Collections.Generic.IList{`0},Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <summary>
            Generates an embedding from the given <paramref name="data"/>.
            </summary>
            <param name="data">List of strings to generate embeddings for</param>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>List of embeddings</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Embeddings.ITextEmbeddingGenerationService">
            <summary>
            Represents a generator of text embeddings of type <c>float</c>.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.AutoFunctionChoiceBehavior">
            <summary>
            Represents a <see cref="T:Microsoft.SemanticKernel.FunctionChoiceBehavior"/> that provides either all of the <see cref="T:Microsoft.SemanticKernel.Kernel"/>'s plugins' functions to AI model to call or specified ones.
            This behavior allows the model to decide whether to call the functions and, if so, which ones to call.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.AutoFunctionChoiceBehavior._autoInvoke">
            <summary>
            Indicates whether the functions should be automatically invoked by AI connectors.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.AutoFunctionChoiceBehavior.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.AutoFunctionChoiceBehavior"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.AutoFunctionChoiceBehavior.#ctor(System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.KernelFunction},System.Boolean,Microsoft.SemanticKernel.FunctionChoiceBehaviorOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.AutoFunctionChoiceBehavior"/> class.
            </summary>
            <param name="functions">
            Functions to provide to AI model. If null, all <see cref="T:Microsoft.SemanticKernel.Kernel"/>'s plugins' functions are provided to the model.
            If empty, no functions are provided to the model, which is equivalent to disabling function calling.
            </param>
            <param name="autoInvoke">
            Indicates whether the functions should be automatically invoked by AI connectors.
            </param>
            <param name="options">The behavior options.</param>
        </member>
        <member name="P:Microsoft.SemanticKernel.AutoFunctionChoiceBehavior.Functions">
            <summary>
            Fully qualified names of the functions to provide to AI model.
            If null, all <see cref="T:Microsoft.SemanticKernel.Kernel"/>'s plugins' functions are provided to the model.
            If empty, no functions are provided to the model, which is equivalent to disabling function calling.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.AutoFunctionChoiceBehavior.Options">
            <summary>
            The behavior options.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.AutoFunctionChoiceBehavior.GetConfiguration(Microsoft.SemanticKernel.FunctionChoiceBehaviorConfigurationContext)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.SemanticKernel.FunctionChoice">
            <summary>
            Represents an AI model's decision-making strategy for calling functions, offering predefined choices: Auto, Required, and None.
            Auto allows the model to decide if and which functions to call, Required enforces calling one or more functions, and None prevents any function calls, generating only a user-facing message.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.FunctionChoice.Auto">
            <summary>
            This choice instructs the model to decide whether to call the functions or not and, if so, which ones to call.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.FunctionChoice.Required">
            <summary>
            This choice forces the model to always call one or more functions. The model will then select which function(s) to call.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.FunctionChoice.None">
            <summary>
            This behavior forces the model to not call any functions and only generate a user-facing message.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.FunctionChoice.Label">
            <summary>
            Gets the label associated with this FunctionChoice.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.FunctionChoice.#ctor(System.String)">
            <summary>
            Creates a new FunctionChoice instance with the provided label.
            </summary>
            <param name="label">The label to associate with this FunctionChoice.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.FunctionChoice.op_Equality(Microsoft.SemanticKernel.FunctionChoice,Microsoft.SemanticKernel.FunctionChoice)">
            <summary>
            Returns a value indicating whether two FunctionChoice instances are equivalent, as determined by a
            case-insensitive comparison of their labels.
            </summary>
            <param name="left"> the first FunctionChoice instance to compare </param>
            <param name="right"> the second FunctionChoice instance to compare </param>
            <returns> true if left and right are both null or have equivalent labels; false otherwise </returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.FunctionChoice.op_Inequality(Microsoft.SemanticKernel.FunctionChoice,Microsoft.SemanticKernel.FunctionChoice)">
            <summary>
            Returns a value indicating whether two FunctionChoice instances are not equivalent, as determined by a
            case-insensitive comparison of their labels.
            </summary>
            <param name="left"> the first FunctionChoice instance to compare </param>
            <param name="right"> the second FunctionChoice instance to compare </param>
            <returns> false if left and right are both null or have equivalent labels; true otherwise </returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.FunctionChoice.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.FunctionChoice.Equals(Microsoft.SemanticKernel.FunctionChoice)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.FunctionChoice.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.FunctionChoice.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.FunctionChoiceBehavior">
            <summary>
            Represents the base class for different function choice behaviors.
            These behaviors define the way functions are chosen by AI model and various aspects of their invocation by AI connectors.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.FunctionChoiceBehavior.FunctionNameSeparator">
            <summary>The separator used to separate plugin name and function name.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.FunctionChoiceBehavior.DefaultOptions">
            <summary>The behavior default options.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.FunctionChoiceBehavior._functions">
            <summary>
            List of the functions to provide to AI model.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.FunctionChoiceBehavior.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.SemanticKernel.FunctionChoiceBehavior"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.FunctionChoiceBehavior.#ctor(System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.KernelFunction})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.FunctionChoiceBehavior"/> class.
            </summary>
            <param name="functions">
            Functions to provide to AI model. If null, all <see cref="T:Microsoft.SemanticKernel.Kernel"/>'s plugins' functions are provided to the model.
            If empty, no functions are provided to the model.
            </param>
        </member>
        <member name="M:Microsoft.SemanticKernel.FunctionChoiceBehavior.Auto(System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.KernelFunction},System.Boolean,Microsoft.SemanticKernel.FunctionChoiceBehaviorOptions)">
            <summary>
            Gets an instance of the <see cref="T:Microsoft.SemanticKernel.FunctionChoiceBehavior"/> that provides either all of the <see cref="T:Microsoft.SemanticKernel.Kernel"/>'s plugins' functions to the AI model to call or specified ones.
            This behavior allows the model to decide whether to call the functions and, if so, which ones to call.
            </summary>
            <param name="functions">
            Functions to provide to the model. If null, all of the <see cref="T:Microsoft.SemanticKernel.Kernel"/>'s plugins' functions are provided to the model.
            If empty, no functions are provided to the model, which is equivalent to disabling function calling.
            </param>
            <param name="autoInvoke">
            Indicates whether the functions should be automatically invoked by AI connectors.
            </param>
            <param name="options">The behavior options.</param>
            <returns>An instance of one of the <see cref="T:Microsoft.SemanticKernel.FunctionChoiceBehavior"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.FunctionChoiceBehavior.Required(System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.KernelFunction},System.Boolean,Microsoft.SemanticKernel.FunctionChoiceBehaviorOptions)">
            <summary>
            Gets an instance of the <see cref="T:Microsoft.SemanticKernel.FunctionChoiceBehavior"/> that provides either all of the <see cref="T:Microsoft.SemanticKernel.Kernel"/>'s plugins' functions to the AI model to call or specified ones.
            This behavior forces the model to call the provided functions. SK connectors will invoke a requested function or multiple requested functions if the model requests multiple ones in one request, while handling the first request, and stop advertising the functions for the following requests to prevent the model from repeatedly calling the same function(s).
            </summary>
            <param name="functions">
            Functions to provide to the model. If null, all of the <see cref="T:Microsoft.SemanticKernel.Kernel"/>'s plugins' functions are provided to the model.
            If empty, no functions are provided to the model, which is equivalent to disabling function calling.
            </param>
            <param name="autoInvoke">
            Indicates whether the functions should be automatically invoked by AI connectors.
            </param>
            <param name="options">The behavior options.</param>
            <returns>An instance of one of the <see cref="T:Microsoft.SemanticKernel.FunctionChoiceBehavior"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.FunctionChoiceBehavior.None(System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.KernelFunction},Microsoft.SemanticKernel.FunctionChoiceBehaviorOptions)">
            <summary>
            Gets an instance of the <see cref="T:Microsoft.SemanticKernel.FunctionChoiceBehavior"/> that provides either all of the <see cref="T:Microsoft.SemanticKernel.Kernel"/>'s plugins' functions to AI model to call or specified ones but instructs it not to call any of them.
            The model may use the provided function in the response it generates. E.g. the model may describe which functions it would call and with what parameter values.
            This response is useful if the user should first validate what functions the model will use.
            </summary>
            <param name="functions">
            Functions to provide to the model. If null, all of the <see cref="T:Microsoft.SemanticKernel.Kernel"/>'s plugins' functions are provided to the model.
            If empty, no functions are provided to the model.
            </param>
            <param name="options">The behavior options.</param>
            <returns>An instance of one of the <see cref="T:Microsoft.SemanticKernel.FunctionChoiceBehavior"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.FunctionChoiceBehavior.GetConfiguration(Microsoft.SemanticKernel.FunctionChoiceBehaviorConfigurationContext)">
            <summary>
            Returns the configuration used by AI connectors to determine function choice and invocation behavior.
            </summary>
            <param name="context">The context provided by AI connectors, used to determine the configuration.</param>
            <returns>The configuration.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.FunctionChoiceBehavior.GetFunctions(System.Collections.Generic.IList{System.String},Microsoft.SemanticKernel.Kernel,System.Boolean)">
            <summary>
            Returns functions AI connector should provide to the AI model.
            </summary>
            <param name="functionFQNs">Functions provided as fully qualified names.</param>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> to be used for function calling.</param>
            <param name="autoInvoke">Indicates whether the functions should be automatically invoked by the AI connector.</param>
            <returns>The configuration.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.FunctionChoiceBehaviorConfiguration">
            <summary>
            Represents function choice behavior configuration produced by a <see cref="T:Microsoft.SemanticKernel.FunctionChoiceBehavior" />.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.FunctionChoiceBehaviorConfiguration.#ctor(Microsoft.SemanticKernel.FunctionChoiceBehaviorOptions)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.SemanticKernel.FunctionChoiceBehaviorConfiguration"/> class.
            <param name="options">The behavior options.</param>
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.FunctionChoiceBehaviorConfiguration.Choice">
            <summary>
            Represents an AI model's decision-making strategy for calling functions.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.FunctionChoiceBehaviorConfiguration.Functions">
            <summary>
            The functions available for AI model.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.FunctionChoiceBehaviorConfiguration.AutoInvoke">
            <summary>
            Indicates whether the functions should be automatically invoked by the AI connector.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.FunctionChoiceBehaviorConfiguration.Options">
            <summary>
            The behavior options.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.FunctionChoiceBehaviorConfigurationContext">
            <summary>
            The context is to be provided by the choice behavior consumer – AI connector in order to obtain the choice behavior configuration.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.FunctionChoiceBehaviorConfigurationContext.#ctor(Microsoft.SemanticKernel.ChatCompletion.ChatHistory)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.SemanticKernel.FunctionChoiceBehaviorConfigurationContext"/>.
            </summary>
            <param name="chatHistory">History of the current chat session.</param>
        </member>
        <member name="P:Microsoft.SemanticKernel.FunctionChoiceBehaviorConfigurationContext.ChatHistory">
            <summary>
            History of the current chat session.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.FunctionChoiceBehaviorConfigurationContext.Kernel">
            <summary>
            The <see cref="P:Microsoft.SemanticKernel.FunctionChoiceBehaviorConfigurationContext.Kernel"/> used by in the current chat session.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.FunctionChoiceBehaviorConfigurationContext.RequestSequenceIndex">
            <summary>
            Request sequence index of automatic function invocation process. Starts from 0.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.FunctionChoiceBehaviorOptions">
            <summary>
            Represents the options for a function choice behavior.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.FunctionChoiceBehaviorOptions.AllowParallelCalls">
            <summary>
            Gets or sets whether AI model should prefer parallel function calls over sequential ones.
            If set to true, instructs the model to call multiple functions in one request if the model supports parallel function calls.
            Otherwise, it will send a request for each function call. If set to null, the AI model default value will be used.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.FunctionChoiceBehaviorOptions.AllowConcurrentInvocation">
            <summary>
            Gets or sets whether multiple function invocations requested in parallel by the service may be invoked to run concurrently.
            </summary>
            <remarks>
            The default value is set to false. However, if the function invocations are safe to execute concurrently,
            such as when the function does not modify shared state, this setting can be set to true.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.FunctionChoiceBehaviorOptions.AllowStrictSchemaAdherence">
            <summary>
            Gets or sets whether the AI model should strictly adhere to the function schema.
            </summary>
            <remarks>
            The default value is set to false. If set to true, the AI model will strictly adhere to the function schema.
            </remarks>
        </member>
        <member name="T:Microsoft.SemanticKernel.NoneFunctionChoiceBehavior">
            <summary>
            Represents <see cref="T:Microsoft.SemanticKernel.FunctionChoiceBehavior"/> that provides either all of the <see cref="T:Microsoft.SemanticKernel.Kernel"/>'s plugins' functions to AI model to call or specified ones but instructs it not to call any of them.
            The model may use the provided function in the response it generates. E.g. the model may describe which functions it would call and with what parameter values.
            This response is useful if the user should first validate what functions the model will use.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.NoneFunctionChoiceBehavior.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.NoneFunctionChoiceBehavior"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.NoneFunctionChoiceBehavior.#ctor(System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.KernelFunction},Microsoft.SemanticKernel.FunctionChoiceBehaviorOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.NoneFunctionChoiceBehavior"/> class.
            </summary>
            <param name="functions">
            Functions to provide to AI model. If null, all <see cref="T:Microsoft.SemanticKernel.Kernel"/>'s plugins' functions are provided to the model.
            If empty, no functions are provided to the model.
            </param>
            <param name="options">The behavior options.</param>
        </member>
        <member name="P:Microsoft.SemanticKernel.NoneFunctionChoiceBehavior.Functions">
            <summary>
            Fully qualified names of the functions to provide to AI model.
            If null, all <see cref="T:Microsoft.SemanticKernel.Kernel"/>'s plugins' functions are provided to the model.
            If empty, no functions are provided to the model, which is equivalent to disabling function calling.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.NoneFunctionChoiceBehavior.Options">
            <summary>
            The behavior options.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.NoneFunctionChoiceBehavior.GetConfiguration(Microsoft.SemanticKernel.FunctionChoiceBehaviorConfigurationContext)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.SemanticKernel.RequiredFunctionChoiceBehavior">
            <summary>
            Represents <see cref="T:Microsoft.SemanticKernel.FunctionChoiceBehavior"/> that provides either all of the <see cref="T:Microsoft.SemanticKernel.Kernel"/>'s plugins' functions to AI model to call or specified ones.
            This behavior forces the model to always call one or more functions.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.RequiredFunctionChoiceBehavior._autoInvoke">
            <summary>
            Indicates whether the functions should be automatically invoked by AI connectors.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.RequiredFunctionChoiceBehavior.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.RequiredFunctionChoiceBehavior"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.RequiredFunctionChoiceBehavior.#ctor(System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.KernelFunction},System.Boolean,Microsoft.SemanticKernel.FunctionChoiceBehaviorOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.RequiredFunctionChoiceBehavior"/> class.
            </summary>
            <param name="functions">
            Functions to provide to AI model. If null, all <see cref="T:Microsoft.SemanticKernel.Kernel"/>'s plugins' functions are provided to the model.
            If empty, no functions are provided to the model, which is equivalent to disabling function calling.
            </param>
            <param name="autoInvoke">
            Indicates whether the functions should be automatically invoked by AI connectors.
            </param>
            <param name="options">The behavior options.</param>
        </member>
        <member name="P:Microsoft.SemanticKernel.RequiredFunctionChoiceBehavior.Functions">
            <summary>
            Fully qualified names of the functions to provide to AI model.
            If null, all <see cref="T:Microsoft.SemanticKernel.Kernel"/>'s plugins' functions are provided to the model.
            If empty, no functions are provided to the model, which is equivalent to disabling function calling.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.RequiredFunctionChoiceBehavior.Options">
            <summary>
            The behavior options.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.RequiredFunctionChoiceBehavior.GetConfiguration(Microsoft.SemanticKernel.FunctionChoiceBehaviorConfigurationContext)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.SemanticKernel.ImageToText.IImageToTextService">
            <summary>
            Interface for image-to-text services.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.ImageToText.IImageToTextService.GetTextContentsAsync(Microsoft.SemanticKernel.ImageContent,Microsoft.SemanticKernel.PromptExecutionSettings,Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <summary>
            Get text content from image content.
            </summary>
            <param name="content">Image content.</param>
            <param name="executionSettings">The AI execution settings (optional).</param>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>Text content from image content.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.ImageToText.ImageToTextExtensions">
            <summary>
            Class sponsor that holds extension methods for <see cref ="T:Microsoft.SemanticKernel.ImageToText.IImageToTextService" /> interface.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.ImageToText.ImageToTextExtensions.GetTextContentAsync(Microsoft.SemanticKernel.ImageToText.IImageToTextService,Microsoft.SemanticKernel.ImageContent,Microsoft.SemanticKernel.PromptExecutionSettings,Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <summary>
            Get a single text generation result for the prompt and settings.
            </summary>
            <param name="imageToTextService">Image to text service</param>
            <param name="content">The image content to generate text from.</param>
            <param name="executionSettings">The AI execution settings (optional).</param>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>The single text result generated by the remote model</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.PromptExecutionSettings">
            <summary>
            Provides execution settings for an AI request.
            </summary>
            <remarks>
            Implementors of <see cref="T:Microsoft.SemanticKernel.TextGeneration.ITextGenerationService"/> or <see cref="T:Microsoft.SemanticKernel.ChatCompletion.IChatCompletionService"/> can extend this
            if the service they are calling supports additional properties. For an example, please reference
            the Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIPromptExecutionSettings implementation.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.PromptExecutionSettings.DefaultServiceId">
            <summary>
            Gets the default service identifier.
            </summary>
            <remarks>
            In a dictionary of <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/>, this is the key that should be used settings considered the default.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.PromptExecutionSettings.ServiceId">
            <summary>
            Service identifier.
            This identifies the service these settings are configured for e.g., azure_openai_eastus, openai, ollama, huggingface, etc.
            </summary>
            <remarks>
            When provided, this service identifier will be the key in a dictionary collection of execution settings for both <see cref="T:Microsoft.SemanticKernel.KernelArguments"/> and <see cref="T:Microsoft.SemanticKernel.PromptTemplateConfig"/>.
            If not provided the service identifier will be the default value in <see cref="P:Microsoft.SemanticKernel.PromptExecutionSettings.DefaultServiceId"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.PromptExecutionSettings.ModelId">
            <summary>
            Model identifier.
            This identifies the AI model these settings are configured for e.g., gpt-4, gpt-3.5-turbo
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.PromptExecutionSettings.FunctionChoiceBehavior">
            <summary>
            Gets or sets the behavior defining the way functions are chosen by LLM and how they are invoked by AI connectors.
            </summary>
            <remarks>
            <list type="bullet">
            <item>To disable function calling, and have the model only generate a user-facing message, set the property to null (the default).</item>
            <item>
            To allow the model to decide whether to call the functions and, if so, which ones to call, set the property to an instance returned
            by the <see cref="M:Microsoft.SemanticKernel.FunctionChoiceBehavior.Auto(System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.KernelFunction},System.Boolean,Microsoft.SemanticKernel.FunctionChoiceBehaviorOptions)"/> method.
            </item>
            <item>
            To force the model to always call one or more functions set the property to an instance returned
            by the <see cref="M:Microsoft.SemanticKernel.FunctionChoiceBehavior.Required(System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.KernelFunction},System.Boolean,Microsoft.SemanticKernel.FunctionChoiceBehaviorOptions)"/> method.
            </item>
            <item>
            To instruct the model to not call any functions and only generate a user-facing message, set the property to an instance returned
            by the <see cref="M:Microsoft.SemanticKernel.FunctionChoiceBehavior.None(System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.KernelFunction},Microsoft.SemanticKernel.FunctionChoiceBehaviorOptions)"/> method.
            </item>
            </list>
            For all the behaviors that presume the model to call functions, auto-invoke can be specified. If LLM
            call a function and auto-invoke enabled, SK will attempt to resolve that function from the functions
            available, and if found, rather than returning the response back to the caller, it will invoke the function automatically.
            The intermediate messages will be retained in the provided <see cref="T:Microsoft.SemanticKernel.ChatCompletion.ChatHistory"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.PromptExecutionSettings.ExtensionData">
            <summary>
            Extra properties that may be included in the serialized execution settings.
            </summary>
            <remarks>
            Avoid using this property if possible. Instead, use one of the classes that extends <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.PromptExecutionSettings.IsFrozen">
            <summary>
            Gets a value that indicates whether the <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/> are currently modifiable.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.PromptExecutionSettings.Freeze">
            <summary>
            Makes the current <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/> unmodifiable and sets its IsFrozen property to true.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.PromptExecutionSettings.Clone">
            <summary>
            Creates a new <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/> object that is a copy of the current instance.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.PromptExecutionSettings.ThrowIfFrozen">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> if the <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/> are frozen.
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:Microsoft.SemanticKernel.PromptNode">
            <summary>
            Class that contains information about node in prompt.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.PromptNode.#ctor(System.String)">
            <summary>
            Class that contains information about node in prompt.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.PromptNode.TagName">
            <summary>
            Node tag name.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.PromptNode.Content">
            <summary>
            Node content.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.PromptNode.Attributes">
            <summary>
            Collection of node attributes.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.PromptNode.ChildNodes">
            <summary>
            Collection of child nodes.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.TextGeneration.ITextGenerationService">
            <summary>
            Interface for text generation services
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.TextGeneration.ITextGenerationService.GetTextContentsAsync(System.String,Microsoft.SemanticKernel.PromptExecutionSettings,Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <summary>
            Get completion results for the prompt and settings.
            </summary>
            <param name="prompt">The raw prompt input.</param>
            <param name="executionSettings">The AI execution settings (optional).</param>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>List of different completions results generated by the remote model</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.TextGeneration.ITextGenerationService.GetStreamingTextContentsAsync(System.String,Microsoft.SemanticKernel.PromptExecutionSettings,Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <summary>
            Get streaming results for the prompt using the specified execution settings.
            Each modality may support for different types of streaming contents.
            </summary>
            <remarks>
            Usage of this method with value types may be more efficient if the connector supports it.
            </remarks>
            <exception cref="T:System.NotSupportedException">Throws if the specified type is not the same or fail to cast</exception>
            <param name="prompt">The prompt to complete.</param>
            <param name="executionSettings">The AI execution settings (optional).</param>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>Streaming list of different completion streaming string updates generated by the remote model</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.TextGeneration.TextGenerationExtensions">
            <summary>
            Class sponsor that holds extension methods for <see cref ="T:Microsoft.SemanticKernel.TextGeneration.ITextGenerationService" /> interface.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.TextGeneration.TextGenerationExtensions.GetTextContentAsync(Microsoft.SemanticKernel.TextGeneration.ITextGenerationService,System.String,Microsoft.SemanticKernel.PromptExecutionSettings,Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <summary>
            Get a single text generation result for the prompt and settings.
            </summary>
            <param name="textGenerationService">Text generation service</param>
            <param name="prompt">The standardized prompt input.</param>
            <param name="executionSettings">The AI execution settings (optional).</param>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>Single text content generated by the remote model.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.TextGeneration.TextGenerationExtensions.GetTextContentsWithDefaultParserAsync(Microsoft.SemanticKernel.TextGeneration.ITextGenerationService,System.String,Microsoft.SemanticKernel.PromptExecutionSettings,Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <summary>
            Get a text generation results for the standardized prompt and settings.
            </summary>
            <param name="textGenerationService">Text generation service</param>
            <param name="prompt">The standardized prompt input.</param>
            <param name="executionSettings">The AI execution settings (optional).</param>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>List of different text results generated by the remote model</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.TextGeneration.TextGenerationExtensions.GetStreamingTextContentsWithDefaultParserAsync(Microsoft.SemanticKernel.TextGeneration.ITextGenerationService,System.String,Microsoft.SemanticKernel.PromptExecutionSettings,Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <summary>
            Get streaming results for the standardized prompt using the specified settings.
            Each modality may support for different types of streaming contents.
            </summary>
            <remarks>
            Usage of this method with value types may be more efficient if the connector supports it.
            </remarks>
            <exception cref="T:System.NotSupportedException">Throws if the specified type is not the same or fail to cast</exception>
            <param name="textGenerationService">Text generation service</param>
            <param name="prompt">The standardized prompt to complete.</param>
            <param name="executionSettings">The AI execution settings (optional).</param>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>Streaming list of different generation streaming string updates generated by the remote model</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.TextToAudio.ITextToAudioService">
            <summary>
            Interface for text-to-audio services.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.TextToAudio.ITextToAudioService.GetAudioContentsAsync(System.String,Microsoft.SemanticKernel.PromptExecutionSettings,Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <summary>
            Get audio contents from text.
            </summary>
            <param name="text">The text to generate audio for.</param>
            <param name="executionSettings">The AI execution settings (optional).</param>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>Audio contents from text.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.TextToAudio.TextToAudioServiceExtensions">
            <summary>
            Class with extension methods for <see cref="T:Microsoft.SemanticKernel.TextToAudio.ITextToAudioService"/> interface.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.TextToAudio.TextToAudioServiceExtensions.GetAudioContentAsync(Microsoft.SemanticKernel.TextToAudio.ITextToAudioService,System.String,Microsoft.SemanticKernel.PromptExecutionSettings,Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <summary>
            Get audio content from text.
            </summary>
            <param name="textToAudioService"></param>
            <param name="text">The text to generate audio for.</param>
            <param name="executionSettings">The AI execution settings (optional).</param>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>Audio content from text.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.TextToImage.ITextToImageService">
            <summary>
            Interface for text to image services
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.TextToImage.ITextToImageService.GetImageContentsAsync(Microsoft.SemanticKernel.TextContent,Microsoft.SemanticKernel.PromptExecutionSettings,Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <summary>
            Given a prompt and/or an input text, the model will generate a new image.
            </summary>
            <param name="input">Input text for image generation</param>
            <param name="executionSettings">Text to image execution settings</param>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>Generated image contents</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.TextToImage.TextToImageServiceExtensions">
            <summary>
            Extension methods for <see cref="T:Microsoft.SemanticKernel.TextToImage.ITextToImageService"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.TextToImage.TextToImageServiceExtensions.GenerateImageAsync(Microsoft.SemanticKernel.TextToImage.ITextToImageService,System.String,System.Int32,System.Int32,Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <summary>
            Given a prompt and/or an input text, the model will generate a new image.
            </summary>
            <param name="service">Target <see cref="T:Microsoft.SemanticKernel.TextToImage.ITextToImageService"/> instance</param>
            <param name="description">Image generation prompt</param>
            <param name="width">Image width in pixels</param>
            <param name="height">Image height in pixels</param>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>Generated image in base64 format or image URL</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.XmlPromptParser">
            <summary>
            Class to parse text prompt from XML format.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.XmlPromptParser.TryParse(System.String,System.Collections.Generic.List{Microsoft.SemanticKernel.PromptNode}@)">
            <summary>
            Parses text prompt and sets output as collection of <see cref="T:Microsoft.SemanticKernel.PromptNode"/> instances.
            </summary>
            <param name="prompt">Text prompt to parse.</param>
            <param name="result">Parsing output as collection of <see cref="T:Microsoft.SemanticKernel.PromptNode"/> instances.</param>
            <returns>Returns true if parsing was successful, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.XmlPromptParser.GetPromptNode(System.Xml.XmlNode)">
            <summary>
            Gets an instance of <see cref="T:Microsoft.SemanticKernel.PromptNode"/> from <see cref="T:System.Xml.XmlNode"/> and child nodes recursively.
            </summary>
            <param name="node">Instance of <see cref="T:System.Xml.XmlNode"/> class.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.AnnotationContent">
            <summary>
            Content type to support message annotations.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.AnnotationContent.FileId">
            <summary>
            The file identifier.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.AnnotationContent.Quote">
            <summary>
            The citation.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.AnnotationContent.StartIndex">
            <summary>
            Start index of the citation.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.AnnotationContent.EndIndex">
            <summary>
            End index of the citation.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AnnotationContent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Agents.AnnotationContent"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AnnotationContent.#ctor(System.String,System.String,System.Object,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Agents.AnnotationContent"/> class.
            </summary>
            <param name="quote">The source text being referenced.</param>
            <param name="modelId">The model ID used to generate the content.</param>
            <param name="innerContent">Inner content</param>
            <param name="metadata">Additional metadata</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.StreamingAnnotationContent">
            <summary>
            Content type to support message annotations.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.StreamingAnnotationContent.FileId">
            <summary>
            The file identifier.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.StreamingAnnotationContent.Quote">
            <summary>
            The citation.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.StreamingAnnotationContent.StartIndex">
            <summary>
            Start index of the citation.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.StreamingAnnotationContent.EndIndex">
            <summary>
            End index of the citation.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.StreamingAnnotationContent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Agents.StreamingAnnotationContent"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.StreamingAnnotationContent.#ctor(System.String,System.String,System.Object,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Agents.StreamingAnnotationContent"/> class.
            </summary>
            <param name="quote">The source text being referenced.</param>
            <param name="modelId">The model ID used to generate the content.</param>
            <param name="innerContent">Inner content</param>
            <param name="metadata">Additional metadata</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.StreamingAnnotationContent.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.StreamingAnnotationContent.ToByteArray">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.AudioContent">
            <summary>
            Represents audio content.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.AudioContent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.AudioContent"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.AudioContent.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.AudioContent"/> class.
            </summary>
            <param name="uri">The URI of audio.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.AudioContent.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.AudioContent"/> class.
            </summary>
            <param name="dataUri">DataUri of the audio</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.AudioContent.#ctor(System.ReadOnlyMemory{System.Byte},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.AudioContent"/> class.
            </summary>
            <param name="data">Byte array of the audio</param>
            <param name="mimeType">Mime type of the audio</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.BinaryContent">
            <summary>
            Provides access to binary content.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.BinaryContent.Content">
            <summary>
            The binary content.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.BinaryContent.Uri">
            <summary>
            Gets the referenced Uri of the content.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.BinaryContent.DataUri">
            <summary>
            Gets the DataUri of the content.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.BinaryContent.Data">
            <summary>
            Gets the byte array data of the content.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.BinaryContent.CanRead">
            <summary>
            Indicates whether the content contains binary data in either <see cref="P:Microsoft.SemanticKernel.BinaryContent.Data"/> or <see cref="P:Microsoft.SemanticKernel.BinaryContent.DataUri"/> properties.
            </summary>
            <returns>True if the content has binary data, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.BinaryContent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.BinaryContent"/> class with no content.
            </summary>
            <remarks>
            Should be used only for serialization purposes.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.BinaryContent.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.BinaryContent"/> class referring to an external uri.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.BinaryContent.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.BinaryContent"/> class for a UriData or Uri referred content.
            </summary>
            <param name="dataUri">The Uri of the content.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.BinaryContent.#ctor(System.ReadOnlyMemory{System.Byte},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.BinaryContent"/> class from a byte array.
            </summary>
            <param name="data">Byte array content</param>
            <param name="mimeType">The mime type of the content</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.BinaryContent.SetUri(System.Uri)">
            <summary>
            Sets the Uri of the content.
            </summary>
            <param name="uri">Target Uri</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.BinaryContent.GetUri">
            <summary>
            Gets the Uri of the content.
            </summary>
            <returns>Uri of the content</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.BinaryContent.SetDataUri(System.String)">
            <summary>
            Sets the DataUri of the content.
            </summary>
            <param name="dataUri">DataUri of the content</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.BinaryContent.SetData(System.Nullable{System.ReadOnlyMemory{System.Byte}})">
            <summary>
            Sets the byte array data content.
            </summary>
            <param name="data">Byte array data content</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.BinaryContent.GetData">
            <summary>
            Gets the byte array data content.
            </summary>
            <returns>The byte array data content</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.BinaryContent.GetDataUri">
            <summary>
            Gets the DataUri of the content.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.ChatMessageContent">
            <summary>
            Represents chat message content return from a <see cref="T:Microsoft.SemanticKernel.ChatCompletion.IChatCompletionService" /> service.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.ChatMessageContent.AuthorName">
            <summary>
            Name of the author of the message
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.ChatMessageContent.Role">
            <summary>
            Role of the author of the message
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.ChatMessageContent.Content">
            <summary>
            A convenience property to get or set the text of the first item in the <see cref="P:Microsoft.SemanticKernel.ChatMessageContent.Items" /> collection of <see cref="T:Microsoft.SemanticKernel.TextContent"/> type.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.ChatMessageContent.Items">
            <summary>
            Chat message content items
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.ChatMessageContent.Encoding">
            <summary>
            The encoding of the text content.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.ChatMessageContent.Source">
            <summary>
            Represents the source of the message.
            </summary>
            <remarks>
            The source corresponds to the entity that generated this message.
            The property is intended to be used by agents to associate themselves with the messages they generate.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatMessageContent.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.SemanticKernel.ChatMessageContent"/> class
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatMessageContent.#ctor(Microsoft.SemanticKernel.ChatCompletion.AuthorRole,System.String,System.String,System.Object,System.Text.Encoding,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.SemanticKernel.ChatMessageContent"/> class
            </summary>
            <param name="role">Role of the author of the message</param>
            <param name="content">Content of the message</param>
            <param name="modelId">The model ID used to generate the content</param>
            <param name="innerContent">Inner content object reference</param>
            <param name="encoding">Encoding of the text</param>
            <param name="metadata">Dictionary for any additional metadata</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatMessageContent.#ctor(Microsoft.SemanticKernel.ChatCompletion.AuthorRole,Microsoft.SemanticKernel.ChatCompletion.ChatMessageContentItemCollection,System.String,System.Object,System.Text.Encoding,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.SemanticKernel.ChatMessageContent"/> class
            </summary>
            <param name="role">Role of the author of the message</param>
            <param name="items">Instance of <see cref="T:Microsoft.SemanticKernel.ChatCompletion.ChatMessageContentItemCollection"/> with content items</param>
            <param name="modelId">The model ID used to generate the content</param>
            <param name="innerContent">Inner content object reference</param>
            <param name="encoding">Encoding of the text</param>
            <param name="metadata">Dictionary for any additional metadata</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatMessageContent.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.FileReferenceContent">
            <summary>
            Content type to support file references.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.FileReferenceContent.FileId">
            <summary>
            The file identifier.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.FileReferenceContent.Tools">
            <summary>
            An optional tool association.
            </summary>
            <remarks>
            Tool definition depends upon the context within which the content is consumed.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.FileReferenceContent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.FileReferenceContent"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.FileReferenceContent.#ctor(System.String,System.String,System.Object,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.FileReferenceContent"/> class.
            </summary>
            <param name="fileId">The identifier of the referenced file.</param>
            <param name="modelId">The model ID used to generate the content.</param>
            <param name="innerContent">Inner content</param>
            <param name="metadata">Additional metadata</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.FunctionCallContent">
            <summary>
            Represents a function call requested by AI model.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.FunctionCallContent.Id">
            <summary>
            The function call ID.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.FunctionCallContent.PluginName">
            <summary>
            The plugin name.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.FunctionCallContent.FunctionName">
            <summary>
            The function name.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.FunctionCallContent.Arguments">
            <summary>
            The kernel arguments.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.FunctionCallContent.Exception">
            <summary>
            The exception that occurred while mapping original AI model function call to the model class.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.FunctionCallContent.#ctor(System.String,System.String,System.String,Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.SemanticKernel.FunctionCallContent"/> class.
            </summary>
            <param name="functionName">The function name.</param>
            <param name="pluginName">The plugin name.</param>
            <param name="id">The function call ID.</param>
            <param name="arguments">The function original arguments.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.FunctionCallContent.InvokeAsync(Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <summary>
            Invokes the function represented by the function call content type.
            </summary>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>The result of the function's execution.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.FunctionCallContent.GetFunctionCalls(Microsoft.SemanticKernel.ChatMessageContent)">
            <summary>
            Returns list of function calls provided via <see cref="P:Microsoft.SemanticKernel.ChatMessageContent.Items"/> collection.
            </summary>
            <param name="messageContent">The <see cref="T:Microsoft.SemanticKernel.ChatMessageContent"/>.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.FunctionCallContentBuilder">
            <summary>
            A builder class for creating <see cref="T:Microsoft.SemanticKernel.FunctionCallContent"/> objects from incremental function call updates represented by <see cref="T:Microsoft.SemanticKernel.StreamingFunctionCallUpdateContent"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.FunctionCallContentBuilder.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.SemanticKernel.FunctionCallContentBuilder"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.FunctionCallContentBuilder.#ctor(System.Text.Json.JsonSerializerOptions)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.SemanticKernel.FunctionCallContentBuilder"/> class.
            </summary>
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to use for deserializing function arguments.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.FunctionCallContentBuilder.Append(Microsoft.SemanticKernel.StreamingChatMessageContent)">
            <summary>
            Extracts function call updates from the content and track them for later building.
            </summary>
            <param name="content">The content to extract function call updates from.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.FunctionCallContentBuilder.Build">
            <summary>
            Builds a list of <see cref="T:Microsoft.SemanticKernel.FunctionCallContent"/> out of function call updates tracked by the <see cref="M:Microsoft.SemanticKernel.FunctionCallContentBuilder.Append(Microsoft.SemanticKernel.StreamingChatMessageContent)"/> method.
            </summary>
            <returns>A list of <see cref="T:Microsoft.SemanticKernel.FunctionCallContent"/> objects.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.FunctionCallContentBuilder.GetFunctionArguments(System.String,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Gets function arguments for a given function call index.
            </summary>
            <param name="functionCallIndex">The function call index to get the function arguments for.</param>
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to use for deserializing function arguments.</param>
            <returns>A tuple containing the KernelArguments and an Exception if any.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.FunctionCallContentBuilder.TrackStreamingFunctionCallUpdate(Microsoft.SemanticKernel.StreamingFunctionCallUpdateContent,System.Collections.Generic.Dictionary{System.String,System.String}@,System.Collections.Generic.Dictionary{System.String,System.String}@,System.Collections.Generic.Dictionary{System.String,System.Text.StringBuilder}@)">
            <summary>
            Tracks streaming function call update contents.
            </summary>
            <param name="update">The streaming function call update content to track.</param>
            <param name="functionCallIdsByIndex">The dictionary of function call IDs by function call index.</param>
            <param name="functionNamesByIndex">The dictionary of function names by function call index.</param>
            <param name="functionArgumentBuildersByIndex">The dictionary of function argument builders by function call index.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.FunctionResultContent">
            <summary>
            Represents the result of a function call.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.FunctionResultContent.CallId">
            <summary>
            The function call ID.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.FunctionResultContent.PluginName">
            <summary>
            The plugin name.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.FunctionResultContent.FunctionName">
            <summary>
            The function name.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.FunctionResultContent.Result">
            <summary>
            The result of the function call, the function invocation exception or the custom error message.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.FunctionResultContent.#ctor(System.String,System.String,System.String,System.Object)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.SemanticKernel.FunctionResultContent"/> class.
            </summary>
            <param name="functionName">The function name.</param>
            <param name="pluginName">The plugin name.</param>
            <param name="callId">The function call ID.</param>
            <param name="result">The function result.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.FunctionResultContent.#ctor(Microsoft.SemanticKernel.FunctionCallContent,System.Object)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.SemanticKernel.FunctionCallContent"/> class.
            </summary>
            <param name="functionCall">The function call.</param>
            <param name="result">The function result.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.FunctionResultContent.#ctor(Microsoft.SemanticKernel.FunctionCallContent,Microsoft.SemanticKernel.FunctionResult)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.SemanticKernel.FunctionCallContent"/> class.
            </summary>
            <param name="functionCallContent">The function call content.</param>
            <param name="result">The function result.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.FunctionResultContent.ToChatMessage">
            <summary>
            Creates <see cref="T:Microsoft.SemanticKernel.ChatMessageContent"/> and adds the current instance of the class to the <see cref="P:Microsoft.SemanticKernel.ChatMessageContent.Items"/> collection.
            </summary>
            <returns>The <see cref="T:Microsoft.SemanticKernel.ChatMessageContent"/> instance.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.ImageContent">
            <summary>
            Represents image content.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.ImageContent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.ImageContent"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.ImageContent.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.ImageContent"/> class.
            </summary>
            <param name="uri">The URI of image.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.ImageContent.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.ImageContent"/> class.
            </summary>
            <param name="dataUri">DataUri of the image</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.ImageContent.#ctor(System.ReadOnlyMemory{System.Byte},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.ImageContent"/> class.
            </summary>
            <param name="data">Byte array of the image</param>
            <param name="mimeType">Mime type of the image</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelContent">
            <summary>
            Base class for all AI non-streaming results
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelContent.MimeType">
            <summary>
            MIME type of the content.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelContent.InnerContent">
            <summary>
            The inner content representation. Use this to bypass the current abstraction.
            </summary>
            <remarks>
            The usage of this property is considered "unsafe". Use it only if strictly necessary.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelContent.ModelId">
            <summary>
            The model ID used to generate the content.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelContent.Metadata">
            <summary>
            The metadata associated with the content.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelContent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.KernelContent"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelContent.#ctor(System.Object,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.KernelContent"/> class.
            </summary>
            <param name="innerContent">The inner content representation</param>
            <param name="modelId">The model ID used to generate the content</param>
            <param name="metadata">Metadata associated with the content</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.StreamingChatMessageContent">
            <summary>
            Abstraction of chat message content chunks when using streaming from <see cref="T:Microsoft.SemanticKernel.ChatCompletion.IChatCompletionService"/> interface.
            </summary>
            <remarks>
            Represents a chat message content chunk that was streamed from the remote model.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.StreamingChatMessageContent.Content">
            <summary>
            A convenience property to get or set the text of the first item in the <see cref="P:Microsoft.SemanticKernel.StreamingChatMessageContent.Items" /> collection of <see cref="T:Microsoft.SemanticKernel.StreamingTextContent"/> type.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.StreamingChatMessageContent.Items">
            <summary>
            Chat message content items.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.StreamingChatMessageContent.AuthorName">
            <summary>
            Name of the author of the message
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.StreamingChatMessageContent.Role">
            <summary>
            Role of the author of the message
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.StreamingChatMessageContent.Encoding">
            <summary>
            A convenience property to get or set the encoding of the first item in the <see cref="P:Microsoft.SemanticKernel.StreamingChatMessageContent.Items" /> collection of <see cref="T:Microsoft.SemanticKernel.StreamingTextContent"/> type.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.StreamingChatMessageContent.#ctor(System.Nullable{Microsoft.SemanticKernel.ChatCompletion.AuthorRole},System.String,System.Object,System.Int32,System.String,System.Text.Encoding,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.StreamingChatMessageContent"/> class.
            </summary>
            <param name="role">Role of the author of the message</param>
            <param name="content">Content of the message</param>
            <param name="innerContent">Inner content object reference</param>
            <param name="choiceIndex">Choice index</param>
            <param name="modelId">The model ID used to generate the content</param>
            <param name="encoding">Encoding of the chat</param>
            <param name="metadata">Additional metadata</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.StreamingChatMessageContent.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.StreamingChatMessageContent.ToByteArray">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.StreamingFileReferenceContent">
            <summary>
            Content type to support file references.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.StreamingFileReferenceContent.FileId">
            <summary>
            The file identifier.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.StreamingFileReferenceContent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.StreamingFileReferenceContent"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.StreamingFileReferenceContent.#ctor(System.String,System.String,System.Object,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.StreamingFileReferenceContent"/> class.
            </summary>
            <param name="fileId">The identifier of the referenced file.</param>
            <param name="modelId">The model ID used to generate the content.</param>
            <param name="innerContent">Inner content</param>
            <param name="metadata">Additional metadata</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.StreamingFileReferenceContent.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.StreamingFileReferenceContent.ToByteArray">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.StreamingFunctionCallUpdateContent">
            <summary>
            Represents a function streaming call requested by LLM.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.StreamingFunctionCallUpdateContent.CallId">
            <summary>
            The function call ID.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.StreamingFunctionCallUpdateContent.Name">
            <summary>
            The function name.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.StreamingFunctionCallUpdateContent.Arguments">
            <summary>
            The function arguments that can come as full or partial.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.StreamingFunctionCallUpdateContent.FunctionCallIndex">
            <summary>
            The function call index.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.StreamingFunctionCallUpdateContent.RequestIndex">
            <summary>
            Index of the request that produced this message content.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.StreamingFunctionCallUpdateContent.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.SemanticKernel.StreamingFunctionCallUpdateContent"/> class.
            </summary>
            <param name="callId">The function call ID.</param>
            <param name="name">The function name.</param>
            <param name="arguments">The function original arguments.</param>
            <param name="functionCallIndex">The function call index.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.StreamingFunctionCallUpdateContent.ToString">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.SemanticKernel.StreamingFunctionCallUpdateContent.ToByteArray">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.SemanticKernel.StreamingKernelContent">
            <summary>
            Represents a single update to a streaming content.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.StreamingKernelContent.ChoiceIndex">
            <summary>
            In a scenario of multiple choices per request, this represents zero-based index of the choice in the streaming sequence
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.StreamingKernelContent.InnerContent">
            <summary>
            The inner content representation. Use this to bypass the current abstraction.
            </summary>
            <remarks>
            The usage of this property is considered "unsafe". Use it only if strictly necessary.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.StreamingKernelContent.ModelId">
            <summary>
            The model ID used to generate the content.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.StreamingKernelContent.Metadata">
            <summary>
            The metadata associated with the content.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.StreamingKernelContent.ToString">
            <summary>
            Abstract string representation of the chunk in a way it could compose/append with previous chunks.
            </summary>
            <remarks>
            Depending on the nature of the underlying type, this method may be more efficient than <see cref="M:Microsoft.SemanticKernel.StreamingKernelContent.ToByteArray"/>.
            </remarks>
            <returns>String representation of the chunk</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.StreamingKernelContent.ToByteArray">
            <summary>
            Abstract byte[] representation of the chunk in a way it could be composed/appended with previous chunks.
            </summary>
            <remarks>
            Depending on the nature of the underlying type, this method may be more efficient than <see cref="M:Microsoft.SemanticKernel.StreamingKernelContent.ToString"/>.
            </remarks>
            <returns>Byte array representation of the chunk</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.StreamingKernelContent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.StreamingKernelContent"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.StreamingKernelContent.#ctor(System.Object,System.Int32,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.StreamingKernelContent"/> class.
            </summary>
            <param name="innerContent">Inner content object reference</param>
            <param name="choiceIndex">Choice index</param>
            <param name="modelId">The model ID used to generate the content.</param>
            <param name="metadata">Additional metadata associated with the content.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.StreamingTextContent">
            <summary>
            Abstraction of text content chunks when using streaming from <see cref="T:Microsoft.SemanticKernel.TextGeneration.ITextGenerationService"/> interface.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.StreamingTextContent.Text">
            <summary>
            Text associated to the update
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.StreamingTextContent.Encoding">
            <summary>
            The encoding of the text content.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.StreamingTextContent.#ctor(System.String,System.Int32,System.String,System.Object,System.Text.Encoding,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Create a new instance of the <see cref="T:Microsoft.SemanticKernel.StreamingTextContent"/> class.
            </summary>
            <param name="text">Text update</param>
            <param name="choiceIndex">Index of the choice</param>
            <param name="modelId">The model ID used to generate the content</param>
            <param name="innerContent">Inner chunk object</param>
            <param name="encoding">Encoding of the text</param>
            <param name="metadata">Metadata information</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.StreamingTextContent.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.StreamingTextContent.ToByteArray">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.TextContent">
            <summary>
            Represents text content return from a <see cref="T:Microsoft.SemanticKernel.TextGeneration.ITextGenerationService" /> service.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.TextContent.Text">
            <summary>
            The text content.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.TextContent.Encoding">
            <summary>
            The encoding of the text content.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.TextContent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.TextContent"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.TextContent.#ctor(System.String,System.String,System.Object,System.Text.Encoding,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.TextContent"/> class.
            </summary>
            <param name="text">Text content</param>
            <param name="modelId">The model ID used to generate the content</param>
            <param name="innerContent">Inner content</param>
            <param name="encoding">Encoding of the text</param>
            <param name="metadata">Additional metadata</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.TextContent.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.TextContent.op_Implicit(System.String)~Microsoft.SemanticKernel.TextContent">
            <summary>
            When converting a string to a <see cref="T:Microsoft.SemanticKernel.TextContent"/>, the content is automatically set to the string value.
            </summary>
            <param name="text">Text content</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.Data.ITextSearch">
            <summary>
            Interface for text based search queries for use with Semantic Kernel prompts and automatic function calling.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.ITextSearch.SearchAsync(System.String,Microsoft.SemanticKernel.Data.TextSearchOptions,System.Threading.CancellationToken)">
            <summary>
            Perform a search for content related to the specified query and return <see cref="T:System.String"/> values representing the search results.
            </summary>
            <param name="query">What to search for.</param>
            <param name="searchOptions">Options used when executing a text search.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.ITextSearch.GetTextSearchResultsAsync(System.String,Microsoft.SemanticKernel.Data.TextSearchOptions,System.Threading.CancellationToken)">
            <summary>
            Perform a search for content related to the specified query and return <see cref="T:Microsoft.SemanticKernel.Data.TextSearchResult"/> values representing the search results.
            </summary>
            <param name="query">What to search for.</param>
            <param name="searchOptions">Options used when executing a text search.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.ITextSearch.GetSearchResultsAsync(System.String,Microsoft.SemanticKernel.Data.TextSearchOptions,System.Threading.CancellationToken)">
            <summary>
            Perform a search for content related to the specified query and return <see cref="T:System.Object"/> values representing the search results.
            </summary>
            <param name="query">What to search for.</param>
            <param name="searchOptions">Options used when executing a text search.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.Data.ITextSearchResultMapper">
            <summary>
            Interface for mapping between a <see cref="T:Microsoft.SemanticKernel.Data.ITextSearch" /> implementation result value, and a <see cref="T:Microsoft.SemanticKernel.Data.TextSearchResult" /> instance.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.ITextSearchResultMapper.MapFromResultToTextSearchResult(System.Object)">
            <summary>
            Map from an <see cref="T:System.Object"/> which represents a result value associated with a <see cref="T:Microsoft.SemanticKernel.Data.ITextSearch" /> implementation
            to a a <see cref="T:Microsoft.SemanticKernel.Data.TextSearchResult" /> instance.
            </summary>
            <param name="result">The result value to map.</param>
            <returns>A <see cref="T:Microsoft.SemanticKernel.Data.TextSearchResult" /> instance.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Data.MapFromResultToTextSearchResult">
            <summary>
            Delegate to map from an <see cref="T:System.Object"/> which represents a result value associated with a <see cref="T:Microsoft.SemanticKernel.Data.ITextSearch" /> implementation
            to a a <see cref="T:Microsoft.SemanticKernel.Data.TextSearchResult" /> instance.
            </summary>
            <param name="result">The result value to map.</param>
            <returns>A <see cref="T:Microsoft.SemanticKernel.Data.TextSearchResult" /> instance.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Data.TextSearchResultMapper">
            <summary>
            Default implementation of <see cref="T:Microsoft.SemanticKernel.Data.ITextSearchResultMapper" /> that use the <see cref="M:Microsoft.SemanticKernel.Data.TextSearchResultMapper.MapFromResultToTextSearchResult(System.Object)" /> delegate.
            </summary>
            <param name="mapFromResultToTextSearchResult">MapFromResultToTextSearchResult delegate</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.TextSearchResultMapper.#ctor(Microsoft.SemanticKernel.Data.MapFromResultToTextSearchResult)">
            <summary>
            Default implementation of <see cref="T:Microsoft.SemanticKernel.Data.ITextSearchResultMapper" /> that use the <see cref="M:Microsoft.SemanticKernel.Data.TextSearchResultMapper.MapFromResultToTextSearchResult(System.Object)" /> delegate.
            </summary>
            <param name="mapFromResultToTextSearchResult">MapFromResultToTextSearchResult delegate</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.TextSearchResultMapper.MapFromResultToTextSearchResult(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.SemanticKernel.Data.ITextSearchStringMapper">
            <summary>
            Interface for mapping between a <see cref="T:Microsoft.SemanticKernel.Data.ITextSearch" /> implementation result value, and a <see cref="T:System.String" /> instance.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.ITextSearchStringMapper.MapFromResultToString(System.Object)">
            <summary>
            Map from an <see cref="T:System.Object"/> which represents a result value associated with a <see cref="T:Microsoft.SemanticKernel.Data.ITextSearch" /> implementation
            to a a <see cref="T:System.String" /> instance.
            </summary>
            <param name="result">The result value to map.</param>
            <returns>A string value.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Data.MapFromResultToString">
            <summary>
            Delegate to map from an <see cref="T:System.Object"/> which represents a result value associated with a <see cref="T:Microsoft.SemanticKernel.Data.ITextSearch" /> implementation
            to a a <see cref="T:System.String" /> instance.
            </summary>
            <param name="result">The result value to map.</param>
            <returns>A string value.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Data.TextSearchStringMapper">
            <summary>
            Default implementation of <see cref="T:Microsoft.SemanticKernel.Data.ITextSearchStringMapper" /> that use the <see cref="M:Microsoft.SemanticKernel.Data.TextSearchStringMapper.MapFromResultToString(System.Object)" /> delegate.
            </summary>
            <param name="mapFromResultToString">MapFromResultToString delegate</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.TextSearchStringMapper.#ctor(Microsoft.SemanticKernel.Data.MapFromResultToString)">
            <summary>
            Default implementation of <see cref="T:Microsoft.SemanticKernel.Data.ITextSearchStringMapper" /> that use the <see cref="M:Microsoft.SemanticKernel.Data.TextSearchStringMapper.MapFromResultToString(System.Object)" /> delegate.
            </summary>
            <param name="mapFromResultToString">MapFromResultToString delegate</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.TextSearchStringMapper.MapFromResultToString(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.SemanticKernel.Data.KernelSearchResults`1">
            <summary>
            Represents the search results returned from a <see cref="T:Microsoft.SemanticKernel.Data.ITextSearch" /> service.
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Data.KernelSearchResults`1"/> class.
            </remarks>
            <param name="results">The search results.</param>
            <param name="totalCount">The total count of results found by the search operation, or null if the count was not requested.</param>
            <param name="metadata">Metadata associated with the search results.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.KernelSearchResults`1.#ctor(System.Collections.Generic.IAsyncEnumerable{`0},System.Nullable{System.Int64},System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Represents the search results returned from a <see cref="T:Microsoft.SemanticKernel.Data.ITextSearch" /> service.
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Data.KernelSearchResults`1"/> class.
            </remarks>
            <param name="results">The search results.</param>
            <param name="totalCount">The total count of results found by the search operation, or null if the count was not requested.</param>
            <param name="metadata">Metadata associated with the search results.</param>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.KernelSearchResults`1.TotalCount">
            <summary>
            The total count of results found by the search operation, or null
            if the count was not requested or cannot be computed.
            </summary>
            <remarks>
            This value represents the total number of results that are available for the current query and not the number of results being returned.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.KernelSearchResults`1.Metadata">
            <summary>
            The metadata associated with the content.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.KernelSearchResults`1.Results">
            <summary>
            The search results.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Data.TextSearchFilter">
            <summary>
            Used to provide filtering when using <see cref="T:Microsoft.SemanticKernel.Data.ITextSearch"/>.
            </summary>
            <remarks>
            A filter has a collection of <see cref="T:Microsoft.Extensions.VectorData.FilterClause"/>s that can be used by
            an <see cref="T:Microsoft.SemanticKernel.Data.ITextSearch"/> implementation to request that the underlying search
            service filter the search results.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.TextSearchFilter.FilterClauses">
            <summary>
            The clauses to apply to the <see cref="T:Microsoft.SemanticKernel.Data.TextSearchFilter" />
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.TextSearchFilter.Equality(System.String,System.Object)">
            <summary>
            Add a equality clause to the filter options.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">Value of the field.</param>
            <returns>FilterOptions instance to allow fluent configuration.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Data.TextSearchOptions">
            <summary>
            Options which can be applied when using <see cref="T:Microsoft.SemanticKernel.Data.ITextSearch"/>.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Data.TextSearchOptions.DefaultTop">
            <summary>
            Default number of search results to return.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.TextSearchOptions.IncludeTotalCount">
            <summary>
            Flag indicating the total count should be included in the results.
            </summary>
            <remarks>
            Default value is false.
            Not all text search implementations will support this option.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.TextSearchOptions.Filter">
            <summary>
            The filter expression to apply to the search query.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.TextSearchOptions.Top">
            <summary>
            Number of search results to return.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.TextSearchOptions.Skip">
            <summary>
            The index of the first result to return.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Data.TextSearchResult">
            <summary>
            Represents a search result retrieved from a <see cref="T:Microsoft.SemanticKernel.Data.ITextSearch" /> instance.
            </summary>
            <remarks>
            An instance of <see cref="T:Microsoft.SemanticKernel.Data.TextSearchResult"/> is a normalized search result which provides access to:
            - Name associated with the search result
            - Value associated with the search result
            - Link reference associated with the search result
            </remarks>
            <param name="value">The text search result value.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.TextSearchResult.#ctor(System.String)">
            <summary>
            Represents a search result retrieved from a <see cref="T:Microsoft.SemanticKernel.Data.ITextSearch" /> instance.
            </summary>
            <remarks>
            An instance of <see cref="T:Microsoft.SemanticKernel.Data.TextSearchResult"/> is a normalized search result which provides access to:
            - Name associated with the search result
            - Value associated with the search result
            - Link reference associated with the search result
            </remarks>
            <param name="value">The text search result value.</param>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.TextSearchResult.Name">
            <summary>
            The text search result name.
            </summary>
            <remarks>
            This represents the name associated with the result.
            If the text search was for a web search engine this would typically be the name of the web page associated with the search result.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.TextSearchResult.Link">
            <summary>
            The link reference associated with the text search result.
            </summary>
            <remarks>
            This represents a possible link associated with the result.
            If the text search was for a web search engine this would typically be the URL of the web page associated with the search result.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.TextSearchResult.Value">
            <summary>
            The text search result value.
            </summary>
            <remarks>
            This represents the text value associated with the result.
            If the text search was for a web search engine this would typically be the snippet describing the web page associated with the search result.
            </remarks>
        </member>
        <member name="T:Microsoft.SemanticKernel.Data.TextSearchResultLinkAttribute">
            <summary>
            Attribute to mark a property on a record class as the link to the source data.
            </summary>
            <remarks>
            The characteristics defined here will influence how the property is treated when converting a record to a <see cref="T:Microsoft.SemanticKernel.Data.TextSearchResult"/>.
            </remarks>
        </member>
        <member name="T:Microsoft.SemanticKernel.Data.TextSearchResultNameAttribute">
            <summary>
            Attribute to mark a property on a record class as the name of the source data.
            </summary>
            <remarks>
            The characteristics defined here will influence how the property is treated when converting a record to a <see cref="T:Microsoft.SemanticKernel.Data.TextSearchResult"/>.
            </remarks>
        </member>
        <member name="T:Microsoft.SemanticKernel.Data.TextSearchResultValueAttribute">
            <summary>
            Attribute to mark a property on a record class as the value of the source data.
            </summary>
            <remarks>
            The characteristics defined here will influence how the property is treated when converting a record to a <see cref="T:Microsoft.SemanticKernel.Data.TextSearchResult"/>.
            </remarks>
        </member>
        <member name="T:Microsoft.SemanticKernel.CancelKernelEventArgs">
            <summary>
            Provides an <see cref="T:System.EventArgs"/> for cancelable operations related
            to <see cref="T:Microsoft.SemanticKernel.Kernel"/>-based operations.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.CancelKernelEventArgs.#ctor(Microsoft.SemanticKernel.KernelFunction,Microsoft.SemanticKernel.KernelArguments,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.CancelKernelEventArgs"/> class.
            </summary>
            <param name="function">The <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> with which this event is associated.</param>
            <param name="arguments">The arguments associated with the operation.</param>
            <param name="metadata">A dictionary of metadata associated with the operation.</param>
        </member>
        <member name="P:Microsoft.SemanticKernel.CancelKernelEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the operation associated with
            the event should be canceled.
            </summary>
            <remarks>
            A cancelable event is raised by the system when it is about to perform an action
            that can be canceled, such as invoking a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>. The event
            handler may set <see cref="P:Microsoft.SemanticKernel.CancelKernelEventArgs.Cancel"/> to true to indicate that the operation should
            be canceled. If there are multiple event handlers registered, subsequent handlers
            may see and change a value set by a previous handler. The final result is what will
            be considered by the component raising the event.
            </remarks>
        </member>
        <member name="T:Microsoft.SemanticKernel.FunctionInvokedEventArgs">
            <summary>
            Provides a <see cref="T:Microsoft.SemanticKernel.CancelKernelEventArgs"/> used in events just after a function is invoked.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.FunctionInvokedEventArgs.#ctor(Microsoft.SemanticKernel.KernelFunction,Microsoft.SemanticKernel.KernelArguments,Microsoft.SemanticKernel.FunctionResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.FunctionInvokedEventArgs"/> class.
            </summary>
            <param name="function">The <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> with which this event is associated.</param>
            <param name="arguments">The arguments associated with the operation.</param>
            <param name="result">The result of the function's invocation.</param>
        </member>
        <member name="P:Microsoft.SemanticKernel.FunctionInvokedEventArgs.Result">
            <summary>Gets the result of the function's invocation.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.FunctionInvokedEventArgs.ResultValue">
            <summary>Gets the raw result of the function's invocation.</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.FunctionInvokedEventArgs.SetResultValue(System.Object)">
            <summary>Sets an object to use as the overridden new result for the function's invocation.</summary>
            <param name="value">The value to use as the new result of the function's invocation.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.FunctionInvokingEventArgs">
            <summary>
            Provides a <see cref="T:Microsoft.SemanticKernel.CancelKernelEventArgs"/> used in events just before a function is invoked.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.FunctionInvokingEventArgs.#ctor(Microsoft.SemanticKernel.KernelFunction,Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.FunctionInvokingEventArgs"/> class.
            </summary>
            <param name="function">The <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> with which this event is associated.</param>
            <param name="arguments">The arguments associated with the operation.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelEventArgs">
            <summary>Provides an <see cref="T:System.EventArgs"/> for operations related to <see cref="T:Microsoft.SemanticKernel.Kernel"/>-based operations.</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelEventArgs.#ctor(Microsoft.SemanticKernel.KernelFunction,Microsoft.SemanticKernel.KernelArguments,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.KernelEventArgs"/> class.
            </summary>
            <param name="function">The <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> with which this event is associated.</param>
            <param name="arguments">The arguments associated with the operation.</param>
            <param name="metadata">A dictionary of metadata associated with the operation.</param>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelEventArgs.Function">
            <summary>
            Gets the <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> with which this event is associated.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelEventArgs.Arguments">
            <summary>
            Gets the arguments associated with the operation.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelEventArgs.Metadata">
            <summary>
            Gets a dictionary of metadata related to the event.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.PromptRenderedEventArgs">
            <summary>
            Provides a <see cref="T:Microsoft.SemanticKernel.CancelKernelEventArgs"/> used in events raised just after a prompt has been rendered.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.PromptRenderedEventArgs.#ctor(Microsoft.SemanticKernel.KernelFunction,Microsoft.SemanticKernel.KernelArguments,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.PromptRenderedEventArgs"/> class.
            </summary>
            <param name="function">The <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> with which this event is associated.</param>
            <param name="arguments">The arguments associated with the operation.</param>
            <param name="renderedPrompt">The prompt that was rendered by the associated operation.</param>
        </member>
        <member name="P:Microsoft.SemanticKernel.PromptRenderedEventArgs.RenderedPrompt">
            <summary>Gets or sets the rendered prompt.</summary>
            <remarks>
            An event handler may view the rendered prompt and change it, if desired.
            If there are multiple event handlers registered, subsequent handlers may
            overwrite a value set by a previous handler. The final result is what will
            be the prompt used by the system.
            </remarks>
        </member>
        <member name="T:Microsoft.SemanticKernel.PromptRenderingEventArgs">
            <summary>
            Provides a <see cref="T:Microsoft.SemanticKernel.KernelEventArgs"/> used in events raised just before a prompt is rendered.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.PromptRenderingEventArgs.#ctor(Microsoft.SemanticKernel.KernelFunction,Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.PromptRenderingEventArgs"/> class.
            </summary>
            <param name="function">The <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> with which this event is associated.</param>
            <param name="arguments">The arguments associated with the operation.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.AutoFunctionInvocationContext">
            <summary>
            Class with data related to automatic function invocation.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.AutoFunctionInvocationContext.#ctor(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelFunction,Microsoft.SemanticKernel.FunctionResult,Microsoft.SemanticKernel.ChatCompletion.ChatHistory,Microsoft.SemanticKernel.ChatMessageContent)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.AutoFunctionInvocationContext"/> class.
            </summary>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="function">The <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> with which this filter is associated.</param>
            <param name="result">The result of the function's invocation.</param>
            <param name="chatHistory">The chat history associated with automatic function invocation.</param>
            <param name="chatMessageContent">The chat message content associated with automatic function invocation.</param>
        </member>
        <member name="P:Microsoft.SemanticKernel.AutoFunctionInvocationContext.CancellationToken">
            <summary>
            The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests.
            The default is <see cref="P:System.Threading.CancellationToken.None"/>.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.AutoFunctionInvocationContext.IsStreaming">
            <summary>
            Boolean flag which indicates whether a filter is invoked within streaming or non-streaming mode.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.AutoFunctionInvocationContext.Arguments">
            <summary>
            Gets the arguments associated with the operation.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.AutoFunctionInvocationContext.RequestSequenceIndex">
            <summary>
            Request sequence index of automatic function invocation process. Starts from 0.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.AutoFunctionInvocationContext.FunctionSequenceIndex">
            <summary>
            Function sequence index. Starts from 0.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.AutoFunctionInvocationContext.FunctionCount">
            <summary>
            Number of functions that will be invoked during auto function invocation request.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.AutoFunctionInvocationContext.ToolCallId">
            <summary>
            The ID of the tool call.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.AutoFunctionInvocationContext.ChatMessageContent">
            <summary>
            The chat message content associated with automatic function invocation.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.AutoFunctionInvocationContext.ExecutionSettings">
            <summary>
            The execution settings associated with the operation.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.AutoFunctionInvocationContext.ChatHistory">
            <summary>
            Gets the <see cref="T:Microsoft.SemanticKernel.ChatCompletion.ChatHistory"/> associated with automatic function invocation.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.AutoFunctionInvocationContext.Function">
            <summary>
            Gets the <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> with which this filter is associated.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.AutoFunctionInvocationContext.Kernel">
            <summary>
            Gets the <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.AutoFunctionInvocationContext.Result">
            <summary>
            Gets or sets the result of the function's invocation.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.AutoFunctionInvocationContext.Terminate">
             <summary>
             Gets or sets a value indicating whether the operation associated with the filter should be terminated.
            
             By default, this value is <see langword="false"/>, which means all functions will be invoked.
             If set to <see langword="true"/>, the behavior depends on how functions are invoked:
            
             - If functions are invoked sequentially (the default behavior), the remaining functions will not be invoked,
               and the last request to the LLM will not be performed.
            
             - If functions are invoked concurrently (controlled by the <see cref="P:Microsoft.SemanticKernel.FunctionChoiceBehaviorOptions.AllowConcurrentInvocation"/> option),
               other functions will still be invoked, and the last request to the LLM will not be performed.
            
             In both cases, the automatic function invocation process will be terminated, and the result of the last executed function will be returned to the caller.
             </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.IAutoFunctionInvocationFilter">
            <summary>
            Interface for filtering actions during automatic function invocation.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.IAutoFunctionInvocationFilter.OnAutoFunctionInvocationAsync(Microsoft.SemanticKernel.AutoFunctionInvocationContext,System.Func{Microsoft.SemanticKernel.AutoFunctionInvocationContext,System.Threading.Tasks.Task})">
            <summary>
            Method which is called asynchronously before automatic function invocation.
            </summary>
            <param name="context">Instance of <see cref="T:Microsoft.SemanticKernel.AutoFunctionInvocationContext"/> with automatic function invocation details.</param>
            <param name="next">Delegate to the next filter in pipeline or function invocation itself. If it's not invoked, next filter won't be invoked and function invocation will be skipped.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.FunctionInvocationContext">
            <summary>
            Class with data related to function invocation.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.FunctionInvocationContext.#ctor(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelFunction,Microsoft.SemanticKernel.KernelArguments,Microsoft.SemanticKernel.FunctionResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.FunctionInvocationContext"/> class.
            </summary>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="function">The <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> with which this filter is associated.</param>
            <param name="arguments">The arguments associated with the operation.</param>
            <param name="result">The result of the function's invocation.</param>
        </member>
        <member name="P:Microsoft.SemanticKernel.FunctionInvocationContext.CancellationToken">
            <summary>
            The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests.
            The default is <see cref="P:System.Threading.CancellationToken.None"/>.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.FunctionInvocationContext.IsStreaming">
            <summary>
            Boolean flag which indicates whether a filter is invoked within streaming or non-streaming mode.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.FunctionInvocationContext.Kernel">
            <summary>
            Gets the <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.FunctionInvocationContext.Function">
            <summary>
            Gets the <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> with which this filter is associated.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.FunctionInvocationContext.Arguments">
            <summary>
            Gets the arguments associated with the operation.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.FunctionInvocationContext.Result">
            <summary>
            Gets or sets the result of the function's invocation.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.IFunctionInvocationFilter">
            <summary>
            Interface for filtering actions during function invocation.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.IFunctionInvocationFilter.OnFunctionInvocationAsync(Microsoft.SemanticKernel.FunctionInvocationContext,System.Func{Microsoft.SemanticKernel.FunctionInvocationContext,System.Threading.Tasks.Task})">
            <summary>
            Method which is called asynchronously before function invocation.
            </summary>
            <param name="context">Instance of <see cref="T:Microsoft.SemanticKernel.FunctionInvocationContext"/> with function invocation details.</param>
            <param name="next">Delegate to the next filter in pipeline or function itself. If it's not invoked, next filter or function won't be invoked.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.IPromptRenderFilter">
            <summary>
            Interface for filtering actions during prompt rendering.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.IPromptRenderFilter.OnPromptRenderAsync(Microsoft.SemanticKernel.PromptRenderContext,System.Func{Microsoft.SemanticKernel.PromptRenderContext,System.Threading.Tasks.Task})">
            <summary>
            Method which is called asynchronously before prompt rendering.
            </summary>
            <param name="context">Instance of <see cref="T:Microsoft.SemanticKernel.PromptRenderContext"/> with prompt rendering details.</param>
            <param name="next">Delegate to the next filter in pipeline or prompt rendering operation itself. If it's not invoked, next filter or prompt rendering won't be invoked.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.PromptRenderContext">
            <summary>
            Class with data related to prompt rendering.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.PromptRenderContext.#ctor(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelFunction,Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.PromptRenderContext"/> class.
            </summary>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="function">The <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> with which this filter is associated.</param>
            <param name="arguments">The arguments associated with the operation.</param>
        </member>
        <member name="P:Microsoft.SemanticKernel.PromptRenderContext.CancellationToken">
            <summary>
            The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests.
            The default is <see cref="P:System.Threading.CancellationToken.None"/>.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.PromptRenderContext.IsStreaming">
            <summary>
            Boolean flag which indicates whether a filter is invoked within streaming or non-streaming mode.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.PromptRenderContext.Kernel">
            <summary>
            Gets the <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.PromptRenderContext.Function">
            <summary>
            Gets the <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> with which this filter is associated.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.PromptRenderContext.Arguments">
            <summary>
            Gets the arguments associated with the operation.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.PromptRenderContext.ExecutionSettings">
            <summary>
            The execution settings associated with the operation.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.PromptRenderContext.RenderedPrompt">
            <summary>
            Gets or sets the rendered prompt.
            </summary>
            <remarks>
            The filter may view the rendered prompt and change it, if desired.
            If there are multiple filters registered, subsequent filters may
            overwrite a value set by a previous filter. The final result is what will
            be the prompt used by the system.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.PromptRenderContext.Result">
            <summary>
            Gets or sets the result of the function's invocation.
            Setting <see cref="P:Microsoft.SemanticKernel.PromptRenderContext.Result"/> to a non-<c>null</c> value will skip function invocation and return the result.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.FromKernelServicesAttribute">
            <summary>
            Specifies that an argument to a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> should be supplied from the associated
            <see cref="T:Microsoft.SemanticKernel.Kernel"/>'s <see cref="P:Microsoft.SemanticKernel.Kernel.Services"/> rather than from <see cref="T:Microsoft.SemanticKernel.KernelArguments"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.FromKernelServicesAttribute.#ctor">
            <summary>Initializes the attribute.</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.FromKernelServicesAttribute.#ctor(System.Object)">
            <summary>Initializes the attribute with the specified service key.</summary>
            <param name="serviceKey">The optional service key to use when resolving a service.</param>
        </member>
        <member name="P:Microsoft.SemanticKernel.FromKernelServicesAttribute.ServiceKey">
            <summary>Gets the key to use when searching <see cref="P:Microsoft.SemanticKernel.Kernel.Services"/>.</summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.FunctionResult">
            <summary>
            Represents the result of a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> invocation.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.FunctionResult.#ctor(Microsoft.SemanticKernel.KernelFunction,System.Object,System.Globalization.CultureInfo,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.FunctionResult"/> class.
            </summary>
            <param name="function">The <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> whose result is represented by this instance.</param>
            <param name="value">The resulting object of the function's invocation.</param>
            <param name="culture">The culture configured on the <see cref="T:Microsoft.SemanticKernel.Kernel"/> that executed the function.</param>
            <param name="metadata">Metadata associated with the function's execution</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.FunctionResult.#ctor(Microsoft.SemanticKernel.FunctionResult,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.FunctionResult"/> class.
            </summary>
            <param name="result">Instance of <see cref="T:Microsoft.SemanticKernel.FunctionResult"/> with result data to copy.</param>
            <param name="value">The resulting object of the function's invocation.</param>
        </member>
        <member name="P:Microsoft.SemanticKernel.FunctionResult.Function">
            <summary>
            Gets the <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> whose result is represented by this instance.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.FunctionResult.Metadata">
            <summary>
            Gets any metadata associated with the function's execution.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.FunctionResult.Culture">
            <summary>
            The culture configured on the Kernel that executed the function.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.FunctionResult.ValueType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the function's result.
            </summary>
            <remarks>
            This or a base type is the type expected to be passed as the generic
            argument to <see cref="M:Microsoft.SemanticKernel.FunctionResult.GetValue``1"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.FunctionResult.RenderedPrompt">
            <summary>
            Gets the prompt used during function invocation if any was rendered.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.FunctionResult.GetValue``1">
            <summary>
            Returns function result value.
            </summary>
            <typeparam name="T">Target type for result value casting.</typeparam>
            <exception cref="T:System.InvalidCastException">Thrown when it's not possible to cast result value to <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.FunctionResult.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.SemanticKernel.FunctionResult.Value">
            <summary>
            Function result object.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.IReadOnlyKernelPluginCollection">
            <summary>Provides a read-only collection of <see cref="T:Microsoft.SemanticKernel.KernelPlugin"/>s.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.IReadOnlyKernelPluginCollection.Item(System.String)">
            <summary>Gets a plugin from the collection by name.</summary>
            <param name="name">The name of the plugin.</param>
            <returns>The plugin.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.IReadOnlyKernelPluginCollection.TryGetPlugin(System.String,Microsoft.SemanticKernel.KernelPlugin@)">
            <summary>Gets a plugin from the collection by name.</summary>
            <param name="name">The name of the plugin.</param>
            <param name="plugin">The plugin if found in the collection.</param>
            <returns>true if the collection contains the plugin; otherwise, false.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelArguments">
            <summary>
            Provides a collection of arguments for operations such as <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>'s InvokeAsync
            and <see cref="T:Microsoft.SemanticKernel.IPromptTemplate"/>'s RenderAsync.
            </summary>
            <remarks>
            A <see cref="T:Microsoft.SemanticKernel.KernelArguments"/> is a dictionary of argument names and values. It also carries a
            <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/>, accessible via the <see cref="P:Microsoft.SemanticKernel.KernelArguments.ExecutionSettings"/> property.
            </remarks>
        </member>
        <member name="F:Microsoft.SemanticKernel.KernelArguments._arguments">
            <summary>Dictionary of name/values for all the arguments in the instance.</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelArguments.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.KernelArguments"/> class with the specified AI execution settings.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelArguments.#ctor(Microsoft.SemanticKernel.PromptExecutionSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.KernelArguments"/> class with the specified AI execution settings.
            </summary>
            <param name="executionSettings">The prompt execution settings.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelArguments.#ctor(System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.PromptExecutionSettings})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.KernelArguments"/> class with the specified AI execution settings.
            </summary>
            <param name="executionSettings">The prompt execution settings.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelArguments.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,Microsoft.SemanticKernel.PromptExecutionSettings})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.KernelArguments"/> class that contains elements copied from the specified <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="source">The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements are copied the new <see cref="T:Microsoft.SemanticKernel.KernelArguments"/>.</param>
            <param name="executionSettings">The prompt execution settings.</param>
            <remarks>
            If <paramref name="executionSettings"/> is non-null, it is used as the <see cref="P:Microsoft.SemanticKernel.KernelArguments.ExecutionSettings"/> for this new instance.
            Otherwise, if the source is a <see cref="T:Microsoft.SemanticKernel.KernelArguments"/>, its <see cref="P:Microsoft.SemanticKernel.KernelArguments.ExecutionSettings"/> are used.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelArguments.ExecutionSettings">
            <summary>
            Gets or sets the prompt execution settings.
            </summary>
            <remarks>
            The settings dictionary is keyed by the service ID, or <see cref="P:Microsoft.SemanticKernel.PromptExecutionSettings.DefaultServiceId"/> for the default execution settings.
            When setting, the service id of each <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/> must match the key in the dictionary.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelArguments.Count">
            <summary>
            Gets the number of arguments contained in the <see cref="T:Microsoft.SemanticKernel.KernelArguments"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelArguments.Add(System.String,System.Object)">
            <summary>Adds the specified argument name and value to the <see cref="T:Microsoft.SemanticKernel.KernelArguments"/>.</summary>
            <param name="name">The name of the argument to add.</param>
            <param name="value">The value of the argument to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null.</exception>
            <exception cref="T:System.ArgumentException">An argument with the same name already exists in the <see cref="T:Microsoft.SemanticKernel.KernelArguments"/>.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelArguments.Remove(System.String)">
            <summary>Removes the argument value with the specified name from the <see cref="T:Microsoft.SemanticKernel.KernelArguments"/>.</summary>
            <param name="name">The name of the argument value to remove.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelArguments.Clear">
            <summary>Removes all arguments names and values from the <see cref="T:Microsoft.SemanticKernel.KernelArguments"/>.</summary>
            <remarks>
            This does not affect the <see cref="P:Microsoft.SemanticKernel.KernelArguments.ExecutionSettings"/> property. To clear it as well, set it to null.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelArguments.ContainsName(System.String)">
            <summary>Determines whether the <see cref="T:Microsoft.SemanticKernel.KernelArguments"/> contains an argument with the specified name.</summary>
            <param name="name">The name of the argument to locate.</param>
            <returns>true if the arguments contains an argument with the specified named; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelArguments.TryGetValue(System.String,System.Object@)">
            <summary>Gets the value associated with the specified argument name.</summary>
            <param name="name">The name of the argument value to get.</param>
            <param name="value">
            When this method returns, contains the value associated with the specified name,
            if the name is found; otherwise, null.
            </param>
            <returns>true if the arguments contains an argument with the specified name; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null.</exception>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelArguments.Item(System.String)">
            <summary>Gets or sets the value associated with the specified argument name.</summary>
            <param name="name">The name of the argument value to get or set.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null.</exception>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelArguments.Names">
            <summary>Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> of all of the arguments' names.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelArguments.Values">
            <summary>Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> of all of the arguments' values.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelArguments.System#Collections#Generic#IDictionary{System#String,System#Object}#Keys">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelArguments.System#Collections#Generic#IReadOnlyDictionary{System#String,System#Object}#Keys">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelArguments.System#Collections#Generic#IReadOnlyDictionary{System#String,System#Object}#Values">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelArguments.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelArguments.System#Collections#Generic#IReadOnlyDictionary{System#String,System#Object}#Item(System.String)">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelArguments.System#Collections#Generic#IDictionary{System#String,System#Object}#Item(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelArguments.System#Collections#Generic#IDictionary{System#String,System#Object}#Add(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelArguments.System#Collections#Generic#IDictionary{System#String,System#Object}#ContainsKey(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelArguments.System#Collections#Generic#IDictionary{System#String,System#Object}#Remove(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelArguments.System#Collections#Generic#IDictionary{System#String,System#Object}#TryGetValue(System.String,System.Object@)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelArguments.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelArguments.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelArguments.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelArguments.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelArguments.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelArguments.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelArguments.System#Collections#Generic#IReadOnlyDictionary{System#String,System#Object}#ContainsKey(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelArguments.System#Collections#Generic#IReadOnlyDictionary{System#String,System#Object}#TryGetValue(System.String,System.Object@)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelFunction">
            <summary>
            Represents a function that can be invoked as part of a Semantic Kernel workload.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.KernelFunction.MeasurementFunctionTagName">
            <summary>The measurement tag name for the function name.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.KernelFunction.MeasurementErrorTagName">
            <summary>The measurement tag name for the function error type.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.KernelFunction.s_activitySource">
            <summary><see cref="T:System.Diagnostics.ActivitySource"/> for function-related activities.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.KernelFunction.s_meter">
            <summary><see cref="T:System.Diagnostics.Metrics.Meter"/> for function-related metrics.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.KernelFunction.s_invocationDuration">
            <summary><see cref="T:System.Diagnostics.Metrics.Histogram`1"/> to record function invocation duration.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.KernelFunction.s_streamingDuration">
            <summary><see cref="T:System.Diagnostics.Metrics.Histogram`1"/> to record function streaming duration.</summary>
            <remarks>
            As this metric spans the full async iterator's lifecycle, it is inclusive of any time
            spent in the consuming code between MoveNextAsync calls on the enumerator.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelFunction.JsonSerializerOptions">
            <summary>The <see cref="P:Microsoft.SemanticKernel.KernelFunction.JsonSerializerOptions"/> to use for serialization and deserialization of various aspects of the function.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelFunction.Name">
            <summary>
            Gets the name of the function.
            </summary>
            <remarks>
            The name is used anywhere the function needs to be identified, such as in plans describing what functions
            should be invoked when, or as part of lookups in a plugin's function collection. Function names are generally
            handled in an ordinal case-insensitive manner.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelFunction.PluginName">
            <summary>
            Gets the name of the plugin this function was added to.
            </summary>
            <remarks>
            The plugin name will be null if the function has not been added to a plugin.
            When a function is added to a plugin it will be cloned and the plugin name will be set.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelFunction.Description">
            <summary>
            Gets a description of the function.
            </summary>
            <remarks>
            The description may be supplied to a model in order to elaborate on the function's purpose,
            in case it may be beneficial for the model to recommend invoking the function.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelFunction.Metadata">
            <summary>
            Gets the metadata describing the function.
            </summary>
            <returns>An instance of <see cref="T:Microsoft.SemanticKernel.KernelFunctionMetadata"/> describing the function</returns>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelFunction.ExecutionSettings">
            <summary>
            Gets the prompt execution settings.
            </summary>
            <remarks>
            The instances of <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/> are frozen and cannot be modified.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunction.#ctor(System.String,System.String,System.Collections.Generic.IReadOnlyList{Microsoft.SemanticKernel.KernelParameterMetadata},Microsoft.SemanticKernel.KernelReturnParameterMetadata,System.Collections.Generic.Dictionary{System.String,Microsoft.SemanticKernel.PromptExecutionSettings})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> class.
            </summary>
            <param name="name">A name of the function to use as its <see cref="P:Microsoft.SemanticKernel.KernelFunction.Name"/>.</param>
            <param name="description">The description of the function to use as its <see cref="P:Microsoft.SemanticKernel.KernelFunction.Description"/>.</param>
            <param name="parameters">The metadata describing the parameters to the function.</param>
            <param name="returnParameter">The metadata describing the return parameter of the function.</param>
            <param name="executionSettings">
            The <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/> to use with the function. These will apply unless they've been
            overridden by settings passed into the invocation of the function.
            </param>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunction.#ctor(System.String,System.String,System.Collections.Generic.IReadOnlyList{Microsoft.SemanticKernel.KernelParameterMetadata},System.Text.Json.JsonSerializerOptions,Microsoft.SemanticKernel.KernelReturnParameterMetadata,System.Collections.Generic.Dictionary{System.String,Microsoft.SemanticKernel.PromptExecutionSettings})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> class.
            </summary>
            <param name="name">A name of the function to use as its <see cref="P:Microsoft.SemanticKernel.KernelFunction.Name"/>.</param>
            <param name="description">The description of the function to use as its <see cref="P:Microsoft.SemanticKernel.KernelFunction.Description"/>.</param>
            <param name="parameters">The metadata describing the parameters to the function.</param>
            <param name="jsonSerializerOptions">The <see cref="P:Microsoft.SemanticKernel.KernelFunction.JsonSerializerOptions"/> to use for serialization and deserialization of various aspects of the function.</param>
            <param name="returnParameter">The metadata describing the return parameter of the function.</param>
            <param name="executionSettings">
            The <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/> to use with the function. These will apply unless they've been
            overridden by settings passed into the invocation of the function.
            </param>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunction.#ctor(System.String,System.String,System.String,System.Collections.Generic.IReadOnlyList{Microsoft.SemanticKernel.KernelParameterMetadata},Microsoft.SemanticKernel.KernelReturnParameterMetadata,System.Collections.Generic.Dictionary{System.String,Microsoft.SemanticKernel.PromptExecutionSettings},System.Collections.ObjectModel.ReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> class.
            </summary>
            <param name="name">A name of the function to use as its <see cref="P:Microsoft.SemanticKernel.KernelFunction.Name"/>.</param>
            <param name="pluginName">The name of the plugin this function instance has been added to.</param>
            <param name="description">The description of the function to use as its <see cref="P:Microsoft.SemanticKernel.KernelFunction.Description"/>.</param>
            <param name="parameters">The metadata describing the parameters to the function.</param>
            <param name="returnParameter">The metadata describing the return parameter of the function.</param>
            <param name="executionSettings">
            The <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/> to use with the function. These will apply unless they've been
            overridden by settings passed into the invocation of the function.
            </param>
            <param name="additionalMetadata">Properties/metadata associated with the function itself rather than its parameters and return type.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunction.#ctor(System.String,System.String,System.String,System.Collections.Generic.IReadOnlyList{Microsoft.SemanticKernel.KernelParameterMetadata},System.Text.Json.JsonSerializerOptions,Microsoft.SemanticKernel.KernelReturnParameterMetadata,System.Collections.Generic.Dictionary{System.String,Microsoft.SemanticKernel.PromptExecutionSettings},System.Collections.ObjectModel.ReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> class.
            </summary>
            <param name="name">A name of the function to use as its <see cref="P:Microsoft.SemanticKernel.KernelFunction.Name"/>.</param>
            <param name="pluginName">The name of the plugin this function instance has been added to.</param>
            <param name="description">The description of the function to use as its <see cref="P:Microsoft.SemanticKernel.KernelFunction.Description"/>.</param>
            <param name="parameters">The metadata describing the parameters to the function.</param>
            <param name="jsonSerializerOptions">The <see cref="P:Microsoft.SemanticKernel.KernelFunction.JsonSerializerOptions"/> to use for serialization and deserialization of various aspects of the function.</param>
            <param name="returnParameter">The metadata describing the return parameter of the function.</param>
            <param name="executionSettings">
            The <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/> to use with the function. These will apply unless they've been
            overridden by settings passed into the invocation of the function.
            </param>
            <param name="additionalMetadata">Properties/metadata associated with the function itself rather than its parameters and return type.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunction.InvokeAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Invokes the <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>.
            </summary>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="arguments">The arguments to pass to the function's invocation, including any <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/>.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>The result of the function's execution.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="kernel"/> is null.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunction.InvokeAsync``1(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Invokes the <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>.
            </summary>
            <typeparam name="TResult">Specifies the type of the result value of the function.</typeparam>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="arguments">The arguments to pass to the function's invocation, including any <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/>.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>The result of the function's execution, cast to <typeparamref name="TResult"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="kernel"/> is null.</exception>
            <exception cref="T:System.InvalidCastException">The function's result could not be cast to <typeparamref name="TResult"/>.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunction.InvokeStreamingAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Invokes the <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> and streams its results.
            </summary>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="arguments">The arguments to pass to the function's invocation, including any <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/>.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> for streaming the results of the function's invocation.</returns>
            <remarks>
            The function will not be invoked until an enumerator is retrieved from the returned <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>
            and its iteration initiated via an initial call to <see cref="M:System.Collections.Generic.IAsyncEnumerator`1.MoveNextAsync"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunction.InvokeStreamingAsync``1(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Invokes the <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> and streams its results.
            </summary>
            <typeparam name="TResult">Specifies the type of the result values of the function.</typeparam>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="arguments">The arguments to pass to the function's invocation, including any <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/>.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> for streaming the results of the function's invocation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="kernel"/> is null.</exception>
            <remarks>
            The function will not be invoked until an enumerator is retrieved from the returned <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>
            and its iteration initiated via an initial call to <see cref="M:System.Collections.Generic.IAsyncEnumerator`1.MoveNextAsync"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunction.Clone(System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> object that is a copy of the current instance
            but the <see cref="T:Microsoft.SemanticKernel.KernelFunctionMetadata"/> has the plugin name set.
            </summary>
            <param name="pluginName">The name of the plugin this function instance will be added to.</param>
            <remarks>
            This method should only be used to create a new instance of a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> when adding
            a function to a <see cref="T:Microsoft.SemanticKernel.KernelPlugin"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunction.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunction.InvokeCoreAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Invokes the <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>.
            </summary>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="arguments">The arguments to pass to the function's invocation, including any <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/>.</param>
            <returns>The updated context, potentially a new one if context switching is implemented.</returns>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunction.InvokeStreamingCoreAsync``1(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Invokes the <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> and streams its results.
            </summary>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="arguments">The arguments to pass to the function's invocation, including any <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/>.</param>
            <returns>The updated context, potentially a new one if context switching is implemented.</returns>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunction.HandleException(System.Exception,Microsoft.Extensions.Logging.ILogger,System.Diagnostics.Activity,Microsoft.SemanticKernel.KernelFunction,Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,Microsoft.SemanticKernel.FunctionResult,System.Diagnostics.TagList@)">
            <summary>Handles special-cases for exception handling when invoking a function.</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunction.AsAIFunction(Microsoft.SemanticKernel.Kernel)">
            <summary>Creates an <see cref="T:Microsoft.Extensions.AI.AIFunction"/> for this <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>.</summary>
            <param name="kernel">
            The <see cref="T:Microsoft.SemanticKernel.Kernel"/> instance to pass to the <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> when it's invoked as part of the <see cref="T:Microsoft.Extensions.AI.AIFunction"/>'s invocation.
            </param>
            <returns>An instance of <see cref="T:Microsoft.Extensions.AI.AIFunction"/> that, when invoked, will in turn invoke the current <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelFunction.KernelAIFunction">
            <summary>An <see cref="T:Microsoft.Extensions.AI.AIFunction"/> wrapper around a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>.</summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelFunctionAttribute">
            <summary>
            Specifies that a method on a class imported as a plugin should be included as a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> in the resulting <see cref="T:Microsoft.SemanticKernel.KernelPlugin"/>.
            </summary>
            <remarks>
            <para>
            When the system imports functions from an object, it searches for all methods tagged with this attribute.
            If a method is not tagged with this attribute, it may still be imported directly via a <see cref="T:System.Delegate"/>
            or <see cref="T:System.Reflection.MethodInfo"/> referencing the method directly.
            </para>
            <para>
            Method visibility does not impact whether a method may be imported. Any method tagged with this attribute, regardless
            of whether it's public or not, will be imported.
            </para>
            <para>
            A description of the method should be supplied using the <see cref="T:System.ComponentModel.DescriptionAttribute"/>.
            That description will be used both with LLM prompts and embedding comparisons; the quality of
            the description affects the planner's ability to reason about complex tasks. A <see cref="T:System.ComponentModel.DescriptionAttribute"/>
            should also be provided on each parameter to provide a description of the parameter suitable for consumption
            by an LLM or embedding.
            </para>
            <para>
            Functions may have any number of parameters. In general, arguments to parameters are supplied via the <see cref="T:Microsoft.SemanticKernel.KernelArguments"/>
            used to invoke the function, with the arguments matched by name to the parameters of the method. If no argument of the given name
            is present, but a default value was specified in the method's definition, that default value will be used. If the argument value in
            <see cref="T:Microsoft.SemanticKernel.KernelArguments"/> is not of the same type as the parameter, the system will attempt to convert the value to the parameter's
            type using a <see cref="T:System.ComponentModel.TypeConverter"/>.
            </para>
            <para>
            However, parameters of the following types are treated specially and are supplied from a source other than from the arguments dictionary:
            <list type="table">
            <item>
            <term><see cref="T:Microsoft.SemanticKernel.Kernel"/></term>
            <description>The <see cref="T:Microsoft.SemanticKernel.Kernel"/> supplied when invoking the function.</description>
            </item>
            <item>
            <term><see cref="T:Microsoft.SemanticKernel.KernelArguments"/></term>
            <description>The <see cref="T:Microsoft.SemanticKernel.KernelArguments"/> supplied when invoking the function.</description>
            </item>
            <item>
            <term><see cref="T:Microsoft.SemanticKernel.KernelFunction"/></term>
            <description>The <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> that represents this function being invoked.</description>
            </item>
            <item>
            <term><see cref="T:System.Threading.CancellationToken"/></term>
            <description>The <see cref="T:System.Threading.CancellationToken"/> supplied when invoking the function.</description>
            </item>
            <item>
            <term><see cref="T:System.Globalization.CultureInfo"/> or <see cref="T:System.IFormatProvider"/></term>
            <description>The result of <see cref="P:Microsoft.SemanticKernel.Kernel.Culture"/> from the <see cref="T:Microsoft.SemanticKernel.Kernel"/> used when invoking the function.</description>
            </item>
            <item>
            <term><see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> or <see cref="T:Microsoft.Extensions.Logging.ILogger"/></term>
            <description>The result of <see cref="P:Microsoft.SemanticKernel.Kernel.LoggerFactory"/> from the <see cref="T:Microsoft.SemanticKernel.Kernel"/> (or an <see cref="T:Microsoft.Extensions.Logging.ILogger"/> created from it) used when invoking the function.</description>
            </item>
            <item>
            <term><see cref="T:Microsoft.SemanticKernel.IAIServiceSelector"/></term>
            <description>The result of <see cref="P:Microsoft.SemanticKernel.Kernel.ServiceSelector"/> from the <see cref="T:Microsoft.SemanticKernel.Kernel"/> used when invoking the function.</description>
            </item>
            </list>
            </para>
            <para>
            Arguments may also be fulfilled from the associated <see cref="T:Microsoft.SemanticKernel.Kernel"/>'s <see cref="P:Microsoft.SemanticKernel.Kernel.Services"/> service provider. If a parameter is attributed
            with <see cref="T:Microsoft.SemanticKernel.FromKernelServicesAttribute"/>, the system will attempt to resolve the parameter by querying the service provider for a service of the
            parameter's type. If the service provider does not contain a service of the parameter's type and the parameter is not optional, the invocation will fail.
            </para>
            <para>
            If no value can be derived from any of these means for all parameters, the invocation will fail.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionAttribute.#ctor">
            <summary>Initializes the attribute.</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionAttribute.#ctor(System.String)">
            <summary>Initializes the attribute.</summary>
            <param name="name">The name to use for the function.</param>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelFunctionAttribute.Name">
            <summary>Gets the function's name.</summary>
            <remarks>If null, a name will based on the name of the attributed method will be used.</remarks>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelFunctionCanceledException">
            <summary>
            Provides an <see cref="T:System.OperationCanceledException"/>-derived exception type
            that's thrown from a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> invocation when a <see cref="P:Microsoft.SemanticKernel.KernelFunctionCanceledException.Kernel"/>
            function filter (e.g. <see cref="P:Microsoft.SemanticKernel.Kernel.FunctionInvocationFilters"/>) requests cancellation.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionCanceledException.#ctor(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelFunction,Microsoft.SemanticKernel.KernelArguments,Microsoft.SemanticKernel.FunctionResult,System.Exception)">
            <summary>Initializes the exception instance.</summary>
            <param name="kernel">The <see cref="P:Microsoft.SemanticKernel.KernelFunctionCanceledException.Kernel"/> passed to the invocation of <paramref name="function"/>.</param>
            <param name="function">The <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> whose invocation was canceled.</param>
            <param name="arguments">The arguments collection supplied to the invocation of <paramref name="function"/>.</param>
            <param name="functionResult">
            The result of the <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> invocation, potentially modified by the event handler,
            if cancellation was requested after the function's successful completion.
            </param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelFunctionCanceledException.Kernel">
            <summary>Gets the <see cref="P:Microsoft.SemanticKernel.KernelFunctionCanceledException.Kernel"/> that was passed to the invocation of <see cref="P:Microsoft.SemanticKernel.KernelFunctionCanceledException.Function"/>.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelFunctionCanceledException.Function">
            <summary>Gets the <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> whose invocation was canceled.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelFunctionCanceledException.Arguments">
            <summary>Gets the arguments collection that was supplied to the invocation of <see cref="P:Microsoft.SemanticKernel.KernelFunctionCanceledException.Function"/>.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelFunctionCanceledException.FunctionResult">
            <summary>Gets the result of the <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> if it had completed execution before cancellation was requested.</summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelFunctionLogMessages">
            <summary>
            Extensions for logging <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> invocations.
            This extension uses the <see cref="T:Microsoft.Extensions.Logging.LoggerMessageAttribute"/> to
            generate logging code at compile time to achieve optimized code.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionLogMessages.LogFunctionInvoking(Microsoft.Extensions.Logging.ILogger,System.String,System.String)">
            <summary>
            Logs invocation of a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.KernelFunctionLogMessages.s_logFunctionArguments">
            <summary>
            Logs arguments of a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>.
            The action provides the benefit of caching the template parsing result for better performance.
            And the public method is a helper to serialize the arguments.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionLogMessages.LogFunctionArguments(Microsoft.Extensions.Logging.ILogger,System.String,System.String,Microsoft.SemanticKernel.KernelArguments,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Logs arguments of a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionLogMessages.LogFunctionArgumentsInternal(Microsoft.Extensions.Logging.ILogger,System.String,System.String,Microsoft.SemanticKernel.KernelArguments,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Logs arguments of a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionLogMessages.LogFunctionInvokedSuccess(Microsoft.Extensions.Logging.ILogger,System.String,System.String)">
            <summary>
            Logs successful invocation of a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.KernelFunctionLogMessages.s_logFunctionResultValue">
            <summary>
            Logs result of a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>.
            The action provides the benefit of caching the template parsing result for better performance.
            And the public method is a helper to serialize the result.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionLogMessages.LogFunctionResultValue(Microsoft.Extensions.Logging.ILogger,System.String,System.String,Microsoft.SemanticKernel.FunctionResult,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Logs result of a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>.
            The action provides the benefit of caching the template parsing result for better performance.
            And the public method is a helper to serialize the result.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionLogMessages.LogFunctionError(Microsoft.Extensions.Logging.ILogger,System.String,System.String,System.Exception,System.String)">
            <summary>
            Logs <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> error.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionLogMessages.LogFunctionComplete(Microsoft.Extensions.Logging.ILogger,System.String,System.String,System.Double)">
            <summary>
            Logs <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> complete.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionLogMessages.LogFunctionStreamingInvoking(Microsoft.Extensions.Logging.ILogger,System.String,System.String)">
            <summary>
            Logs streaming invocation of a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionLogMessages.LogFunctionStreamingComplete(Microsoft.Extensions.Logging.ILogger,System.String,System.String,System.Double)">
            <summary>
            Logs <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> streaming complete.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelFunctionMetadata">
            <summary>
            Provides read-only metadata for a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.KernelFunctionMetadata._name">
            <summary>The name of the function.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.KernelFunctionMetadata._description">
            <summary>The description of the function.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.KernelFunctionMetadata._parameters">
            <summary>The function's parameters.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.KernelFunctionMetadata._returnParameter">
            <summary>The function's return parameter.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.KernelFunctionMetadata._additionalProperties">
            <summary>Optional metadata in addition to the named properties already available on this class.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.KernelFunctionMetadata.s_emptyDictionary">
            <summary>A static empty dictionary to default to when none is provided.</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionMetadata.#ctor(System.String)">
            <summary>Initializes the <see cref="T:Microsoft.SemanticKernel.KernelFunctionMetadata"/> for a function with the specified name.</summary>
            <param name="name">The name of the function.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="name"/> was null.</exception>
            <exception cref="T:System.ArgumentException">An invalid name was supplied.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionMetadata.#ctor(Microsoft.SemanticKernel.KernelFunctionMetadata)">
            <summary>Initializes a <see cref="T:Microsoft.SemanticKernel.KernelFunctionMetadata"/> as a copy of another <see cref="T:Microsoft.SemanticKernel.KernelFunctionMetadata"/>.</summary>
            <exception cref="T:System.ArgumentNullException">The <paramref name="metadata"/> was null.</exception>
            <remarks>
            This creates a shallow clone of <paramref name="metadata"/>. The new instance's <see cref="P:Microsoft.SemanticKernel.KernelFunctionMetadata.Parameters"/> and
            <see cref="P:Microsoft.SemanticKernel.KernelFunctionMetadata.ReturnParameter"/> properties will return the same objects as in the original instance.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelFunctionMetadata.Name">
            <summary>Gets the name of the function.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelFunctionMetadata.PluginName">
            <summary>Gets the name of the plugin containing the function.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelFunctionMetadata.Description">
            <summary>Gets a description of the function, suitable for use in describing the purpose to a model.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelFunctionMetadata.Parameters">
            <summary>Gets the metadata for the parameters to the function.</summary>
            <remarks>If the function has no parameters, the returned list will be empty.</remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelFunctionMetadata.ReturnParameter">
            <summary>Gets parameter metadata for the return parameter.</summary>
            <remarks>If the function has no return parameter, the returned value will be a default instance of a <see cref="T:Microsoft.SemanticKernel.KernelReturnParameterMetadata"/>.</remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelFunctionMetadata.AdditionalProperties">
            <summary>Gets optional metadata in addition to the named properties already available on this class.</summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelFunctionNoop">
            <summary>
            Represents a kernel function that performs no operation.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionNoop.#ctor(System.Collections.Generic.IReadOnlyDictionary{System.String,Microsoft.SemanticKernel.PromptExecutionSettings})">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.SemanticKernel.KernelFunctionNoop"/> class.
            </summary>
            <param name="executionSettings">Option: Prompt execution settings.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionNoop.Clone(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionNoop.InvokeCoreAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionNoop.InvokeStreamingCoreAsync``1(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelJsonSchema">
            <summary>Represents JSON Schema for describing types used in <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>s.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.KernelJsonSchema._schemaAsString">
            <summary>The schema stored as a string.</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelJsonSchema.ParseOrNull(System.String)">
            <summary>Parses a JSON Schema for a parameter type.</summary>
            <param name="jsonSchema">The JSON Schema as a string.</param>
            <returns>A parsed <see cref="T:Microsoft.SemanticKernel.KernelJsonSchema"/>, or null if <paramref name="jsonSchema"/> is null or empty.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelJsonSchema.Parse(System.String)">
            <summary>Parses a JSON Schema for a parameter type.</summary>
            <param name="jsonSchema">The JSON Schema as a string.</param>
            <returns>A parsed <see cref="T:Microsoft.SemanticKernel.KernelJsonSchema"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="jsonSchema"/> is null.</exception>
            <exception cref="T:System.Text.Json.JsonException">The JSON is invalid.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelJsonSchema.Parse(System.ReadOnlySpan{System.Char})">
            <summary>Parses a JSON Schema for a parameter type.</summary>
            <param name="jsonSchema">The JSON Schema as a sequence of UTF16 chars.</param>
            <returns>A parsed <see cref="T:Microsoft.SemanticKernel.KernelJsonSchema"/>.</returns>
            <exception cref="T:System.Text.Json.JsonException">The JSON is invalid.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelJsonSchema.Parse(System.ReadOnlySpan{System.Byte})">
            <summary>Parses a JSON Schema for a parameter type.</summary>
            <param name="utf8JsonSchema">The JSON Schema as a sequence of UTF8 bytes.</param>
            <returns>A parsed <see cref="T:Microsoft.SemanticKernel.KernelJsonSchema"/>.</returns>
            <exception cref="T:System.Text.Json.JsonException">The JSON is invalid.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelJsonSchema.#ctor(System.Text.Json.JsonElement)">
            <summary>Initializes a new instance from the specified <see cref="T:System.Text.Json.JsonElement"/>.</summary>
            <param name="jsonSchema">The schema to be stored.</param>
            <remarks>
            The <paramref name="jsonSchema"/> is not validated, which is why this constructor is internal.
            All callers must ensure JSON Schema validity.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelJsonSchema.RootElement">
            <summary>Gets a <see cref="T:System.Text.Json.JsonElement"/> representing the root element of the schema.</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelJsonSchema.ToString">
            <summary>Gets the JSON Schema as a string.</summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelJsonSchema.JsonConverter">
            <summary>Converter for reading/writing the schema.</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelJsonSchema.JsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelJsonSchema.JsonConverter.Write(System.Text.Json.Utf8JsonWriter,Microsoft.SemanticKernel.KernelJsonSchema,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelParameterMetadata">
            <summary>
            Provides read-only metadata for a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> parameter.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.KernelParameterMetadata._name">
            <summary>The name of the parameter.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.KernelParameterMetadata._description">
            <summary>The description of the parameter.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.KernelParameterMetadata._defaultValue">
            <summary>The default value of the parameter.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.KernelParameterMetadata._parameterType">
            <summary>The .NET type of the parameter.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.KernelParameterMetadata._schema">
            <summary>The schema of the parameter, potentially lazily-initialized.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.KernelParameterMetadata._jsonSerializerOptions">
            <summary>The serializer options to generate JSON schema.</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelParameterMetadata.#ctor(System.String)">
            <summary>Initializes the <see cref="T:Microsoft.SemanticKernel.KernelParameterMetadata"/> for a parameter with the specified name.</summary>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="name"/> was null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="name"/> was empty or composed entirely of whitespace.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelParameterMetadata.#ctor(System.String,System.Text.Json.JsonSerializerOptions)">
            <summary>Initializes the <see cref="T:Microsoft.SemanticKernel.KernelParameterMetadata"/> for a parameter with the specified name.</summary>
            <param name="name">The name of the parameter.</param>
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to generate JSON schema.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="name"/> was null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="name"/> was empty or composed entirely of whitespace.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelParameterMetadata.#ctor(Microsoft.SemanticKernel.KernelParameterMetadata)">
            <summary>Initializes a <see cref="T:Microsoft.SemanticKernel.KernelParameterMetadata"/> as a copy of another <see cref="T:Microsoft.SemanticKernel.KernelParameterMetadata"/>.</summary>
            <exception cref="T:System.ArgumentNullException">The <paramref name="metadata"/> was null.</exception>
            <remarks>This creates a shallow clone of <paramref name="metadata"/>.</remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelParameterMetadata.#ctor(Microsoft.SemanticKernel.KernelParameterMetadata,System.Text.Json.JsonSerializerOptions)">
            <summary>Initializes a <see cref="T:Microsoft.SemanticKernel.KernelParameterMetadata"/> as a copy of another <see cref="T:Microsoft.SemanticKernel.KernelParameterMetadata"/>.</summary>
            <exception cref="T:System.ArgumentNullException">The <paramref name="metadata"/> was null.</exception>
            <param name="metadata">The metadata to copy.</param>
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to generate JSON schema.</param>
            <remarks>This creates a shallow clone of <paramref name="metadata"/>.</remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelParameterMetadata.Name">
            <summary>Gets the name of the function.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelParameterMetadata.Description">
            <summary>Gets a description of the function, suitable for use in describing the purpose to a model.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelParameterMetadata.DefaultValue">
            <summary>Gets the default value of the parameter.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelParameterMetadata.IsRequired">
            <summary>Gets whether the parameter is required.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelParameterMetadata.ParameterType">
            <summary>Gets the .NET type of the parameter.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelParameterMetadata.Schema">
            <summary>Gets a JSON Schema describing the parameter's type.</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelParameterMetadata.InferSchema(System.Type,System.Object,System.String,System.Text.Json.JsonSerializerOptions)">
            <summary>Infers a JSON schema from a <see cref="T:System.Type"/> and description.</summary>
            <param name="parameterType">The parameter type. If null, no schema can be inferred.</param>
            <param name="defaultValue">The parameter's default value, if any.</param>
            <param name="description">The parameter description. If null, it won't be included in the schema.</param>
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to generate JSON schema.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelParameterMetadata.InitializedSchema">
            <summary>A wrapper for a <see cref="T:Microsoft.SemanticKernel.KernelJsonSchema"/> and whether it was inferred or set explicitly by the user.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelParameterMetadata.InitializedSchema.Inferred">
            <summary>true if the <see cref="P:Microsoft.SemanticKernel.KernelParameterMetadata.InitializedSchema.Schema"/> was inferred; false if it was set explicitly by the user.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelParameterMetadata.InitializedSchema.Schema">
            <summary>The schema, if one exists.</summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelPlugin">
            <summary>Represents a plugin that may be registered with a <see cref="T:Microsoft.SemanticKernel.Kernel"/>.</summary>
            <remarks>
            A plugin is a named read-only collection of functions. There is a many-to-many relationship between
            plugins and functions: a plugin may contain any number of functions, and a function may
            exist in any number of plugins.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelPlugin.#ctor(System.String,System.String)">
            <summary>Initializes the new plugin from the provided name, description, and function collection.</summary>
            <param name="name">The name for the plugin.</param>
            <param name="description">A description of the plugin.</param>
            <exception cref="T:System.ArgumentException"><paramref name="name"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="name"/> is an invalid plugin name.</exception>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelPlugin.Name">
            <summary>Gets the name of the plugin.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelPlugin.Description">
            <summary>Gets a description of the plugin.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelPlugin.Item(System.String)">
            <summary>Gets the function in the plugin with the specified name.</summary>
            <param name="functionName">The name of the function.</param>
            <returns>The function.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The plugin does not contain a function with the specified name.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelPlugin.Contains(System.String)">
            <summary>Gets whether the plugin contains a function with the specified name.</summary>
            <param name="functionName">The name of the function.</param>
            <returns>true if the plugin contains the specified function; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelPlugin.Contains(Microsoft.SemanticKernel.KernelFunction)">
            <summary>Gets whether the plugin contains a function.</summary>
            <param name="function">The function.</param>
            <returns>true if the plugin contains the specified function; otherwise, false.</returns>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelPlugin.FunctionCount">
            <summary>Gets the number of functions in this plugin.</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelPlugin.TryGetFunction(System.String,Microsoft.SemanticKernel.KernelFunction@)">
            <summary>Finds a function in the plugin by name.</summary>
            <param name="name">The name of the function to find.</param>
            <param name="function">If the plugin contains the requested function, the found function instance; otherwise, null.</param>
            <returns>true if the function was found in the plugin; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelPlugin.GetFunctionsMetadata">
            <summary>Gets a collection of <see cref="T:Microsoft.SemanticKernel.KernelFunctionMetadata"/> instances, one for every function in this plugin.</summary>
            <returns>A list of metadata over every function in this plugin.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelPlugin.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelPlugin.AsAIFunctions(Microsoft.SemanticKernel.Kernel)">
            <summary>Produces an <see cref="T:Microsoft.Extensions.AI.AIFunction"/> for every <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> in this plugin.</summary>
            <param name="kernel">
            The <see cref="T:Microsoft.SemanticKernel.Kernel"/> instance to pass to the <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>s when invoked as part of the <see cref="T:Microsoft.Extensions.AI.AIFunction"/>'s invocation.
            </param>
            <returns>An enumerable of <see cref="T:Microsoft.Extensions.AI.AIFunction"/> instances, one for each <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> in this plugin.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelPlugin.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelPlugin.TypeProxy">
            <summary>Debugger type proxy for the kernel plugin.</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelPlugin.TypeProxy.#ctor(Microsoft.SemanticKernel.KernelPlugin)">
            <summary>Debugger type proxy for the kernel plugin.</summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelPluginCollection">
            <summary>Provides a collection of <see cref="T:Microsoft.SemanticKernel.KernelPlugin"/>s.</summary>
            <remarks>
            All plugins stored in the collection must have a unique, ordinal case-insensitive name.
            All name lookups are performed using ordinal case-insensitive comparisons.
            </remarks>
        </member>
        <member name="F:Microsoft.SemanticKernel.KernelPluginCollection._plugins">
            <summary>The underlying dictionary of plugins.</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelPluginCollection.#ctor">
            <summary>Initializes a collection of plugins.</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelPluginCollection.#ctor(System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.KernelPlugin})">
            <summary>Initializes a collection of plugins that contains all of the plugins from the provided collection.</summary>
            <param name="plugins">The initial collection of plugins to populate this collection.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="plugins"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="plugins"/> contains multiple plugins with the same name.</exception>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelPluginCollection.Count">
            <summary>Gets the number of plugins in the collection.</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelPluginCollection.Add(Microsoft.SemanticKernel.KernelPlugin)">
            <summary>Adds the plugin to the plugin collection.</summary>
            <param name="plugin">The plugin to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="plugin"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="plugin"/>.<see cref="P:Microsoft.SemanticKernel.KernelPlugin.Name"/> is null.</exception>
            <exception cref="T:System.ArgumentException">A plugin with the same name already exists in the collection.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelPluginCollection.AddRange(System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.KernelPlugin})">
            <summary>Adds a collection of plugins to this plugin collection.</summary>
            <param name="plugins">The plugins to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="plugins"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="plugins"/> contains a null plugin.</exception>
            <exception cref="T:System.ArgumentNullException">A plugin in <paramref name="plugins"/> has a null <see cref="P:Microsoft.SemanticKernel.KernelPlugin.Name"/>.</exception>
            <exception cref="T:System.ArgumentException">A plugin with the same name as a plugin in <paramref name="plugins"/> already exists in the collection.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelPluginCollection.Remove(Microsoft.SemanticKernel.KernelPlugin)">
            <summary>Removes the specified plugin from the collection.</summary>
            <param name="plugin">The plugin to remove.</param>
            <returns>true if <paramref name="plugin"/> was in the collection and could be removed; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelPluginCollection.Clear">
            <summary>Removes all plugins from the collection.</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelPluginCollection.GetEnumerator">
            <summary>Gets an enumerable of all plugins stored in this collection.</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelPluginCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>Gets an enumerable of all plugins stored in this collection.</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelPluginCollection.Contains(Microsoft.SemanticKernel.KernelPlugin)">
            <summary>Gets whether the collection contains the specified plugin.</summary>
            <param name="plugin">The plugin.</param>
            <returns>true if the collection contains the plugin; otherwise, false.</returns>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelPluginCollection.Item(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelPluginCollection.TryGetPlugin(System.String,Microsoft.SemanticKernel.KernelPlugin@)">
            <summary>Gets a plugin from the collection by name.</summary>
            <param name="name">The name of the plugin.</param>
            <param name="plugin">The plugin if found in the collection.</param>
            <returns>true if the collection contains the plugin; otherwise, false.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelPluginCollection.TypeProxy">
            <summary>Debugger type proxy for nicer interaction with the collection in a debugger.</summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelPluginExtensions">
            <summary>Provides extension methods for working with <see cref="T:Microsoft.SemanticKernel.KernelPlugin"/>s and collections of them.</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelPluginExtensions.Contains(Microsoft.SemanticKernel.IReadOnlyKernelPluginCollection,System.String)">
            <summary>Gets whether the plugins collection contains a plugin with the specified name.</summary>
            <param name="plugins">The plugins collections.</param>
            <param name="pluginName">The name of the plugin.</param>
            <returns>true if the plugins contains a plugin with the specified name; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelPluginExtensions.GetFunction(Microsoft.SemanticKernel.IReadOnlyKernelPluginCollection,System.String,System.String)">
            <summary>Gets a function from the collection by plugin and function names.</summary>
            <param name="plugins">The collection.</param>
            <param name="pluginName">The name of the plugin storing the function.</param>
            <param name="functionName">The name of the function.</param>
            <returns>The function from the collection.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelPluginExtensions.TryGetFunction(Microsoft.SemanticKernel.IReadOnlyKernelPluginCollection,System.String,System.String,Microsoft.SemanticKernel.KernelFunction@)">
            <summary>Gets a function from the collection by plugin and function names.</summary>
            <param name="plugins">The collection.</param>
            <param name="pluginName">The name of the plugin storing the function.</param>
            <param name="functionName">The name of the function.</param>
            <param name="func">The function, if found.</param>
            <returns>true if the specified plugin was found and the specified function was found in that plugin; otherwise, false.</returns>
            <remarks>
            If <paramref name="pluginName"/> is null or entirely whitespace, all plugins are searched for a function with the specified name,
            and the first one found is returned.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelPluginExtensions.GetFunctionsMetadata(System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.KernelPlugin})">
            <summary>Gets a collection of <see cref="T:Microsoft.SemanticKernel.KernelFunctionMetadata"/> instances, one for every function in every plugin in the plugins collection.</summary>
            <param name="plugins">The plugins collection.</param>
            <returns>A list of metadata over every function in the plugins collection</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelReturnParameterMetadata">
            <summary>
            Provides read-only metadata for a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>'s return parameter.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.KernelReturnParameterMetadata._description">
            <summary>The description of the return parameter.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.KernelReturnParameterMetadata._parameterType">
            <summary>The .NET type of the return parameter.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.KernelReturnParameterMetadata._schema">
            <summary>The schema of the return parameter, potentially lazily-initialized.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.KernelReturnParameterMetadata._jsonSerializerOptions">
            <summary>The serializer options to generate JSON schema.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.KernelReturnParameterMetadata.s_empty">
            <summary>The empty instance</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelReturnParameterMetadata.#ctor">
            <summary>Initializes the <see cref="T:Microsoft.SemanticKernel.KernelReturnParameterMetadata"/>.</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelReturnParameterMetadata.#ctor(System.Text.Json.JsonSerializerOptions)">
            <summary>Initializes the <see cref="T:Microsoft.SemanticKernel.KernelReturnParameterMetadata"/>.</summary>
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to generate JSON schema.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelReturnParameterMetadata.#ctor(Microsoft.SemanticKernel.KernelReturnParameterMetadata)">
            <summary>Initializes a <see cref="T:Microsoft.SemanticKernel.KernelReturnParameterMetadata"/> as a copy of another <see cref="T:Microsoft.SemanticKernel.KernelReturnParameterMetadata"/>.</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelReturnParameterMetadata.#ctor(Microsoft.SemanticKernel.KernelReturnParameterMetadata,System.Text.Json.JsonSerializerOptions)">
            <summary>Initializes a <see cref="T:Microsoft.SemanticKernel.KernelReturnParameterMetadata"/> as a copy of another <see cref="T:Microsoft.SemanticKernel.KernelReturnParameterMetadata"/>.</summary>
            <param name="metadata">The metadata to copy.</param>
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to generate JSON schema.</param>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelReturnParameterMetadata.Description">
            <summary>Gets a description of the return parameter, suitable for use in describing the purpose to a model.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelReturnParameterMetadata.ParameterType">
            <summary>Gets the .NET type of the return parameter.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelReturnParameterMetadata.Schema">
            <summary>Gets a JSON Schema describing the type of the return parameter.</summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.RestApiOperationResponse">
            <summary>
            The REST API operation response.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.RestApiOperationResponse.Content">
            <summary>
            Gets the content of the response.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.RestApiOperationResponse.ContentType">
            <summary>
            Gets the content type of the response.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.RestApiOperationResponse.ExpectedSchema">
            <summary>
            The expected schema of the response as advertised in the OpenAPI operation.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.RestApiOperationResponse.RequestMethod">
            <summary>
            Gets the method used for the HTTP request.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.RestApiOperationResponse.RequestUri">
            <summary>
            Gets the System.Uri used for the HTTP request.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.RestApiOperationResponse.RequestPayload">
            <summary>
            Gets the payload sent in the request.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.RestApiOperationResponse.Headers">
            <summary>
            The response headers.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.RestApiOperationResponse.Data">
            <summary>
            Gets a dictionary for ambient data associated with the response.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.RestApiOperationResponse.#ctor(System.Object,System.String,Microsoft.SemanticKernel.KernelJsonSchema)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.RestApiOperationResponse"/> class.
            </summary>
            <param name="content">The content of the response.</param>
            <param name="contentType">The content type of the response.</param>
            <param name="expectedSchema">The schema against which the response body should be validated.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.RestApiOperationResponse.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.RestApiOperationResponseConverter">
            <summary>
            Converts a object of <see cref="T:Microsoft.SemanticKernel.RestApiOperationResponse"/> type to string type.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.RestApiOperationResponseConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.RestApiOperationResponseConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.HttpOperationException">
            <summary>
            Represents an exception specific to HTTP operations.
            </summary>
            <remarks>
            Instances of this class optionally contain telemetry information in the Exception.Data property using keys that are consistent with the OpenTelemetry standard.
            See https://opentelemetry.io/ for more information.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.HttpOperationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.HttpOperationException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.HttpOperationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.HttpOperationException"/> class with its message set to <paramref name="message"/>.
            </summary>
            <param name="message">A string that describes the error.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.HttpOperationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.HttpOperationException"/> class with its message set to <paramref name="message"/>.
            </summary>
            <param name="message">A string that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.HttpOperationException.#ctor(System.Nullable{System.Net.HttpStatusCode},System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.HttpOperationException"/> class with its message
            and additional properties for the HTTP status code and response content.
            </summary>
            <param name="statusCode">The HTTP status code.</param>
            <param name="responseContent">The content of the HTTP response.</param>
            <param name="message">A string that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="P:Microsoft.SemanticKernel.HttpOperationException.StatusCode">
            <summary>
            Gets or sets the HTTP status code. If the property is null, it indicates that no response was received.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.HttpOperationException.ResponseContent">
            <summary>
            Gets or sets the content of the HTTP response.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.HttpOperationException.RequestMethod">
            <summary>
            Gets the method used for the HTTP request.
            </summary>
            <remarks>
            This information is only available in limited circumstances e.g. when using Open API plugins.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.HttpOperationException.RequestUri">
            <summary>
            Gets the System.Uri used for the HTTP request.
            </summary>
            <remarks>
            This information is only available in limited circumstances e.g. when using Open API plugins.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.HttpOperationException.RequestPayload">
            <summary>
            Gets the payload sent in the request.
            </summary>
            <remarks>
            This information is only available in limited circumstances e.g. when using Open API plugins.
            </remarks>
        </member>
        <member name="T:Microsoft.SemanticKernel.IKernelBuilder">
            <summary>Provides a builder for constructing instances of <see cref="T:Microsoft.SemanticKernel.Kernel"/>.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.IKernelBuilder.Services">
            <summary>Gets the collection of services to be built into the <see cref="T:Microsoft.SemanticKernel.Kernel"/>.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.IKernelBuilder.Plugins">
            <summary>Gets a builder for adding collections as singletons to <see cref="P:Microsoft.SemanticKernel.IKernelBuilder.Services"/>.</summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.IKernelBuilderPlugins">
            <summary>Provides a builder for adding plugins as singletons to a service collection.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.IKernelBuilderPlugins.Services">
            <summary>Gets the collection of services to which plugins should be added.</summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Kernel">
            <summary>
            Provides state for use throughout a Semantic Kernel workload.
            </summary>
            <remarks>
            An instance of <see cref="T:Microsoft.SemanticKernel.Kernel"/> is passed through to every function invocation and service call
            throughout the system, providing to each the ability to access shared state and services.
            </remarks>
        </member>
        <member name="F:Microsoft.SemanticKernel.Kernel.KernelServiceTypeToKeyMappings">
            <summary>Key used by <see cref="T:Microsoft.SemanticKernel.IKernelBuilder"/> to store type information into the service provider.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Kernel._data">
            <summary>Dictionary containing ambient data stored in the kernel, lazily-initialized on first access.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Kernel._culture">
            <summary><see cref="T:System.Globalization.CultureInfo"/> to be used by any operations that need access to the culture, a format provider, etc.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Kernel._plugins">
            <summary>The collection of plugins, initialized via the constructor or lazily-initialized on first access via <see cref="P:Microsoft.SemanticKernel.Kernel.Plugins"/>.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Kernel._functionInvocationFilters">
            <summary>The collection of function filters, initialized via the constructor or lazily-initialized on first access via <see cref="P:Microsoft.SemanticKernel.Kernel.Plugins"/>.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Kernel._promptRenderFilters">
            <summary>The collection of prompt filters, initialized via the constructor or lazily-initialized on first access via <see cref="P:Microsoft.SemanticKernel.Kernel.Plugins"/>.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Kernel._autoFunctionInvocationFilters">
            <summary>The collection of automatic function invocation filters, initialized via the constructor or lazily-initialized on first access via <see cref="P:Microsoft.SemanticKernel.Kernel.Plugins"/>.</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Kernel.#ctor(System.IServiceProvider,Microsoft.SemanticKernel.KernelPluginCollection)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.SemanticKernel.Kernel"/>.
            </summary>
            <param name="services">The <see cref="T:System.IServiceProvider"/> used to query for services available through the kernel.</param>
            <param name="plugins">
            The collection of plugins available through the kernel. If null, an empty collection will be used.
            If non-null, the supplied collection instance is used, not a copy; if it's desired for the <see cref="T:Microsoft.SemanticKernel.Kernel"/>
            to have a copy, the caller is responsible for supplying it.
            </param>
            <remarks>
            The KernelBuilder class provides a fluent API for constructing a <see cref="T:Microsoft.SemanticKernel.Kernel"/> instance.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Kernel.CreateBuilder">
            <summary>Creates a builder for constructing <see cref="T:Microsoft.SemanticKernel.Kernel"/> instances.</summary>
            <returns>A new <see cref="T:Microsoft.SemanticKernel.IKernelBuilder"/> instance.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Kernel.Clone">
            <summary>
            Clone the <see cref="T:Microsoft.SemanticKernel.Kernel"/> object to create a new instance that may be mutated without affecting the current instance.
            </summary>
            <remarks>
            The current instance is unmodified by this operation. The new <see cref="T:Microsoft.SemanticKernel.Kernel"/> will be initialized with:
            <list type="bullet">
            <item>
            The same <see cref="T:System.IServiceProvider"/> reference as is returned by the current instance's <see cref="P:Microsoft.SemanticKernel.Kernel.Services"/>.
            </item>
            <item>
            A new <see cref="T:Microsoft.SemanticKernel.KernelPluginCollection"/> instance initialized with the same <see cref="T:Microsoft.SemanticKernel.KernelPlugin"/> instances as are stored by the current instance's <see cref="P:Microsoft.SemanticKernel.Kernel.Plugins"/> collection.
            Changes to the new instance's plugin collection will not affect the current instance's plugin collection, and vice versa.
            </item>
            <item>
            All of the delegates registered with each event. Delegates are immutable (every time an additional delegate is added or removed, a new one is created),
            so changes to the new instance's event delegates will not affect the current instance's event delegates, and vice versa.
            </item>
            <item>
            A new <see cref="T:System.Collections.Generic.IDictionary`2"/> containing all of the key/value pairs from the current instance's <see cref="P:Microsoft.SemanticKernel.Kernel.Data"/> dictionary.
            Any changes made to the new instance's dictionary will not affect the current instance's dictionary, and vice versa.
            </item>
            <item>The same <see cref="T:System.Globalization.CultureInfo"/> reference as is returned by the current instance's <see cref="P:Microsoft.SemanticKernel.Kernel.Culture"/>.</item>
            </list>
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Kernel.Plugins">
            <summary>
            Gets the collection of plugins available through the kernel.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Kernel.FunctionInvocationFilters">
            <summary>
            Gets the collection of function filters available through the kernel.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Kernel.PromptRenderFilters">
            <summary>
            Gets the collection of function filters available through the kernel.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Kernel.AutoFunctionInvocationFilters">
            <summary>
            Gets the collection of auto function invocation filters available through the kernel.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Kernel.Services">
            <summary>
            Gets the service provider used to query for services available through the kernel.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Kernel.Culture">
            <summary>
            Gets the culture currently associated with this <see cref="T:Microsoft.SemanticKernel.Kernel"/>.
            </summary>
            <remarks>
            The culture defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> if not explicitly set.
            It may be set to another culture, such as <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>,
            and any functions invoked within the context can consult this property for use in
            operations like formatting and parsing.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Kernel.LoggerFactory">
            <summary>
            Gets the <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> associated with this <see cref="T:Microsoft.SemanticKernel.Kernel"/>.
            </summary>
            <remarks>
            This returns any <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> in <see cref="P:Microsoft.SemanticKernel.Kernel.Services"/>. If there is
            none, it returns an <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> that won't perform any logging.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Kernel.ServiceSelector">
            <summary>
            Gets the <see cref="T:Microsoft.SemanticKernel.IAIServiceSelector"/> associated with this <see cref="T:Microsoft.SemanticKernel.Kernel"/>.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Kernel.Data">
            <summary>
            Gets a dictionary for ambient data associated with the kernel.
            </summary>
            <remarks>
            This may be used to flow arbitrary data in and out of operations performed with this kernel instance.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Kernel.GetRequiredService``1(System.Object)">
            <summary>Gets a required service from the <see cref="P:Microsoft.SemanticKernel.Kernel.Services"/> provider.</summary>
            <typeparam name="T">Specifies the type of the service to get.</typeparam>
            <param name="serviceKey">An object that specifies the key of the service to get.</param>
            <returns>The found service instance.</returns>
            <exception cref="T:Microsoft.SemanticKernel.KernelException">A service of the specified type and name could not be found.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.Kernel.GetAllServices``1">
            <summary>Gets all services of the specified type.</summary>
            <typeparam name="T">Specifies the type of the services to retrieve.</typeparam>
            <returns>An enumerable of all instances of the specified service that are registered.</returns>
            <remarks>There is no guaranteed ordering on the results.</remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Kernel.InvokeFilterOrFunctionAsync(Microsoft.SemanticKernel.NonNullCollection{Microsoft.SemanticKernel.IFunctionInvocationFilter},System.Func{Microsoft.SemanticKernel.FunctionInvocationContext,System.Threading.Tasks.Task},Microsoft.SemanticKernel.FunctionInvocationContext,System.Int32)">
            <summary>
            This method will execute filters and kernel function recursively.
            If there are no registered filters, just kernel function will be executed.
            If there are registered filters, filter on <paramref name="index"/> position will be executed.
            Second parameter of filter is callback. It can be either filter on <paramref name="index"/> + 1 position or kernel function if there are no remaining filters to execute.
            Kernel function will be always executed as last step after all filters.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Kernel.InvokeFilterOrPromptRenderAsync(Microsoft.SemanticKernel.NonNullCollection{Microsoft.SemanticKernel.IPromptRenderFilter},System.Func{Microsoft.SemanticKernel.PromptRenderContext,System.Threading.Tasks.Task},Microsoft.SemanticKernel.PromptRenderContext,System.Int32)">
            <summary>
            This method will execute prompt filters and prompt rendering recursively.
            If there are no registered filters, just prompt rendering will be executed.
            If there are registered filters, filter on <paramref name="index"/> position will be executed.
            Second parameter of filter is callback. It can be either filter on <paramref name="index"/> + 1 position or prompt rendering if there are no remaining filters to execute.
            Prompt rendering will be always executed as last step after all filters.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Kernel.InvokeAsync(Microsoft.SemanticKernel.KernelFunction,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Invokes the <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>.
            </summary>
            <param name="function">The <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> to invoke.</param>
            <param name="arguments">The arguments to pass to the function's invocation, including any <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/>.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>The result of the function's execution.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="function"/> is null.</exception>
            <exception cref="T:Microsoft.SemanticKernel.KernelFunctionCanceledException">The <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>'s invocation was canceled.</exception>
            <remarks>
            This behaves identically to invoking the specified <paramref name="function"/> with this <see cref="T:Microsoft.SemanticKernel.Kernel"/> as its <see cref="T:Microsoft.SemanticKernel.Kernel"/> argument.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Kernel.InvokeAsync(System.String,System.String,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Invokes a function from <see cref="P:Microsoft.SemanticKernel.Kernel.Plugins"/> using the specified arguments.
            </summary>
            <param name="pluginName">The name of the plugin containing the function to invoke. If null, all plugins will be searched for the first function of the specified name.</param>
            <param name="functionName">The name of the function to invoke.</param>
            <param name="arguments">The arguments to pass to the function's invocation, including any <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/>.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>The result of the function's execution.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="functionName"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="functionName"/> is composed entirely of whitespace.</exception>
            <exception cref="T:Microsoft.SemanticKernel.KernelFunctionCanceledException">The <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>'s invocation was canceled.</exception>
            <remarks>
            This behaves identically to using <see cref="M:Microsoft.SemanticKernel.KernelPluginExtensions.GetFunction(Microsoft.SemanticKernel.IReadOnlyKernelPluginCollection,System.String,System.String)"/> to find the desired <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> and then
            invoking it with this <see cref="T:Microsoft.SemanticKernel.Kernel"/> as its <see cref="T:Microsoft.SemanticKernel.Kernel"/> argument.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Kernel.InvokeAsync``1(Microsoft.SemanticKernel.KernelFunction,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Invokes the <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>.
            </summary>
            <typeparam name="TResult">Specifies the type of the result value of the function.</typeparam>
            <param name="function">The <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> to invoke.</param>
            <param name="arguments">The arguments to pass to the function's invocation, including any <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/>.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>The result of the function's execution, cast to <typeparamref name="TResult"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="function"/> is null.</exception>
            <exception cref="T:Microsoft.SemanticKernel.KernelFunctionCanceledException">The <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>'s invocation was canceled.</exception>
            <exception cref="T:System.InvalidCastException">The function's result could not be cast to <typeparamref name="TResult"/>.</exception>
            <remarks>
            This behaves identically to invoking the specified <paramref name="function"/> with this <see cref="T:Microsoft.SemanticKernel.Kernel"/> as its <see cref="T:Microsoft.SemanticKernel.Kernel"/> argument.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Kernel.InvokeAsync``1(System.String,System.String,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Invokes a function from <see cref="P:Microsoft.SemanticKernel.Kernel.Plugins"/> using the specified arguments.
            </summary>
            <typeparam name="TResult">Specifies the type of the result value of the function.</typeparam>
            <param name="pluginName">The name of the plugin containing the function to invoke. If null, all plugins will be searched for the first function of the specified name.</param>
            <param name="functionName">The name of the function to invoke.</param>
            <param name="arguments">The arguments to pass to the function's invocation, including any <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/>.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>The result of the function's execution, cast to <typeparamref name="TResult"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="functionName"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="functionName"/> is composed entirely of whitespace.</exception>
            <exception cref="T:Microsoft.SemanticKernel.KernelFunctionCanceledException">The <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>'s invocation was canceled.</exception>
            <exception cref="T:System.InvalidCastException">The function's result could not be cast to <typeparamref name="TResult"/>.</exception>
            <remarks>
            This behaves identically to using <see cref="M:Microsoft.SemanticKernel.KernelPluginExtensions.GetFunction(Microsoft.SemanticKernel.IReadOnlyKernelPluginCollection,System.String,System.String)"/> to find the desired <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> and then
            invoking it with this <see cref="T:Microsoft.SemanticKernel.Kernel"/> as its <see cref="T:Microsoft.SemanticKernel.Kernel"/> argument.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Kernel.InvokeStreamingAsync(Microsoft.SemanticKernel.KernelFunction,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Invokes the <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> and streams its results.
            </summary>
            <param name="function">The <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> to invoke.</param>
            <param name="arguments">The arguments to pass to the function's invocation, including any <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/>.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> for streaming the results of the function's invocation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="function"/> is null.</exception>
            <remarks>
            The function will not be invoked until an enumerator is retrieved from the returned <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>
            and its iteration initiated via an initial call to <see cref="M:System.Collections.Generic.IAsyncEnumerator`1.MoveNextAsync"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Kernel.InvokeStreamingAsync(System.String,System.String,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Invokes the <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> and streams its results.
            </summary>
            <param name="pluginName">The name of the plugin containing the function to invoke. If null, all plugins will be searched for the first function of the specified name.</param>
            <param name="functionName">The name of the function to invoke.</param>
            <param name="arguments">The arguments to pass to the function's invocation, including any <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/>.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> for streaming the results of the function's invocation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="functionName"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="functionName"/> is composed entirely of whitespace.</exception>
            <exception cref="T:Microsoft.SemanticKernel.KernelFunctionCanceledException">The <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>'s invocation was canceled.</exception>
            <remarks>
            The function will not be invoked until an enumerator is retrieved from the returned <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>
            and its iteration initiated via an initial call to <see cref="M:System.Collections.Generic.IAsyncEnumerator`1.MoveNextAsync"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Kernel.InvokeStreamingAsync``1(Microsoft.SemanticKernel.KernelFunction,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Invokes the <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> and streams its results.
            </summary>
            <param name="function">The <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> to invoke.</param>
            <param name="arguments">The arguments to pass to the function's invocation, including any <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/>.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> for streaming the results of the function's invocation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="function"/> is null.</exception>
            <remarks>
            The function will not be invoked until an enumerator is retrieved from the returned <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>
            and its iteration initiated via an initial call to <see cref="M:System.Collections.Generic.IAsyncEnumerator`1.MoveNextAsync"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Kernel.InvokeStreamingAsync``1(System.String,System.String,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Invokes the <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> and streams its results.
            </summary>
            <param name="pluginName">The name of the plugin containing the function to invoke. If null, all plugins will be searched for the first function of the specified name.</param>
            <param name="functionName">The name of the function to invoke.</param>
            <param name="arguments">The arguments to pass to the function's invocation, including any <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/>.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> for streaming the results of the function's invocation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="functionName"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="functionName"/> is composed entirely of whitespace.</exception>
            <exception cref="T:Microsoft.SemanticKernel.KernelFunctionCanceledException">The <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>'s invocation was canceled.</exception>
            <remarks>
            The function will not be invoked until an enumerator is retrieved from the returned <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>
            and its iteration initiated via an initial call to <see cref="M:System.Collections.Generic.IAsyncEnumerator`1.MoveNextAsync"/>.
            </remarks>
        </member>
        <member name="E:Microsoft.SemanticKernel.Kernel.FunctionInvoking">
            <summary>
            Provides an event that's raised prior to a function's invocation.
            </summary>
        </member>
        <member name="E:Microsoft.SemanticKernel.Kernel.FunctionInvoked">
            <summary>
            Provides an event that's raised after a function's invocation.
            </summary>
        </member>
        <member name="E:Microsoft.SemanticKernel.Kernel.PromptRendering">
            <summary>
            Provides an event that's raised prior to a prompt being rendered.
            </summary>
        </member>
        <member name="E:Microsoft.SemanticKernel.Kernel.PromptRendered">
            <summary>
            Provides an event that's raised after a prompt is rendered.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelBuilder">
            <summary>Provides a builder for constructing instances of <see cref="T:Microsoft.SemanticKernel.Kernel"/>.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.KernelBuilder._services">
            <summary>The collection of services to be available through the <see cref="T:Microsoft.SemanticKernel.Kernel"/>.</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelBuilder.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.KernelBuilder"/>.</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelBuilder.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.KernelBuilder"/>.</summary>
            <param name="services">
            The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to wrap and use for building the <see cref="T:Microsoft.SemanticKernel.Kernel"/>.
            </param>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelBuilder.AllowBuild">
            <summary>Whether to allow a call to Build.</summary>
            <remarks>As a minor aid to help avoid misuse, we try to prevent Build from being called on instances returned from AddKernel.</remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelBuilder.Services">
            <summary>Gets the collection of services to be built into the <see cref="T:Microsoft.SemanticKernel.Kernel"/>.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelBuilder.Plugins">
            <summary>Gets a builder for plugins to be built as services into the <see cref="T:Microsoft.SemanticKernel.Kernel"/>.</summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelException">
            <summary>
            Represents the base exception from which all Semantic Kernel exceptions derive.
            </summary>
            <remarks>
            Instances of this class optionally contain telemetry information in the Exception.Data property using keys that are consistent with the OpenTelemetry standard.
            See https://opentelemetry.io/ for more information.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.KernelException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.KernelException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.KernelException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.Memory.DataEntryBase">
            <summary>
            A base class for data entries.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.DataEntryBase.#ctor(System.String,System.Nullable{System.DateTimeOffset})">
            <summary>
            Creates an instance of a <see cref="T:Microsoft.SemanticKernel.Memory.DataEntryBase"/>.
            </summary>
            <param name="key">The data key.</param>
            <param name="timestamp">The data timestamp.</param>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.DataEntryBase.Key">
            <summary>
            Gets the key of the data.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.DataEntryBase.Timestamp">
            <summary>
            Gets the timestamp of the data.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.DataEntryBase.HasTimestamp">
            <summary>
            <c>true</c> if the data has a timestamp.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Memory.IMemoryStore">
            <summary>
            An interface for storing and retrieving indexed <see cref="T:Microsoft.SemanticKernel.Memory.MemoryRecord"/> objects in a data store.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.IMemoryStore.CreateCollectionAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Creates a new collection in the data store.
            </summary>
            <param name="collectionName">The name associated with a collection of embeddings.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.IMemoryStore.GetCollectionsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets all collection names in the data store.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A group of collection names.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.IMemoryStore.DoesCollectionExistAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Determines if a collection exists in the data store.
            </summary>
            <param name="collectionName">The name associated with a collection of embeddings.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>True if given collection exists, false if not.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.IMemoryStore.DeleteCollectionAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes a collection from the data store.
            </summary>
            <param name="collectionName">The name associated with a collection of embeddings.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.IMemoryStore.UpsertAsync(System.String,Microsoft.SemanticKernel.Memory.MemoryRecord,System.Threading.CancellationToken)">
            <summary>
            Upserts a memory record into the data store. Does not guarantee that the collection exists.
                If the record already exists, it will be updated.
                If the record does not exist, it will be created.
            </summary>
            <param name="collectionName">The name associated with a collection of embeddings.</param>
            <param name="record">The memory record to upsert.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>The unique identifier for the memory record.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.IMemoryStore.UpsertBatchAsync(System.String,System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.Memory.MemoryRecord},System.Threading.CancellationToken)">
            <summary>
            Upserts a group of memory records into the data store. Does not guarantee that the collection exists.
                If the record already exists, it will be updated.
                If the record does not exist, it will be created.
            </summary>
            <param name="collectionName">The name associated with a collection of vectors.</param>
            <param name="records">The memory records to upsert.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>The unique identifiers for the memory records.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.IMemoryStore.GetAsync(System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets a memory record from the data store. Does not guarantee that the collection exists.
            </summary>
            <param name="collectionName">The name associated with a collection of embeddings.</param>
            <param name="key">The unique id associated with the memory record to get.</param>
            <param name="withEmbedding">If true, the embedding will be returned in the memory record.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>The memory record if found, otherwise null.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.IMemoryStore.GetBatchAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets a batch of memory records from the data store. Does not guarantee that the collection exists.
            </summary>
            <param name="collectionName">The name associated with a collection of embedding.</param>
            <param name="keys">The unique ids associated with the memory record to get.</param>
            <param name="withEmbeddings">If true, the embeddings will be returned in the memory records.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>The memory records associated with the unique keys provided.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.IMemoryStore.RemoveAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Removes a memory record from the data store. Does not guarantee that the collection exists.
            </summary>
            <param name="collectionName">The name associated with a collection of embeddings.</param>
            <param name="key">The unique id associated with the memory record to remove.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.IMemoryStore.RemoveBatchAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Removes a batch of memory records from the data store. Does not guarantee that the collection exists.
            </summary>
            <param name="collectionName">The name associated with a collection of embeddings.</param>
            <param name="keys">The unique ids associated with the memory record to remove.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.IMemoryStore.GetNearestMatchesAsync(System.String,System.ReadOnlyMemory{System.Single},System.Int32,System.Double,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets the nearest matches to an embedding of type <see cref="T:System.Single"/>. Does not guarantee that the collection exists.
            </summary>
            <param name="collectionName">The name associated with a collection of embeddings.</param>
            <param name="embedding">The embedding to compare the collection's embeddings with.</param>
            <param name="limit">The maximum number of similarity results to return.</param>
            <param name="minRelevanceScore">The minimum cosine similarity threshold for returned results.</param>
            <param name="withEmbeddings">If true, the embeddings will be returned in the memory records.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A group of tuples where item1 is a <see cref="T:Microsoft.SemanticKernel.Memory.MemoryRecord"/> and item2 is its similarity score as a <see cref="T:System.Double"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.IMemoryStore.GetNearestMatchAsync(System.String,System.ReadOnlyMemory{System.Single},System.Double,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets the nearest match to an embedding of type <see cref="T:System.Single"/>. Does not guarantee that the collection exists.
            </summary>
            <param name="collectionName">The name associated with a collection of embeddings.</param>
            <param name="embedding">The embedding to compare the collection's embeddings with.</param>
            <param name="minRelevanceScore">The minimum relevance threshold for returned results.</param>
            <param name="withEmbedding">If true, the embedding will be returned in the memory record.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A tuple consisting of the <see cref="T:Microsoft.SemanticKernel.Memory.MemoryRecord"/> and the similarity score as a <see cref="T:System.Double"/>. Null if no nearest match found.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Memory.ISemanticTextMemory">
            <summary>
            An interface for semantic memory that creates and recalls memories associated with text.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.ISemanticTextMemory.SaveInformationAsync(System.String,System.String,System.String,System.String,System.String,Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <summary>
            Save some information into the semantic memory, keeping a copy of the source information.
            </summary>
            <param name="collection">Collection where to save the information.</param>
            <param name="text">Information to save.</param>
            <param name="id">Unique identifier.</param>
            <param name="description">Optional description.</param>
            <param name="additionalMetadata">Optional string for saving custom metadata.</param>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>Unique identifier of the saved memory record.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.ISemanticTextMemory.SaveReferenceAsync(System.String,System.String,System.String,System.String,System.String,System.String,Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <summary>
            Save some information into the semantic memory, keeping only a reference to the source information.
            </summary>
            <param name="collection">Collection where to save the information.</param>
            <param name="text">Information to save.</param>
            <param name="externalId">Unique identifier, e.g. URL or GUID to the original source.</param>
            <param name="externalSourceName">Name of the external service, e.g. "MSTeams", "GitHub", "WebSite", "Outlook IMAP", etc.</param>
            <param name="description">Optional description.</param>
            <param name="additionalMetadata">Optional string for saving custom metadata.</param>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>Unique identifier of the saved memory record.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.ISemanticTextMemory.GetAsync(System.String,System.String,System.Boolean,Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <summary>
            Fetch a memory by key.
            For local memories the key is the "id" used when saving the record.
            For external reference, the key is the "URI" used when saving the record.
            </summary>
            <param name="collection">Collection to search.</param>
            <param name="key">Unique memory record identifier.</param>
            <param name="withEmbedding">Whether to return the embedding of the memory found.</param>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>Memory record, or null when nothing is found</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.ISemanticTextMemory.RemoveAsync(System.String,System.String,Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <summary>
            Remove a memory by key.
            For local memories the key is the "id" used when saving the record.
            For external reference, the key is the "URI" used when saving the record.
            </summary>
            <param name="collection">Collection to search.</param>
            <param name="key">Unique memory record identifier.</param>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.ISemanticTextMemory.SearchAsync(System.String,System.String,System.Int32,System.Double,System.Boolean,Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <summary>
            Find some information in memory
            </summary>
            <param name="collection">Collection to search</param>
            <param name="query">What to search for</param>
            <param name="limit">How many results to return</param>
            <param name="minRelevanceScore">Minimum relevance score, from 0 to 1, where 1 means exact match.</param>
            <param name="withEmbeddings">Whether to return the embeddings of the memories found.</param>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>Memories found</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.ISemanticTextMemory.GetCollectionsAsync(Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <summary>
            Gets a group of all available collection names.
            </summary>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A group of collection names.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Memory.MemoryQueryResult">
            <summary>
            Copy of metadata associated with a memory entry.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.MemoryQueryResult.Metadata">
            <summary>
            Whether the source data used to calculate embeddings are stored in the local
            storage provider or is available through an external service, such as web site, MS Graph, etc.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.MemoryQueryResult.Relevance">
            <summary>
            Search relevance, from 0 to 1, where 1 means perfect match.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.MemoryQueryResult.Embedding">
            <summary>
            Nullable embedding associated with the metadata returned for by a query.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.MemoryQueryResult.#ctor(Microsoft.SemanticKernel.Memory.MemoryRecordMetadata,System.Double,System.Nullable{System.ReadOnlyMemory{System.Single}})">
            <summary>
            Create a new instance of MemoryQueryResult
            </summary>
            <param name="metadata">
              Whether the source data used to calculate embeddings are stored in the local
              storage provider or is available through an external service, such as web site, MS Graph, etc.
            </param>
            <param name="relevance">Search relevance, from 0 to 1, where 1 means perfect match.</param>
            <param name="embedding">Optional embedding associated with the metadata.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.MemoryQueryResult.FromMemoryRecord(Microsoft.SemanticKernel.Memory.MemoryRecord,System.Double)">
            <summary>
            Creates instance of <see cref="T:Microsoft.SemanticKernel.Memory.MemoryQueryResult"/> based on <see cref="T:Microsoft.SemanticKernel.Memory.MemoryRecord"/> and search relevance.
            </summary>
            <param name="record">Instance of <see cref="T:Microsoft.SemanticKernel.Memory.MemoryRecord"/>.</param>
            <param name="relevance">Search relevance, from 0 to 1, where 1 means perfect match.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.Memory.MemoryRecord">
            <summary>
            IMPORTANT: this is a storage schema. Changing the fields will invalidate existing metadata stored in persistent vector DBs.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.MemoryRecord.Embedding">
            <summary>
            Source content embeddings.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.MemoryRecord.Metadata">
            <summary>
            Metadata associated with a Semantic Kernel memory.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.MemoryRecord.#ctor(Microsoft.SemanticKernel.Memory.MemoryRecordMetadata,System.ReadOnlyMemory{System.Single},System.String,System.Nullable{System.DateTimeOffset})">
            <summary>
            Constructor, use <see cref="M:Microsoft.SemanticKernel.Memory.MemoryRecord.ReferenceRecord(System.String,System.String,System.String,System.ReadOnlyMemory{System.Single},System.String,System.String,System.Nullable{System.DateTimeOffset})"/> or <see cref="M:Microsoft.SemanticKernel.Memory.MemoryRecord.LocalRecord(System.String,System.String,System.String,System.ReadOnlyMemory{System.Single},System.String,System.String,System.Nullable{System.DateTimeOffset})"/>
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.MemoryRecord.ReferenceRecord(System.String,System.String,System.String,System.ReadOnlyMemory{System.Single},System.String,System.String,System.Nullable{System.DateTimeOffset})">
            <summary>
            Prepare an instance about a memory which source is stored externally.
            The universal resource identifies points to the URL (or equivalent) to find the original source.
            </summary>
            <param name="externalId">URL (or equivalent) to find the original source.</param>
            <param name="sourceName">Name of the external service, e.g. "MSTeams", "GitHub", "WebSite", "Outlook IMAP", etc.</param>
            <param name="description">Optional description of the record. Note: the description is not indexed.</param>
            <param name="embedding">Source content embedding.</param>
            <param name="additionalMetadata">Optional string for saving custom metadata.</param>
            <param name="key">Optional existing database key.</param>
            <param name="timestamp">optional timestamp.</param>
            <returns>Memory record</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.MemoryRecord.LocalRecord(System.String,System.String,System.String,System.ReadOnlyMemory{System.Single},System.String,System.String,System.Nullable{System.DateTimeOffset})">
            <summary>
            Prepare an instance for a memory stored in the internal storage provider.
            </summary>
            <param name="id">Resource identifier within the storage provider, e.g. record ID/GUID/incremental counter etc.</param>
            <param name="text">Full text used to generate the embeddings.</param>
            <param name="description">Optional description of the record. Note: the description is not indexed.</param>
            <param name="embedding">Source content embedding.</param>
            <param name="additionalMetadata">Optional string for saving custom metadata.</param>
            <param name="key">Optional existing database key.</param>
            <param name="timestamp">Optional timestamp.</param>
            <returns>Memory record</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.MemoryRecord.FromJsonMetadata(System.String,System.ReadOnlyMemory{System.Single},System.String,System.Nullable{System.DateTimeOffset})">
            <summary>
            Create a memory record from a serialized metadata string.
            </summary>
            <param name="json">Json string representing a memory record's metadata.</param>
            <param name="embedding">Optional embedding associated with a memory record.</param>
            <param name="key">Optional existing database key.</param>
            <param name="timestamp">optional timestamp.</param>
            <returns>Memory record</returns>
            <exception cref="T:Microsoft.SemanticKernel.KernelException"></exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.MemoryRecord.FromMetadata(Microsoft.SemanticKernel.Memory.MemoryRecordMetadata,System.ReadOnlyMemory{System.Single},System.String,System.Nullable{System.DateTimeOffset})">
            <summary>
            Create a memory record from a memory record's metadata.
            </summary>
            <param name="metadata">Metadata associated with a memory.</param>
            <param name="embedding">Optional embedding associated with a memory record.</param>
            <param name="key">Optional existing database key.</param>
            <param name="timestamp">optional timestamp.</param>
            <returns>Memory record</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.MemoryRecord.GetSerializedMetadata">
            <summary>
            Serialize the metadata of a memory record.
            </summary>
            <returns>The memory record's metadata serialized to a json string.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Memory.MemoryRecordMetadata">
            <summary>
            Class representing the metadata associated with a Semantic Kernel memory.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.MemoryRecordMetadata.IsReference">
            <summary>
            Whether the source data used to calculate embeddings are stored in the local
            storage provider or is available through and external service, such as web site, MS Graph, etc.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.MemoryRecordMetadata.ExternalSourceName">
            <summary>
            A value used to understand which external service owns the data, to avoid storing the information
            inside the URI. E.g. this could be "MSTeams", "WebSite", "GitHub", etc.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.MemoryRecordMetadata.Id">
            <summary>
            Unique identifier. The format of the value is domain specific, so it can be a URL, a GUID, etc.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.MemoryRecordMetadata.Description">
            <summary>
            Optional title describing the content. Note: the title is not indexed.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.MemoryRecordMetadata.Text">
            <summary>
            Source text, available only when the memory is not an external source.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.MemoryRecordMetadata.AdditionalMetadata">
            <summary>
            Field for saving custom metadata with a memory.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.MemoryRecordMetadata.#ctor(System.Boolean,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="isReference">True if source data is local, false if source data comes from an external service</param>
            <param name="id">Unique string used to identify the <see cref="T:Microsoft.SemanticKernel.Memory.MemoryRecord"/>.</param>
            <param name="text">Local source data associated with a <see cref="T:Microsoft.SemanticKernel.Memory.MemoryRecord"/> embedding.</param>
            <param name="description"><see cref="T:Microsoft.SemanticKernel.Memory.MemoryRecord"/> description.</param>
            <param name="externalSourceName">Name of the external source if isReference is true.</param>
            <param name="additionalMetadata">Field for saving custom metadata with a memory.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.MemoryRecordMetadata.Clone">
            <summary>
            Creates a shallow copy of <see cref="T:Microsoft.SemanticKernel.Memory.MemoryRecordMetadata"/>.
            </summary>
            <returns>A shallow copy of this object</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Memory.NullMemory">
            <summary>
            Implementation of <see cref="T:Microsoft.SemanticKernel.Memory.ISemanticTextMemory"/> that stores nothing.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.NullMemory.Instance">
            <summary>
            Singleton instance
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.NullMemory.SaveInformationAsync(System.String,System.String,System.String,System.String,System.String,Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.NullMemory.SaveReferenceAsync(System.String,System.String,System.String,System.String,System.String,System.String,Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.NullMemory.GetAsync(System.String,System.String,System.Boolean,Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.NullMemory.RemoveAsync(System.String,System.String,Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.NullMemory.SearchAsync(System.String,System.String,System.Int32,System.Double,System.Boolean,Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.NullMemory.GetCollectionsAsync(Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.InputVariable">
            <summary>
            Represents an input variable for prompt functions.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.InputVariable._name">
            <summary>The name of the variable.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.InputVariable._description">
            <summary>The description of the variable.</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.InputVariable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.InputVariable"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.InputVariable.#ctor(Microsoft.SemanticKernel.InputVariable)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.InputVariable"/> class from an existing instance.
            </summary>
            <param name="inputVariable"></param>
        </member>
        <member name="P:Microsoft.SemanticKernel.InputVariable.Name">
            <summary>
            Gets or sets the name of the variable.
            </summary>
            <remarks>
            As an example, when using "{{$style}}", the name is "style".
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.InputVariable.Description">
            <summary>
            Gets or sets a description of the variable.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.InputVariable.Default">
            <summary>
            Gets or sets a default value for the variable.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.InputVariable.IsRequired">
            <summary>
            Gets or sets whether the variable is considered required (rather than optional).
            </summary>
            <remarks>
            The default is true.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.InputVariable.JsonSchema">
            <summary>
            Gets or sets JSON Schema describing this variable.
            </summary>
            <remarks>
            This string will be deserialized into an instance of <see cref="T:Microsoft.SemanticKernel.KernelJsonSchema"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.InputVariable.AllowDangerouslySetContent">
            <summary>
            Gets or sets a value indicating whether to handle the variable value as potential dangerous content.
            </summary>
            <remarks>
            The default is false.
            When set to true the value of the input variable is treated as safe content.
            For prompts which are being used with a chat completion service this should be set to false to protect against prompt injection attacks.
            When using other AI services e.g. Text-To-Image this can be set to true to allow for more complex prompts.
            </remarks>
        </member>
        <member name="T:Microsoft.SemanticKernel.IPromptTemplate">
            <summary>
            Represents a prompt template that can be rendered to a string.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.IPromptTemplate.RenderAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Renders the template using the supplied <paramref name="kernel"/> and <paramref name="arguments"/>.
            </summary>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="arguments">The arguments to use to satisfy any input variables in the prompt template.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>The prompt rendered to a string.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="kernel"/> is null.</exception>
        </member>
        <member name="T:Microsoft.SemanticKernel.IPromptTemplateFactory">
            <summary>
            Represents a factory for prompt templates for one or more prompt template formats.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.IPromptTemplateFactory.TryCreate(Microsoft.SemanticKernel.PromptTemplateConfig,Microsoft.SemanticKernel.IPromptTemplate@)">
            <summary>
            Creates an instance of <see cref="T:Microsoft.SemanticKernel.IPromptTemplate"/> from a <see cref="T:Microsoft.SemanticKernel.PromptTemplateConfig"/>.
            </summary>
            <param name="templateConfig">Prompt template configuration</param>
            <param name="result">The created template, or null if the specified template format is not supported.</param>
            <returns>true if the format is supported and the template can be created; otherwise, false.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.OutputVariable">
            <summary>
            Represents an output variable returned from a prompt function.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.OutputVariable._description">
            <summary>The description of the variable.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.OutputVariable.Description">
            <summary>
            Gets or sets a description of this output.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.OutputVariable.JsonSchema">
            <summary>
            Gets or sets JSON Schema describing this output.
            </summary>
            <remarks>
            This string will be deserialized into an instance of <see cref="T:Microsoft.SemanticKernel.KernelJsonSchema"/>.
            </remarks>
        </member>
        <member name="T:Microsoft.SemanticKernel.PromptTemplateConfig">
            <summary>
            Provides the configuration information necessary to create a prompt template.
            </summary>
            <remarks>
            A prompt template is a template that can be used to generate a prompt to be submitted to an AI service.
            For basic prompts, the template may be supplied as a simple string. For more complex prompts, more information
            is desirable for describing the prompt template, such as details on input variables expected by the template.
            This can all be provided by a <see cref="T:Microsoft.SemanticKernel.PromptTemplateConfig"/>, where its <see cref="P:Microsoft.SemanticKernel.PromptTemplateConfig.Template"/>
            is the prompt template string itself, then with other properties set with additional information. To create the
            actual prompt template, a <see cref="T:Microsoft.SemanticKernel.IPromptTemplateFactory"/> is used to create an <see cref="T:Microsoft.SemanticKernel.IPromptTemplate"/>;
            this is done automatically by the APIs that accept a <see cref="T:Microsoft.SemanticKernel.PromptTemplateConfig"/>, using a default template
            factory that understands the <see cref="P:Microsoft.SemanticKernel.PromptTemplateConfig.SemanticKernelTemplateFormat"/> format, but with the
            ability to supply other factories for interpreting other formats.
            </remarks>
        </member>
        <member name="F:Microsoft.SemanticKernel.PromptTemplateConfig._templateFormat">
            <summary>The format of the prompt template.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.PromptTemplateConfig._template">
            <summary>The prompt template string.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.PromptTemplateConfig._inputVariables">
            <summary>Lazily-initialized input variables.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.PromptTemplateConfig._executionSettings">
            <summary>Lazily-initialized execution settings. The key is the service ID, or <see cref="P:Microsoft.SemanticKernel.PromptExecutionSettings.DefaultServiceId"/> for the default execution settings.</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.PromptTemplateConfig.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.PromptTemplateConfig"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.PromptTemplateConfig.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.PromptTemplateConfig"/> class using the specified prompt template string.
            </summary>
            <param name="template">The prompt template string that defines the prompt.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="template"/> is null.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.PromptTemplateConfig.FromJson(System.String)">
            <summary>
            Creates a <see cref="T:Microsoft.SemanticKernel.PromptTemplateConfig"/> from the specified JSON.
            </summary>
            <param name="json">A string containing a JSON representation of the <see cref="T:Microsoft.SemanticKernel.PromptTemplateConfig"/>.</param>
            <returns>The deserialized <see cref="T:Microsoft.SemanticKernel.PromptTemplateConfig"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="json"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="json"/> is an invalid JSON representation of a <see cref="T:Microsoft.SemanticKernel.PromptTemplateConfig"/>.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.PromptTemplateConfig.FromJson(System.String,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Creates a <see cref="T:Microsoft.SemanticKernel.PromptTemplateConfig"/> from the specified JSON.
            </summary>
            <param name="json">A string containing a JSON representation of the <see cref="T:Microsoft.SemanticKernel.PromptTemplateConfig"/>.</param>
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to deserialize the prompt template config from JSON.</param>
            <returns>The deserialized <see cref="T:Microsoft.SemanticKernel.PromptTemplateConfig"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="json"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="json"/> is an invalid JSON representation of a <see cref="T:Microsoft.SemanticKernel.PromptTemplateConfig"/>.</exception>
        </member>
        <member name="P:Microsoft.SemanticKernel.PromptTemplateConfig.Name">
            <summary>
            Gets or sets the function name to use by default when creating prompt functions using this configuration.
            </summary>
            <remarks>
            If the name is null or empty, a random name will be generated dynamically when creating a function.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.PromptTemplateConfig.Description">
            <summary>
            Gets or sets a function description to use by default when creating prompt functions using this configuration.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.PromptTemplateConfig.SemanticKernelTemplateFormat">
            <summary>
            Gets the identifier of the Semantic Kernel template format.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.PromptTemplateConfig.TemplateFormat">
            <summary>
            Gets or sets the format of the prompt template.
            </summary>
            <remarks>
            If no template format is specified, a default format of <see cref="P:Microsoft.SemanticKernel.PromptTemplateConfig.SemanticKernelTemplateFormat"/> is used.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.PromptTemplateConfig.Template">
            <summary>
            Gets or sets the prompt template string that defines the prompt.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
        </member>
        <member name="P:Microsoft.SemanticKernel.PromptTemplateConfig.InputVariables">
            <summary>
            Gets or sets the collection of input variables used by the prompt template.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.PromptTemplateConfig.OutputVariable">
            <summary>
            Gets or sets the output variable used by the prompt template.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.PromptTemplateConfig.ExecutionSettings">
            <summary>
            Gets or sets the collection of execution settings used by the prompt template.
            </summary>
            <remarks>
            The settings dictionary is keyed by the service ID, or <see cref="P:Microsoft.SemanticKernel.PromptExecutionSettings.DefaultServiceId"/> for the default execution settings.
            When setting, the service id of each <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/> must match the key in the dictionary.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.PromptTemplateConfig.AllowDangerouslySetContent">
            <summary>
            Gets or sets a value indicating whether to allow potentially dangerous content to be inserted into the prompt from functions.
            </summary>
            <remarks>
            The default is false.
            When set to true the return values from functions only are treated as safe content.
            For prompts which are being used with a chat completion service this should be set to false to protect against prompt injection attacks.
            When using other AI services e.g. Text-To-Image this can be set to true to allow for more complex prompts.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.PromptTemplateConfig.DefaultExecutionSettings">
            <summary>
            Gets the default execution settings from <see cref="P:Microsoft.SemanticKernel.PromptTemplateConfig.ExecutionSettings"/>.
            </summary>
            <remarks>
            If no default is specified, this will return null.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.PromptTemplateConfig.AddExecutionSettings(Microsoft.SemanticKernel.PromptExecutionSettings,System.String)">
            <summary>
            Adds the specified <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/> to the <see cref="P:Microsoft.SemanticKernel.PromptTemplateConfig.ExecutionSettings"/> dictionary.
            </summary>
            <remarks>
            The key is the service ID, or <see cref="P:Microsoft.SemanticKernel.PromptExecutionSettings.DefaultServiceId"/> for the default execution settings.
            If the service ID is null, <see cref="P:Microsoft.SemanticKernel.PromptExecutionSettings.DefaultServiceId"/> will be used.
            </remarks>
            <param name="settings">The <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/> to add to the dictionary.</param>
            <param name="serviceId">The service ID with which to associated <paramref name="settings"/>, or null if this should be the default settings.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.PromptTemplateConfig.GetKernelParametersMetadata(System.Text.Json.JsonSerializerOptions)">
            <summary>
            Converts the <see cref="T:Microsoft.SemanticKernel.InputVariable"/> collection into a collection of <see cref="T:Microsoft.SemanticKernel.KernelParameterMetadata"/>.
            </summary>
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> for schema generation.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.PromptTemplateConfig.GetKernelParametersMetadata">
            <summary>
            Converts the <see cref="T:Microsoft.SemanticKernel.InputVariable"/> collection into a collection of <see cref="T:Microsoft.SemanticKernel.KernelParameterMetadata"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.PromptTemplateConfig.GetKernelReturnParameterMetadata">
            <summary>
            Converts any <see cref="P:Microsoft.SemanticKernel.PromptTemplateConfig.OutputVariable"/> into a <see cref="T:Microsoft.SemanticKernel.KernelReturnParameterMetadata"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.PromptTemplateConfig.GetKernelReturnParameterMetadata(System.Text.Json.JsonSerializerOptions)">
            <summary>
            Converts any <see cref="P:Microsoft.SemanticKernel.PromptTemplateConfig.OutputVariable"/> into a <see cref="T:Microsoft.SemanticKernel.KernelReturnParameterMetadata"/>.
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to generate and parse JSON schema.</param>"
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.PromptTemplateConfig.FromJsonInternal(System.String,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Creates a <see cref="T:Microsoft.SemanticKernel.PromptTemplateConfig"/> from the specified JSON.
            </summary>
            <param name="json">A string containing a JSON representation of the <see cref="T:Microsoft.SemanticKernel.PromptTemplateConfig"/>.</param>
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to deserialize the prompt template config from JSON.</param>
            <returns>The deserialized <see cref="T:Microsoft.SemanticKernel.PromptTemplateConfig"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="json"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="json"/> is an invalid JSON representation of a <see cref="T:Microsoft.SemanticKernel.PromptTemplateConfig"/>.</exception>
        </member>
        <member name="T:Microsoft.SemanticKernel.PromptTemplateFactoryExtensions">
            <summary>
            Provides extension methods for operating on <see cref="T:Microsoft.SemanticKernel.IPromptTemplateFactory"/> instances.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.PromptTemplateFactoryExtensions.Create(Microsoft.SemanticKernel.IPromptTemplateFactory,Microsoft.SemanticKernel.PromptTemplateConfig)">
            <summary>
            Creates an instance of <see cref="T:Microsoft.SemanticKernel.IPromptTemplate"/> from a <see cref="T:Microsoft.SemanticKernel.PromptTemplateConfig"/>.
            </summary>
            <param name="factory">The factory with which to create the template.</param>
            <param name="templateConfig">Prompt template configuration</param>
            <returns>The created template.</returns>
            <exception cref="T:Microsoft.SemanticKernel.KernelException">The factory does not support the specified configuration.</exception>
        </member>
        <member name="T:Microsoft.SemanticKernel.Services.AIServiceExtensions">
            <summary>
            Extension methods for <see cref="T:Microsoft.SemanticKernel.Services.IAIService"/>.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Services.AIServiceExtensions.ModelIdKey">
            <summary>
            Gets the key used to store the model identifier in the <see cref="P:Microsoft.SemanticKernel.Services.IAIService.Attributes"/> dictionary.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Services.AIServiceExtensions.EndpointKey">
            <summary>
            Gets the key used to store the endpoint key in the <see cref="P:Microsoft.SemanticKernel.Services.IAIService.Attributes"/> dictionary.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Services.AIServiceExtensions.ApiVersionKey">
            <summary>
            Gets the key used to store the API version in the <see cref="P:Microsoft.SemanticKernel.Services.IAIService.Attributes"/> dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Services.AIServiceExtensions.GetModelId(Microsoft.SemanticKernel.Services.IAIService)">
            <summary>
            Gets the model identifier from <paramref name="service"/>'s <see cref="P:Microsoft.SemanticKernel.Services.IAIService.Attributes"/>.
            </summary>
            <param name="service">The service from which to get the model identifier.</param>
            <returns>The model identifier if it was specified in the service's attributes; otherwise, null.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Services.AIServiceExtensions.GetEndpoint(Microsoft.SemanticKernel.Services.IAIService)">
            <summary>
            Gets the endpoint from <paramref name="service"/>'s <see cref="P:Microsoft.SemanticKernel.Services.IAIService.Attributes"/>.
            </summary>
            <param name="service">The service from which to get the endpoint.</param>
            <returns>The endpoint if it was specified in the service's attributes; otherwise, null.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Services.AIServiceExtensions.GetApiVersion(Microsoft.SemanticKernel.Services.IAIService)">
            <summary>
            Gets the API version from <paramref name="service"/>'s <see cref="P:Microsoft.SemanticKernel.Services.IAIService.Attributes"/>
            </summary>
            <param name="service">The service from which to get the API version.</param>
            <returns>The API version if it was specified in the service's attributes; otherwise, null.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Services.AIServiceExtensions.GetAttribute(Microsoft.SemanticKernel.Services.IAIService,System.String)">
            <summary>
            Gets the specified attribute.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Services.AIServiceExtensions.SelectAIService``1(Microsoft.SemanticKernel.IAIServiceSelector,Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelFunction,Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Resolves an <see cref="T:Microsoft.SemanticKernel.Services.IAIService"/> and associated <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/> from the specified
            <see cref="T:Microsoft.SemanticKernel.Kernel"/> based on a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> and associated <see cref="T:Microsoft.SemanticKernel.KernelArguments"/>.
            </summary>
            <typeparam name="T">
            Specifies the type of the <see cref="T:Microsoft.SemanticKernel.Services.IAIService"/> required. This must be the same type
            with which the service was registered in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> orvia
            the <see cref="T:Microsoft.SemanticKernel.IKernelBuilder"/>.
            </typeparam>
            <param name="selector">The <see cref="T:Microsoft.SemanticKernel.IAIServiceSelector"/> to use to select a service from the <see cref="T:Microsoft.SemanticKernel.Kernel"/>.</param>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="function">The function.</param>
            <param name="arguments">The function arguments.</param>
            <returns>A tuple of the selected service and the settings associated with the service (the settings may be null).</returns>
            <exception cref="T:Microsoft.SemanticKernel.KernelException">An appropriate service could not be found.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.Services.AIServiceExtensions.SelectAIService``1(Microsoft.SemanticKernel.IAIServiceSelector,Microsoft.SemanticKernel.Kernel,System.Collections.Generic.IReadOnlyDictionary{System.String,Microsoft.SemanticKernel.PromptExecutionSettings},Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Resolves an <see cref="T:Microsoft.SemanticKernel.Services.IAIService"/> and associated <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/> from the specified
            <see cref="T:Microsoft.SemanticKernel.Kernel"/> based on a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> and associated <see cref="T:Microsoft.SemanticKernel.KernelArguments"/>.
            </summary>
            <typeparam name="T">
            Specifies the type of the <see cref="T:Microsoft.SemanticKernel.Services.IAIService"/> required. This must be the same type
            with which the service was registered in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> orvia
            the <see cref="T:Microsoft.SemanticKernel.IKernelBuilder"/>.
            </typeparam>
            <param name="selector">The <see cref="T:Microsoft.SemanticKernel.IAIServiceSelector"/> to use to select a service from the <see cref="T:Microsoft.SemanticKernel.Kernel"/>.</param>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="executionSettings">The dictionary of <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/> to use to select a service from the <see cref="T:Microsoft.SemanticKernel.Kernel"/>.</param>
            <param name="arguments">The function arguments.</param>
            <returns>A tuple of the selected service and the settings associated with the service (the settings may be null).</returns>
            <exception cref="T:Microsoft.SemanticKernel.KernelException">An appropriate service could not be found.</exception>
        </member>
        <member name="T:Microsoft.SemanticKernel.Services.IAIService">
            <summary>
            Represents an AI service.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Services.IAIService.Attributes">
            <summary>
            Gets the AI service attributes.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Services.OrderedAIServiceSelector">
            <summary>
            Implementation of <see cref="T:Microsoft.SemanticKernel.IAIServiceSelector"/> that selects the AI service based on the order of the execution settings.
            Uses the service id or model id to select the preferred service provider and then returns the service and associated execution settings.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Services.OrderedAIServiceSelector.TrySelectAIService``1(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelFunction,Microsoft.SemanticKernel.KernelArguments,``0@,Microsoft.SemanticKernel.PromptExecutionSettings@)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.EmptyServiceProvider">
            <summary>Empty <see cref="T:System.IServiceProvider"/> implementation that returns null from all <see cref="M:System.IServiceProvider.GetService(System.Type)"/> calls.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.EmptyServiceProvider.Instance">
            <summary>Singleton instance of <see cref="T:Microsoft.SemanticKernel.EmptyServiceProvider"/>.</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.EmptyServiceProvider.GetService(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.EmptyServiceProvider.GetKeyedService(System.Type,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.EmptyServiceProvider.GetRequiredKeyedService(System.Type,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.IAIServiceSelector">
            <summary>
            Represents a selector which will return a tuple containing instances of <see cref="T:Microsoft.SemanticKernel.Services.IAIService"/> and <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/> from the specified provider based on the model settings.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.IAIServiceSelector.TrySelectAIService``1(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelFunction,Microsoft.SemanticKernel.KernelArguments,``0@,Microsoft.SemanticKernel.PromptExecutionSettings@)">
            <summary>
            Resolves an <see cref="T:Microsoft.SemanticKernel.Services.IAIService"/> and associated <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/> from the specified
            <see cref="T:Microsoft.SemanticKernel.Kernel"/> based on a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> and associated <see cref="T:Microsoft.SemanticKernel.KernelArguments"/>.
            </summary>
            <typeparam name="T">
            Specifies the type of the <see cref="T:Microsoft.SemanticKernel.Services.IAIService"/> required. This must be the same type
            with which the service was registered in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> orvia
            the <see cref="T:Microsoft.SemanticKernel.IKernelBuilder"/>.
            </typeparam>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="function">The function.</param>
            <param name="arguments">The function arguments.</param>
            <param name="service">The selected service, or null if none was selected.</param>
            <param name="serviceSettings">The settings associated with the selected service. This may be null even if a service is selected.</param>
            <returns>true if a matching service was selected; otherwise, false.</returns>
        </member>
        <member name="P:Microsoft.SemanticKernel.Text.JsonElementJsonSerializerContext.JsonElement">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Text.JsonElementJsonSerializerContext.Default">
            <summary>
            The default <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/> associated with a default <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Text.JsonElementJsonSerializerContext.GeneratedSerializerOptions">
            <summary>
            The source-generated options associated with this context.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Text.JsonElementJsonSerializerContext.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Text.JsonElementJsonSerializerContext.#ctor(System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Text.JsonElementJsonSerializerContext.GetTypeInfo(System.Type)">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.SemanticKernel.Text.MemoryRecordMetadataJsonSerializerContext.Boolean">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Text.MemoryRecordMetadataJsonSerializerContext.MemoryRecordMetadata">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Text.MemoryRecordMetadataJsonSerializerContext.String">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Text.MemoryRecordMetadataJsonSerializerContext.Default">
            <summary>
            The default <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/> associated with a default <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Text.MemoryRecordMetadataJsonSerializerContext.GeneratedSerializerOptions">
            <summary>
            The source-generated options associated with this context.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Text.MemoryRecordMetadataJsonSerializerContext.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Text.MemoryRecordMetadataJsonSerializerContext.#ctor(System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Text.MemoryRecordMetadataJsonSerializerContext.GetTypeInfo(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.Text.DataUriParser">
            <summary>
            Data Uri Scheme Parser based on RFC 2397.
            https://datatracker.ietf.org/doc/html/rfc2397
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Text.DataUriParser.IsBase64String(System.String)">
            <summary>
            Extension method to test whether the value is a base64 string
            </summary>
            <param name="value">Value to test</param>
            <returns>Boolean value, true if the string is base64, otherwise false</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Text.DataUriParser.DataUri">
            <summary>
            Represents the data URI parts.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Text.DataUriParser.DataUri.MimeType">
            <summary>
            The mime type of the data.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Text.DataUriParser.DataUri.Parameters">
            <summary>
            The optional parameters of the data.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Text.DataUriParser.DataUri.DataFormat">
            <summary>
            The optional format of the data. Most common is "base64".
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Text.DataUriParser.DataUri.Data">
            <summary>
            The data content.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Text.ExceptionJsonConverter">
            <summary>
            Serializes an exception as a string. This is useful when serializing an instance of an exception directly or indirectly via serializing an instance that
            references an exception. For example, when serializing chat history that contains FunctionCallContent or FunctionResultContent items referencing an exception.
            Serializing an exception without this converter will throw a System.NotSupportedException: Serialization and deserialization of System.Reflection.MethodBase instances is not supported. Path: $.Items.Exception.TargetSite.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Text.ExceptionJsonConverter.CanConvert(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Text.ExceptionJsonConverter.Write(System.Text.Json.Utf8JsonWriter,System.Object,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Text.ExceptionJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ActivityExtensions.StartActivityWithTags(System.Diagnostics.ActivitySource,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Diagnostics.ActivityKind)">
            <summary>
            Starts an activity with the specified name and tags.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ActivityExtensions.SetTags(System.Diagnostics.Activity,System.ReadOnlySpan{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Adds tags to the activity.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ActivityExtensions.AttachSensitiveDataAsEvent(System.Diagnostics.Activity,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Adds an event to the activity. Should only be used for events that contain sensitive data.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ActivityExtensions.SetError(System.Diagnostics.Activity,System.Exception)">
            <summary>
            Sets the error status and type on the activity.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Verify.NotNull(System.Object,System.String)">
            <summary>
            Equivalent of ArgumentNullException.ThrowIfNull
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Verify.ParametersUniqueness(System.Collections.Generic.IReadOnlyList{Microsoft.SemanticKernel.KernelParameterMetadata})">
            <summary>
            Make sure every function parameter name is unique
            </summary>
            <param name="parameters">List of parameters</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Verify.ValidHostnameSegment(System.String,System.String)">
            <summary>
            Validates that a hostname segment string is safe for use as a URL segment, preventing URL injection.
            </summary>
            <param name="hostNameSegment">The hostname segment string to validate (e.g., 'us-east1', 'europe-west4')</param>
            <param name="paramName">Optional parameter name for the exception</param>
            <exception cref="T:System.ArgumentException">Thrown when the location contains invalid characters or patterns</exception>
        </member>
        <member name="T:Microsoft.SemanticKernel.FunctionName">
            <summary>
            Represents a function name.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.FunctionName.PluginName">
            <summary>
            The plugin name.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.FunctionName.Name">
            <summary>
            The function name.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.FunctionName.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.FunctionName"/> class.
            </summary>
            <param name="name">The function name.</param>
            <param name="pluginName">The plugin name.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.FunctionName.ToFullyQualifiedName(System.String,System.String,System.String)">
            <summary>
            Gets the fully-qualified name of the function.
            </summary>
            <param name="functionName">The function name.</param>
            <param name="pluginName">The plugin name.</param>
            <param name="functionNameSeparator">The function name separator.</param>
            <returns>Fully-qualified name of the function.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.FunctionName.Parse(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.SemanticKernel.FunctionName"/> class.
            </summary>
            <param name="fullyQualifiedName">Fully-qualified name of the function.</param>
            <param name="functionNameSeparator">The function name separator.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.Freezable">
            <summary>
            Represents a freezable object.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Freezable.Freeze">
            <summary>
            Makes the current instance unmodifiable.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Freezable.ThrowIfFrozen">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> if the object is frozen.
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:Microsoft.SemanticKernel.AppContextSwitchHelper">
            <summary>
            Helper class to get app context switch value
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.AppContextSwitchHelper.GetConfigValue(System.String,System.String)">
            <summary>
            Returns the value of the specified app switch or environment variable if it is set.
            If the switch or environment variable is not set, return false.
            The app switch value takes precedence over the environment variable.
            </summary>
            <param name="appContextSwitchName">The name of the app switch.</param>
            <param name="envVarName">The name of the environment variable.</param>
            <returns>The value of the app switch or environment variable if it is set; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.IListExtensions.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds a range of elements from the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/> source to the target <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <param name="target">The target <see cref="T:System.Collections.Generic.IList`1"/> to add elements to.</param>
            <param name="source">The source <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing elements to add to the target <see cref="T:System.Collections.Generic.IList`1"/>.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.InternalTypeConverter">
            <summary>
            Provides internal utility methods for converting types to strings with consideration for CultureInfo.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.InternalTypeConverter.ConvertToString(System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the given object value to a string representation using the appropriate CultureInfo.
            </summary>
            <param name="value">The object to convert.</param>
            <param name="culture">The CultureInfo to consider during conversion.</param>
            <returns>A string representation of the object value, considering the specified CultureInfo.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.InternalTypeConverter.GetTypeToStringConverterDelegate(System.Type)">
            <summary>
            Retrieves a type-to-string converter delegate for the specified source type.
            </summary>
            <param name="sourceType">The source Type for which to retrieve the type-to-string converter delegate.</param>
            <returns>A Func delegate for converting the source type to a string, considering CultureInfo, or null if no suitable converter is found.</returns>
        </member>
        <member name="F:Microsoft.SemanticKernel.InternalTypeConverter.s_converters">
            <summary>Converter functions for converting types to strings.</summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.NonNullCollection`1">
            <summary>
            Provides a collection of non-null items.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.NonNullCollection`1._items">
            <summary>
            The underlying list of items.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.NonNullCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.NonNullCollection`1"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.NonNullCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.NonNullCollection`1"/> class.
            </summary>
            <param name="items">The initial collection of items to populate this collection.</param>
        </member>
        <member name="P:Microsoft.SemanticKernel.NonNullCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index in the collection.
            </summary>
            <param name="index">The index of the item to get or set.</param>
            <returns>The item at the specified index.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index"/> was not valid for this collection.</exception>
        </member>
        <member name="P:Microsoft.SemanticKernel.NonNullCollection`1.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.NonNullCollection`1.Add(`0)">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="item">The item to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is null.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.NonNullCollection`1.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.NonNullCollection`1.Contains(`0)">
            <summary>
            Determines whether an item is in the collection.
            </summary>
            <param name="item">The item to locate.</param>
            <returns>True if the item is found in the collection; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is null.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.NonNullCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies all of the items in the collection to an array, starting at the specified destination array index.
            </summary>
            <param name="array">The destination array into which the items should be copied.</param>
            <param name="arrayIndex">The zero-based index into <paramref name="array"/> at which copying should begin.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The number of items in the collection is greater than the available space from <paramref name="arrayIndex"/> to the end of <paramref name="array"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.NonNullCollection`1.IndexOf(`0)">
            <summary>
            Searches for the specified item and returns the index of the first occurrence.
            </summary>
            <param name="item">The item to locate.</param>
            <returns>The index of the first found occurrence of the specified item; -1 if the item could not be found.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.NonNullCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item into the collection at the specified index.
            </summary>
            <param name="index">The index at which the item should be inserted.</param>
            <param name="item">The item to insert.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is null.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.NonNullCollection`1.Remove(`0)">
            <summary>
            Removes the first occurrence of the specified item from the collection.
            </summary>
            <param name="item">The item to remove from the collection.</param>
            <returns>True if the item was successfully removed; false if it wasn't located in the collection.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is null.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.NonNullCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index from the collection.
            </summary>
            <param name="index">The index of the item to remove.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.TypeConverterFactory">
            <summary>
            Factory for creating TypeConverter instances based on a provided type.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.TypeConverterFactory.GetTypeConverter(System.Type)">
            <summary>
            Returns a TypeConverter instance for the specified type.
            </summary>
            <param name="type">The Type of the object to convert.</param>
            <returns>A TypeConverter instance if a suitable converter is found, otherwise null.</returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.KernelServiceCollectionExtensions">
            <summary>Extension methods for interacting with <see cref="T:Microsoft.SemanticKernel.Kernel"/>.</summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.KernelServiceCollectionExtensions.AddKernel(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>Adds a <see cref="T:Microsoft.SemanticKernel.KernelPluginCollection"/> and <see cref="T:Microsoft.SemanticKernel.Kernel"/> services to the services collection.</summary>
            <param name="services">The service collection.</param>
            <returns>
            A <see cref="T:Microsoft.SemanticKernel.IKernelBuilder"/> that can be used to add additional services to the same <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.
            </returns>
            <remarks>
            Both services are registered as transient, as both objects are mutable.
            </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute">
             <summary>
             Polyfill for the DynamicallyAccessedMembersAttribute not available in .NET Standard 2.0.
             Indicates that certain members on a specified <see cref="T:System.Type"/> are accessed dynamically,
             for example through <see cref="N:System.Reflection"/>.
             </summary>
             <remarks>
             This allows tools to understand which members are being accessed during the execution
             of a program.
            
             This attribute is valid on members whose type is <see cref="T:System.Type"/> or <see cref="T:System.String"/>.
            
             When this attribute is applied to a location of type <see cref="T:System.String"/>, the assumption is
             that the string represents a fully qualified type name.
            
             When this attribute is applied to a class, interface, or struct, the members specified
             can be accessed dynamically on <see cref="T:System.Type"/> instances returned from calling
             <see cref="M:System.Object.GetType"/> on instances of that class, interface, or struct.
            
             If the attribute is applied to a method it's treated as a special case and it implies
             the attribute should be applied to the "this" parameter of the method. As such the attribute
             should only be used on instance methods of types assignable to System.Type (or string, but no methods
             will use it there).
             </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute"/> class
            with the specified member types.
            </summary>
            <param name="memberTypes">The types of members dynamically accessed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute.MemberTypes">
            <summary>
            Gets the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes"/> which specifies the type
            of members dynamically accessed.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes">
             <summary>
             Specifies the types of members that are dynamically accessed.
            
             This enumeration has a <see cref="T:System.FlagsAttribute"/> attribute that allows a
             bitwise combination of its member values.
             </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None">
            <summary>
            Specifies no members.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicParameterlessConstructor">
            <summary>
            Specifies the default, parameterless public constructor.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors">
            <summary>
            Specifies all public constructors.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicConstructors">
            <summary>
            Specifies all non-public constructors.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicMethods">
            <summary>
            Specifies all public methods.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicMethods">
            <summary>
            Specifies all non-public methods.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicFields">
            <summary>
            Specifies all public fields.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicFields">
            <summary>
            Specifies all non-public fields.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicNestedTypes">
            <summary>
            Specifies all public nested types.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicNestedTypes">
            <summary>
            Specifies all non-public nested types.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties">
            <summary>
            Specifies all public properties.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicProperties">
            <summary>
            Specifies all non-public properties.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicEvents">
            <summary>
            Specifies all public events.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicEvents">
            <summary>
            Specifies all non-public events.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.Interfaces">
            <summary>
            Specifies all interfaces implemented by the type.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.All">
            <summary>
            Specifies all members.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute">
            <summary>
             Indicates that an API is experimental and it may change in the future.
            </summary>
            <remarks>
              This attribute allows call sites to be flagged with a diagnostic that indicates that an experimental
              feature is used. Authors can use this attribute to ship preview features in their assemblies.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.#ctor(System.String)">
            <summary>
             Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute"/> class, specifying the ID that the compiler will use
             when reporting a use of the API the attribute applies to.
            </summary>
            <param name="diagnosticId">The ID that the compiler will use when reporting a use of the API the attribute applies to.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.DiagnosticId">
            <summary>
             Gets the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <value>The unique diagnostic ID.</value>
            <remarks>
             The diagnostic ID is shown in build output for warnings and errors.
             <para>This property represents the unique ID that can be used to suppress the warnings or errors, if needed.</para>
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.UrlFormat">
            <summary>
             Gets or sets the URL for corresponding documentation.
             The API accepts a format string instead of an actual URL, creating a generic URL that includes the diagnostic ID.
            </summary>
            <value>The format string that represents a URL to corresponding documentation.</value>
            <remarks>An example format string is <c>https://contoso.com/obsoletion-warnings/{0}</c>.</remarks>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>Specifies that null is allowed as an input even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with the associated parameter name.</summary>
            <param name="parameterName">
            The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>Specifies that the method will not return if the associated Boolean parameter is passed the specified value.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified parameter value.</summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>Gets the condition parameter value.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with a field or property member.</summary>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>Initializes the attribute with the list of field and property members.</summary>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values when returning with the specified return value condition.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>Initializes the attribute with the specified return value condition and a field or property member.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>Initializes the attribute with the specified return value condition and list of field and property members.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute">
            <summary>
            Polyfill for the RequiresDynamicCodeAttribute not available in .NET Standard 2.0.
            Indicates that the specified method requires the ability to generate new code at runtime,
            for example through <see cref="N:System.Reflection"/>.
            </summary>
            <remarks>
            This allows tools to understand which methods are unsafe to call when compiling ahead of time.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute"/> class
            with the specified message.
            </summary>
            <param name="message">
            A message that contains information about the usage of dynamic code.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.Message">
            <summary>
            Gets a message that contains information about the usage of dynamic code.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.Url">
            <summary>
            Gets or sets an optional URL that contains more information about the method,
            why it requires dynamic code, and what options a consumer has to deal with it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute">
            <summary>
            Polyfill for the RequiresUnreferencedCodeAttribute not available in .NET Standard 2.0.
            Indicates that the specified method requires dynamic access to code that is not referenced
            statically, for example through <see cref="N:System.Reflection"/>.
            </summary>
            <remarks>
            This allows tools to understand which methods are unsafe to call when removing unreferenced
            code from an application.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute"/> class
            with the specified message.
            </summary>
            <param name="message">
            A message that contains information about the usage of unreferenced code.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.Message">
            <summary>
            Gets a message that contains information about the usage of unreferenced code.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.Url">
            <summary>
            Gets or sets an optional URL that contains more information about the method,
            why it requires unreferenced code, and what options a consumer has to deal with it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute">
            <summary>
            Polyfill for the UnconditionalSuppressMessageAttribute introduced in .NET 8.0
            Suppresses reporting of a specific rule violation, allowing multiple suppressions on a
            single code artifact.
            </summary>
            <remarks>
            <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute"/> is different than
            <see cref="T:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"/> in that it doesn't have a
            <see cref="T:System.Diagnostics.ConditionalAttribute"/>. So it is always preserved in the compiled assembly.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute"/>
            class, specifying the category of the tool and the identifier for an analysis rule.
            </summary>
            <param name="category">The category for the attribute.</param>
            <param name="checkId">The identifier of the analysis rule the attribute applies to.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category">
            <summary>
            Gets the category identifying the classification of the attribute.
            </summary>
            <remarks>
            The <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category"/> property describes the tool or tool analysis category
            for which a message suppression attribute applies.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.CheckId">
            <summary>
            Gets the identifier of the analysis tool rule to be suppressed.
            </summary>
            <remarks>
            Concatenated together, the <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category"/> and <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.CheckId"/>
            properties form a unique check identifier.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Scope">
            <summary>
            Gets or sets the scope of the code that is relevant for the attribute.
            </summary>
            <remarks>
            The Scope property is an optional argument that specifies the metadata scope for which
            the attribute is relevant.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Target">
            <summary>
            Gets or sets a fully qualified path that represents the target of the attribute.
            </summary>
            <remarks>
            The <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Target"/> property is an optional argument identifying the analysis target
            of the attribute. An example value is "System.IO.Stream.ctor():System.Void".
            Because it is fully qualified, it can be long, particularly for targets such as parameters.
            The analysis tool user interface should be capable of automatically formatting the parameter.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.MessageId">
            <summary>
            Gets or sets an optional argument expanding on exclusion criteria.
            </summary>
            <remarks>
            The <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.MessageId"/> property is an optional argument that specifies additional
            exclusion where the literal metadata target is not sufficiently precise. For example,
            the <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute"/> cannot be applied within a method,
            and it may be desirable to suppress a violation against a statement in the method that will
            give a rule violation, but not against all statements in the method.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Justification">
            <summary>
            Gets or sets the justification for suppressing the code analysis message.
            </summary>
        </member>
        <member name="T:System.Diagnostics.UnreachableException">
            <summary>
            Exception thrown when the program executes an instruction that was thought to be unreachable.
            </summary>
        </member>
        <member name="M:System.Diagnostics.UnreachableException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.UnreachableException"/> class with the default error message.
            </summary>
        </member>
        <member name="M:System.Diagnostics.UnreachableException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.UnreachableException"/>
            class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:System.Diagnostics.UnreachableException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.UnreachableException"/>
            class with a specified error message and a reference to the inner exception that is the cause of
            this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:System.ExceptionExtensions">
            <summary>
            Exception extension methods.
            </summary>
        </member>
        <member name="M:System.ExceptionExtensions.IsCriticalException(System.Exception)">
            <summary>
            Check if an exception is of a type that should not be caught by the kernel.
            </summary>
            <param name="ex">Exception.</param>
            <returns>True if <paramref name="ex"/> is a critical exception and should not be caught.</returns>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AnyAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Determines whether any element of an async-enumerable sequence satisfies a condition.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence whose elements to apply the predicate to.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element determining whether any elements in the source sequence pass the test in the specified predicate.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="predicate"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SelectAsync``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Projects each element of an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> into a new form by incorporating
            an asynchronous transformation function.
            </summary>
            <typeparam name="TSource">The type of the elements of the source sequence.</typeparam>
            <typeparam name="TResult">The type of the elements of the resulting sequence.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> to invoke a transform function on.</param>
            <param name="selector">
            A transform function to apply to each element. This function takes an element of
            type TSource and returns an element of type TResult.
            </param>
            <param name="cancellationToken">
            A CancellationToken to observe while iterating through the sequence.
            </param>
            <returns>
            An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> whose elements are the result of invoking the transform
            function on each element of the original sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the source or selector is null.</exception>
        </member>
        <member name="M:System.EnvExtensions.GetBoolEnvVar(System.String)">
            <summary>
            Source: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/src/DiagnosticsOptions.cs
            Values: https://learn.microsoft.com/en-us/dotnet/api/azure.core.diagnosticsoptions.istelemetryenabled?view=azure-dotnet
            </summary>
        </member>
    </members>
</doc>
