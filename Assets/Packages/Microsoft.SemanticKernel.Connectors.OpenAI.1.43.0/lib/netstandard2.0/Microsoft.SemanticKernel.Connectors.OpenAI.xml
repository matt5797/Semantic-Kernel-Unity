<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.SemanticKernel.Connectors.OpenAI</name>
    </assembly>
    <members>
        <member name="T:Microsoft.SemanticKernel.Connectors.OpenAI.ClientCore">
            <summary>
            Base class for AI clients that provides common functionality for interacting with OpenAI services.
            </summary>
            <summary>
            Base class for AI clients that provides common functionality for interacting with OpenAI services.
            </summary>
            <summary>
            Base class for AI clients that provides common functionality for interacting with OpenAI services.
            </summary>
            <summary>
            Base class for AI clients that provides common functionality for interacting with OpenAI services.
            </summary>
            <summary>
            Base class for AI clients that provides common functionality for interacting with OpenAI services.
            </summary>
            <summary>
            Base class for AI clients that provides common functionality for interacting with OpenAI services.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.ClientCore.GetTextFromAudioContentsAsync(System.String,Microsoft.SemanticKernel.AudioContent,Microsoft.SemanticKernel.PromptExecutionSettings,System.Threading.CancellationToken)">
            <summary>
            Generates an image with the provided configuration.
            </summary>
            <param name="targetModel">Model identifier</param>
            <param name="input">Input audio to generate the text</param>
            <param name="executionSettings">Audio-to-text execution settings for the prompt</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>Url of the generated image</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.ClientCore.AudioOptionsFromExecutionSettings(Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIAudioToTextExecutionSettings)">
            <summary>
            Converts <see cref="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIAudioToTextExecutionSettings"/> to <see cref="T:OpenAI.Audio.AudioTranscriptionOptions"/> type.
            </summary>
            <param name="executionSettings">Instance of <see cref="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIAudioToTextExecutionSettings"/>.</param>
            <returns>Instance of <see cref="T:OpenAI.Audio.AudioTranscriptionOptions"/>.</returns>
        </member>
        <member name="F:Microsoft.SemanticKernel.Connectors.OpenAI.ClientCore.MaxInflightAutoInvokes">
            <summary>
            The maximum number of auto-invokes that can be in-flight at any given time as part of the current
            asynchronous chain of execution.
            </summary>
            <remarks>
            This is a fail-safe mechanism. If someone accidentally manages to set up execution settings in such a way that
            auto-invocation is invoked recursively, and in particular where a prompt function is able to auto-invoke itself,
            we could end up in an infinite loop. This const is a backstop against that happening. We should never come close
            to this limit, but if we do, auto-invoke will be disabled for the current flow in order to prevent runaway execution.
            With the current setup, the way this could possibly happen is if a prompt function is configured with built-in
            execution settings that opt-in to auto-invocation of everything in the kernel, in which case the invocation of that
            prompt function could advertize itself as a candidate for auto-invocation. We don't want to outright block that,
            if that's something a developer has asked to do (e.g. it might be invoked with different arguments than its parent
            was invoked with), but we do want to limit it. This limit is arbitrary and can be tweaked in the future and/or made
            configurable should need arise.
            </remarks>
        </member>
        <member name="F:Microsoft.SemanticKernel.Connectors.OpenAI.ClientCore.s_nonInvocableFunctionTool">
            <summary>Singleton tool used when tool call count drops to 0 but we need to supply tools to keep the service happy.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Connectors.OpenAI.ClientCore.s_meter">
            <summary>
            Instance of <see cref="T:System.Diagnostics.Metrics.Meter"/> for metrics.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Connectors.OpenAI.ClientCore.s_promptTokensCounter">
            <summary>
            Instance of <see cref="T:System.Diagnostics.Metrics.Counter`1"/> to keep track of the number of prompt tokens used.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Connectors.OpenAI.ClientCore.s_completionTokensCounter">
            <summary>
            Instance of <see cref="T:System.Diagnostics.Metrics.Counter`1"/> to keep track of the number of completion tokens used.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Connectors.OpenAI.ClientCore.s_totalTokensCounter">
            <summary>
            Instance of <see cref="T:System.Diagnostics.Metrics.Counter`1"/> to keep track of the total number of tokens used.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.ClientCore.GetChatMessageContentsAsync(System.String,Microsoft.SemanticKernel.ChatCompletion.ChatHistory,Microsoft.SemanticKernel.PromptExecutionSettings,Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <summary>
            Generate a new chat message
            </summary>
            <param name="targetModel">Model identifier</param>
            <param name="chatHistory">Chat history</param>
            <param name="executionSettings">Execution settings for the completion API.</param>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="cancellationToken">Async cancellation token</param>
            <returns>Generated chat message in string format</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.ClientCore.GetSpecializedExecutionSettings(Microsoft.SemanticKernel.PromptExecutionSettings)">
            <summary>
            Returns a specialized execution settings object for the OpenAI chat completion service.
            </summary>
            <param name="executionSettings">Potential execution settings infer specialized.</param>
            <returns>Specialized settings</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.ClientCore.StartCompletionActivity(Microsoft.SemanticKernel.ChatCompletion.ChatHistory,Microsoft.SemanticKernel.PromptExecutionSettings)">
            <summary>
            Start a chat completion activity for a given model.
            The activity will be tagged with the a set of attributes specified by the semantic conventions.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.ClientCore.GetResponseFormat(Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIPromptExecutionSettings)">
            <summary>
            Retrieves the response format based on the provided settings.
            </summary>
            <param name="executionSettings">Execution settings.</param>
            <returns>Chat response format</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.ClientCore.IsRequestableTool(System.Collections.Generic.IList{OpenAI.Chat.ChatTool},Microsoft.SemanticKernel.FunctionCallContent)">
            <summary>Checks if a tool call is for a function that was defined.</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.ClientCore.CreateNewChat(System.String,Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIPromptExecutionSettings,System.Nullable{Microsoft.SemanticKernel.ChatCompletion.AuthorRole})">
            <summary>
            Create a new empty chat instance
            </summary>
            <param name="text">Optional chat instructions for the AI service</param>
            <param name="executionSettings">Execution settings</param>
            <param name="textRole">Indicates what will be the role of the text. Defaults to system role prompt</param>
            <returns>Chat object</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.ClientCore.LogUsage(OpenAI.Chat.ChatTokenUsage)">
            <summary>
            Captures usage details, including token information.
            </summary>
            <param name="usage">Instance of <see cref="T:OpenAI.Chat.ChatTokenUsage"/> with token usage details.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.ClientCore.ProcessNonFunctionToolCalls(System.Collections.Generic.IEnumerable{OpenAI.Chat.ChatToolCall},Microsoft.SemanticKernel.ChatCompletion.ChatHistory)">
            <summary>
            Processes non-function tool calls.
            </summary>
            <param name="toolCalls">All tool calls requested by AI model.</param>
            <param name="chatHistory">The chat history.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.ClientCore.SanitizeFunctionNames(System.Collections.Generic.List{OpenAI.Chat.ChatToolCall})">
            <summary>
            Sanitizes function names by replacing disallowed characters.
            </summary>
            <param name="toolCalls">The function calls containing the function names which need to be sanitized.</param>
            <returns>The function calls with sanitized function names.</returns>
        </member>
        <member name="F:Microsoft.SemanticKernel.Connectors.OpenAI.ClientCore.SingleSpace">
            <summary>
            White space constant.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Connectors.OpenAI.ClientCore.OrganizationKey">
            <summary>
            Gets the attribute name used to store the organization in the <see cref="P:Microsoft.SemanticKernel.Services.IAIService.Attributes"/> dictionary.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Connectors.OpenAI.ClientCore.OpenAIV1Endpoint">
            <summary>
            Default OpenAI API endpoint.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.ClientCore.ModelId">
            <summary>
            Identifier of the default model to use
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.ClientCore.Endpoint">
            <summary>
            Non-default endpoint for OpenAI API.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.ClientCore.Logger">
            <summary>
            Logger instance
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.ClientCore.Client">
            <summary>
            OpenAI Client
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.ClientCore.Attributes">
            <summary>
            Storage for AI service attributes.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.ClientCore.FunctionCallsProcessor">
            <summary>
            The function calls processor.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.ClientCore.#ctor(System.String,System.String,System.String,System.Uri,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Connectors.OpenAI.ClientCore"/> class.
            </summary>
            <param name="modelId">Model name.</param>
            <param name="apiKey">OpenAI API Key.</param>
            <param name="organizationId">OpenAI Organization Id (usually optional).</param>
            <param name="endpoint">OpenAI compatible API endpoint.</param>
            <param name="httpClient">Custom <see cref="T:System.Net.Http.HttpClient"/> for HTTP requests.</param>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> to use for logging. If null, no logging will be performed.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.ClientCore.#ctor(System.String,OpenAI.OpenAIClient,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Connectors.OpenAI.ClientCore"/> class using the specified OpenAIClient.
            Note: instances created this way might not have the default diagnostics settings,
            it's up to the caller to configure the client.
            </summary>
            <param name="modelId">OpenAI model Id</param>
            <param name="openAIClient">Custom <see cref="T:OpenAI.OpenAIClient"/>.</param>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> to use for logging. If null, no logging will be performed.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.ClientCore.LogActionDetails(System.String)">
            <summary>
            Logs OpenAI action details.
            </summary>
            <param name="callerMemberName">Caller member name. Populated automatically by runtime.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.ClientCore.AddAttribute(System.String,System.String)">
            <summary>
            Allows adding attributes to the client.
            </summary>
            <param name="key">Attribute key.</param>
            <param name="value">Attribute value.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.ClientCore.GetOpenAIClientOptions(System.Net.Http.HttpClient,System.Uri)">
            <summary>Gets options to use for an OpenAIClient</summary>
            <param name="httpClient">Custom <see cref="T:System.Net.Http.HttpClient"/> for HTTP requests.</param>
            <param name="endpoint">Endpoint for the OpenAI API.</param>
            <returns>An instance of <see cref="T:OpenAI.OpenAIClientOptions"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.ClientCore.GetClientModelId">
            <summary>
            Gets the model identifier to use for the client.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.ClientCore.RunRequestAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Invokes the specified request and handles exceptions.
            </summary>
            <typeparam name="T">Type of the response.</typeparam>
            <param name="request">Request to invoke.</param>
            <returns>Returns the response.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.ClientCore.RunRequest``1(System.Func{``0})">
            <summary>
            Invokes the specified request and handles exceptions.
            </summary>
            <typeparam name="T">Type of the response.</typeparam>
            <param name="request">Request to invoke.</param>
            <returns>Returns the response.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.ClientCore.GetEmbeddingsAsync(System.String,System.Collections.Generic.IList{System.String},Microsoft.SemanticKernel.Kernel,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Generates an embedding from the given <paramref name="data"/>.
            </summary>
            <param name="targetModel">Target model to generate embeddings from</param>
            <param name="data">List of strings to generate embeddings for</param>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="dimensions">The number of dimensions the resulting output embeddings should have. Only supported in "text-embedding-3" and later models.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>List of embeddings</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.ClientCore.GetAudioContentsAsync(System.String,System.String,Microsoft.SemanticKernel.PromptExecutionSettings,System.Threading.CancellationToken)">
            <summary>
            Generates an image with the provided configuration.
            </summary>
            <param name="targetModel">Model identifier</param>
            <param name="prompt">Prompt to generate the image</param>
            <param name="executionSettings">Text to Audio execution settings for the prompt</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>Url of the generated image</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.ClientCore.GenerateImageAsync(System.String,System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Generates an image with the provided configuration.
            </summary>
            <param name="targetModel">Model identifier</param>
            <param name="prompt">Prompt to generate the image</param>
            <param name="width">Width of the image</param>
            <param name="height">Height of the image</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>Url of the generated image</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.ClientCore.GetImageContentsAsync(System.String,Microsoft.SemanticKernel.TextContent,Microsoft.SemanticKernel.PromptExecutionSettings,Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <summary>
            Generates an image with the provided configuration.
            </summary>
            <param name="targetModel">Model identifier</param>
            <param name="input">The input text content to generate the image</param>
            <param name="executionSettings">Execution settings for the image generation</param>
            <param name="kernel">Kernel instance</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of image generated contents</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIChatMessageContent">
            <summary>
            OpenAI specialized chat message content
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIChatMessageContent.ToolIdProperty">
            <summary>
            Gets the metadata key for the tool id.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIChatMessageContent.FunctionToolCallsProperty">
            <summary>
            Gets the metadata key for the list of <see cref="T:OpenAI.Chat.ChatToolCall"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIChatMessageContent.#ctor(OpenAI.Chat.ChatCompletion,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIChatMessageContent"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIChatMessageContent.#ctor(OpenAI.Chat.ChatMessageRole,System.String,System.String,System.Collections.Generic.IReadOnlyList{OpenAI.Chat.ChatToolCall},System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIChatMessageContent"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIChatMessageContent.#ctor(Microsoft.SemanticKernel.ChatCompletion.AuthorRole,System.String,System.String,System.Collections.Generic.IReadOnlyList{OpenAI.Chat.ChatToolCall},System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIChatMessageContent"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIChatMessageContent.ToolCalls">
            <summary>
            A list of the tools called by the model.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIChatMessageContent.GetOpenAIFunctionToolCalls">
            <summary>
            Retrieve the resulting function from the chat result.
            </summary>
            <returns>The <see cref="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunctionToolCall"/>, or null if no function was returned by the model.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunctionParameter">
            <summary>
            Represents a function parameter that can be passed to an OpenAI function tool call.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunctionParameter.Name">
            <summary>Gets the name of the parameter.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunctionParameter.Description">
            <summary>Gets a description of the parameter.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunctionParameter.IsRequired">
            <summary>Gets whether the parameter is required vs optional.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunctionParameter.ParameterType">
            <summary>Gets the <see cref="T:System.Type"/> of the parameter, if known.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunctionParameter.Schema">
            <summary>Gets a JSON schema for the parameter, if known.</summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunctionReturnParameter">
            <summary>
            Represents a function return parameter that can be returned by a tool call to OpenAI.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunctionReturnParameter.Description">
            <summary>Gets a description of the return parameter.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunctionReturnParameter.ParameterType">
            <summary>Gets the <see cref="T:System.Type"/> of the return parameter, if known.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunctionReturnParameter.Schema">
            <summary>Gets a JSON schema for the return parameter, if known.</summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunction">
            <summary>
            Represents a function that can be passed to the OpenAI API
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunction.s_zeroFunctionParametersSchema">
            <summary>
            Cached <see cref="T:System.BinaryData"/> storing the JSON for a function with no parameters.
            </summary>
            <remarks>
            This is an optimization to avoid serializing the same JSON Schema over and over again
            for this relatively common case.
            </remarks>
        </member>
        <member name="F:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunction.s_zeroFunctionParametersSchema_strict">
            <summary>
            Same as above, but with additionalProperties: false for strict mode.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunction.s_stringNoDescriptionSchema">
            <summary>
            Cached schema for a descriptionless string.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunction.s_stringNoDescriptionSchemaAndNull">
            <summary>
            Cached schema for a descriptionless string that's nullable.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunction.#ctor(System.String,System.String,System.String,System.Collections.Generic.IReadOnlyList{Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunctionParameter},Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunctionReturnParameter)">
            <summary>Initializes the OpenAIFunction.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunction.NameSeparator">
            <summary>Gets the separator used between the plugin name and the function name, if a plugin name is present.</summary>
            <remarks>This separator was previously <c>_</c>, but has been changed to <c>-</c> to better align to the behavior elsewhere in SK and in response
            to developers who want to use underscores in their function or plugin names. We plan to make this setting configurable in the future.</remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunction.PluginName">
            <summary>Gets the name of the plugin with which the function is associated, if any.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunction.FunctionName">
            <summary>Gets the name of the function.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunction.FullyQualifiedName">
            <summary>Gets the fully-qualified name of the function.</summary>
            <remarks>
            This is the concatenation of the <see cref="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunction.PluginName"/> and the <see cref="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunction.FunctionName"/>,
            separated by <see cref="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunction.NameSeparator"/>. If there is no <see cref="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunction.PluginName"/>, this is
            the same as <see cref="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunction.FunctionName"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunction.Description">
            <summary>Gets a description of the function.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunction.Parameters">
            <summary>Gets a list of parameters to the function, if any.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunction.ReturnParameter">
            <summary>Gets the return parameter of the function, if any.</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunction.ToFunctionDefinition">
            <summary>
            Converts the <see cref="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunction"/> representation to the OpenAI SDK's
            <see cref="T:OpenAI.Chat.ChatTool"/> representation.
            </summary>
            <returns>A <see cref="T:OpenAI.Chat.ChatTool"/> containing all the function information.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunction.ToFunctionDefinition(System.Boolean)">
            <summary>
            Converts the <see cref="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunction"/> representation to the OpenAI SDK's
            <see cref="T:OpenAI.Chat.ChatTool"/> representation.
            </summary>
            <returns>A <see cref="T:OpenAI.Chat.ChatTool"/> containing all the function information.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunction.GetDefaultSchemaForTypelessParameter(System.String,System.Boolean)">
            <summary>Gets a <see cref="T:Microsoft.SemanticKernel.KernelJsonSchema"/> for a typeless parameter with the specified description, defaulting to typeof(string)</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunction.GetOptionalStringSchemaWithDescription(System.String)">
            <summary>
            Gets a <see cref="T:Microsoft.SemanticKernel.KernelJsonSchema"/> for a typeless parameter with the specified description, type string, and nullable.
            </summary>
            <param name="description">The description for the parameter.</param>
            <returns>The generated schema</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunction.GetSanitizedSchemaForStrictMode(Microsoft.SemanticKernel.KernelJsonSchema,System.Boolean)">
            <summary>
            Removes forbidden keywords from the schema and adds null to the types if required.
            For more information <see cref="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunction.InsertNullTypeIfRequired(System.Boolean,System.Text.Json.Nodes.JsonObject)"/> and <see cref="F:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunction.s_forbiddenKeywords"/>.
            </summary>
            <param name="schema">Kernel JSON schema for the parameter to sanitize.</param>
            <param name="insertNullType">Whether a null type should be added to optional parameters.</param>
            <returns>The sanitized schema compatible with strict mode.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunction.InsertNullTypeIfRequired(System.Boolean,System.Text.Json.Nodes.JsonObject)">
            <summary>
            Inserts null to the types if required or when nullable is true. Strict mode enforces setting all parameters as required when some are optional.
            The suggested approach is to add null to the types when they are optional so the model doesn't add random default values.
            </summary>
            <remarks>
            Documentation to the required behavior <see href="https://platform.openai.com/docs/guides/structured-outputs#all-fields-must-be-required"/>
            </remarks>
            <param name="insertNullType">Whether null should be inserted</param>
            <param name="jsonObject">The parsed JSON schema</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunction.NormalizeAdditionalProperties(System.Text.Json.Nodes.JsonObject)">
            <summary>
            Adds additional properties to false to any object schema type.
            </summary>
            <remarks>
            Strict mode requires to always provide additional properties and set it to false on object schemas.
            </remarks>
            <param name="jsonObject">The schema object to update</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunction.MakeAllPropertiesRequired(System.Text.Json.Nodes.JsonObject)">
            <summary>
            Makes all properties required in the schema.
            </summary>
            <remarks>
            strict mode requires all properties of an object to be required.
            </remarks>
            <param name="jsonObject">The schema object to update</param>
        </member>
        <member name="F:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunction.s_forbiddenKeywords">
            <summary>
            List of keywords that are not supported in the OpenAI API.
            This list is based on the OpenAI documentation.
            See <see href="https://platform.openai.com/docs/guides/structured-outputs#some-type-specific-keywords-are-not-yet-supported"/>.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunctionToolCall">
            <summary>
            Represents an OpenAI function tool call with deserialized function name and arguments.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunctionToolCall.#ctor(OpenAI.Chat.ChatToolCall)">
            <summary>Initialize the <see cref="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunctionToolCall"/> from a <see cref="T:OpenAI.Chat.ChatToolCall"/>.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunctionToolCall.Id">
            <summary>Gets the ID of the tool call.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunctionToolCall.PluginName">
            <summary>Gets the name of the plugin with which this function is associated, if any.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunctionToolCall.FunctionName">
            <summary>Gets the name of the function.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunctionToolCall.Arguments">
            <summary>Gets a name/value collection of the arguments to the function, if any.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunctionToolCall.FullyQualifiedName">
            <summary>Gets the fully-qualified name of the function.</summary>
            <remarks>
            This is the concatenation of the <see cref="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunctionToolCall.PluginName"/> and the <see cref="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunctionToolCall.FunctionName"/>,
            separated by <see cref="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunction.NameSeparator"/>. If there is no <see cref="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunctionToolCall.PluginName"/>,
            this is the same as <see cref="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunctionToolCall.FunctionName"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunctionToolCall.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunctionToolCall.TrackStreamingToolingUpdate(System.Collections.Generic.IReadOnlyList{OpenAI.Chat.StreamingChatToolCallUpdate},System.Collections.Generic.Dictionary{System.Int32,System.String}@,System.Collections.Generic.Dictionary{System.Int32,System.String}@,System.Collections.Generic.Dictionary{System.Int32,System.Text.StringBuilder}@)">
            <summary>
            Tracks tooling updates from streaming responses.
            </summary>
            <param name="updates">The tool call updates to incorporate.</param>
            <param name="toolCallIdsByIndex">Lazily-initialized dictionary mapping indices to IDs.</param>
            <param name="functionNamesByIndex">Lazily-initialized dictionary mapping indices to names.</param>
            <param name="functionArgumentBuildersByIndex">Lazily-initialized dictionary mapping indices to arguments.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunctionToolCall.ConvertToolCallUpdatesToFunctionToolCalls(System.Collections.Generic.Dictionary{System.Int32,System.String}@,System.Collections.Generic.Dictionary{System.Int32,System.String}@,System.Collections.Generic.Dictionary{System.Int32,System.Text.StringBuilder}@)">
            <summary>
            Converts the data built up by <see cref="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunctionToolCall.TrackStreamingToolingUpdate(System.Collections.Generic.IReadOnlyList{OpenAI.Chat.StreamingChatToolCallUpdate},System.Collections.Generic.Dictionary{System.Int32,System.String}@,System.Collections.Generic.Dictionary{System.Int32,System.String}@,System.Collections.Generic.Dictionary{System.Int32,System.Text.StringBuilder}@)"/> into an array of <see cref="T:OpenAI.Chat.ChatToolCall"/>s.
            </summary>
            <param name="toolCallIdsByIndex">Dictionary mapping indices to IDs.</param>
            <param name="functionNamesByIndex">Dictionary mapping indices to names.</param>
            <param name="functionArgumentBuildersByIndex">Dictionary mapping indices to arguments.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIStreamingChatMessageContent">
            <summary>
            OpenAI specialized streaming chat message content.
            </summary>
            <remarks>
            Represents a chat message content chunk that was streamed from the remote model.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIStreamingChatMessageContent.FinishReason">
            <summary>
            The reason why the completion finished.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIStreamingChatMessageContent.#ctor(OpenAI.Chat.StreamingChatCompletionUpdate,System.Int32,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Create a new instance of the <see cref="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIStreamingChatMessageContent"/> class.
            </summary>
            <param name="chatUpdate">Internal OpenAI SDK Message update representation</param>
            <param name="choiceIndex">Index of the choice</param>
            <param name="modelId">The model ID used to generate the content</param>
            <param name="metadata">Additional metadata</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIStreamingChatMessageContent.#ctor(System.Nullable{Microsoft.SemanticKernel.ChatCompletion.AuthorRole},System.String,System.Collections.Generic.IReadOnlyList{OpenAI.Chat.StreamingChatToolCallUpdate},System.Nullable{OpenAI.Chat.ChatFinishReason},System.Int32,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Create a new instance of the <see cref="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIStreamingChatMessageContent"/> class.
            </summary>
            <param name="authorRole">Author role of the message</param>
            <param name="content">Content of the message</param>
            <param name="toolCallUpdates">Tool call updates</param>
            <param name="completionsFinishReason">Completion finish reason</param>
            <param name="choiceIndex">Index of the choice</param>
            <param name="modelId">The model ID used to generate the content</param>
            <param name="metadata">Additional metadata</param>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIStreamingChatMessageContent.ToolCallUpdates">
            <summary>Gets any update information in the message about a tool call.</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIStreamingChatMessageContent.ToByteArray">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIStreamingChatMessageContent.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIKernelFunctionMetadataExtensions">
            <summary>
            Extensions for <see cref="T:Microsoft.SemanticKernel.KernelFunctionMetadata"/> specific to the OpenAI connector.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIKernelFunctionMetadataExtensions.ToOpenAIFunction(Microsoft.SemanticKernel.KernelFunctionMetadata)">
            <summary>
            Convert a <see cref="T:Microsoft.SemanticKernel.KernelFunctionMetadata"/> to an <see cref="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunctionParameter"/>.
            </summary>
            <param name="metadata">The <see cref="T:Microsoft.SemanticKernel.KernelFunctionMetadata"/> object to convert.</param>
            <returns>An <see cref="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunction"/> object.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIMemoryBuilderExtensions">
            <summary>
            Provides extension methods for the <see cref="T:Microsoft.SemanticKernel.Memory.MemoryBuilder"/> class to configure OpenAI connector.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIMemoryBuilderExtensions.WithOpenAITextEmbeddingGeneration(Microsoft.SemanticKernel.Memory.MemoryBuilder,System.String,System.String,System.String,System.Net.Http.HttpClient,System.Nullable{System.Int32})">
            <summary>
            Adds the OpenAI text embeddings service.
            See https://platform.openai.com/docs for service details.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.SemanticKernel.Memory.MemoryBuilder"/> instance</param>
            <param name="modelId">OpenAI model name, see https://platform.openai.com/docs/models</param>
            <param name="apiKey">OpenAI API key, see https://platform.openai.com/account/api-keys</param>
            <param name="orgId">OpenAI organization id. This is usually optional unless your account belongs to multiple organizations.</param>
            <param name="httpClient">Custom <see cref="T:System.Net.Http.HttpClient"/> for HTTP requests.</param>
            <param name="dimensions">The number of dimensions the resulting output embeddings should have. Only supported in "text-embedding-3" and later models.</param>
            <returns>Self instance</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIPluginCollectionExtensions">
            <summary>
            Extension methods for <see cref="T:Microsoft.SemanticKernel.IReadOnlyKernelPluginCollection"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIPluginCollectionExtensions.TryGetFunctionAndArguments(Microsoft.SemanticKernel.IReadOnlyKernelPluginCollection,OpenAI.Chat.ChatToolCall,Microsoft.SemanticKernel.KernelFunction@,Microsoft.SemanticKernel.KernelArguments@)">
            <summary>
            Given an <see cref="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunctionToolCall"/> object, tries to retrieve the corresponding <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> and populate <see cref="T:Microsoft.SemanticKernel.KernelArguments"/> with its parameters.
            </summary>
            <param name="plugins">The plugins.</param>
            <param name="functionToolCall">The <see cref="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunctionToolCall"/> object.</param>
            <param name="function">When this method returns, the function that was retrieved if one with the specified name was found; otherwise, <see langword="null"/></param>
            <param name="arguments">When this method returns, the arguments for the function; otherwise, <see langword="null"/></param>
            <returns><see langword="true"/> if the function was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIPluginCollectionExtensions.TryGetFunctionAndArguments(Microsoft.SemanticKernel.IReadOnlyKernelPluginCollection,Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunctionToolCall,Microsoft.SemanticKernel.KernelFunction@,Microsoft.SemanticKernel.KernelArguments@)">
            <summary>
            Given an <see cref="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunctionToolCall"/> object, tries to retrieve the corresponding <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> and populate <see cref="T:Microsoft.SemanticKernel.KernelArguments"/> with its parameters.
            </summary>
            <param name="plugins">The plugins.</param>
            <param name="functionToolCall">The <see cref="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunctionToolCall"/> object.</param>
            <param name="function">When this method returns, the function that was retrieved if one with the specified name was found; otherwise, <see langword="null"/></param>
            <param name="arguments">When this method returns, the arguments for the function; otherwise, <see langword="null"/></param>
            <returns><see langword="true"/> if the function was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIChatResponseFormatBuilder">
            <summary>
            Helper class to build <see cref="T:OpenAI.Chat.ChatResponseFormat"/> object.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIChatResponseFormatBuilder.s_jsonSchemaCreateOptions">
            <summary>
            <see cref="T:Microsoft.Extensions.AI.AIJsonSchemaCreateOptions"/> for JSON schema format for structured outputs.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIChatResponseFormatBuilder.GetJsonSchemaResponseFormat(System.Text.Json.JsonElement)">
            <summary>
            Gets instance of <see cref="T:OpenAI.Chat.ChatResponseFormat"/> object for JSON schema format for structured outputs from <see cref="T:System.Text.Json.JsonElement"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIChatResponseFormatBuilder.GetJsonSchemaResponseFormat(System.Type)">
            <summary>
            Gets instance of <see cref="T:OpenAI.Chat.ChatResponseFormat"/> object for JSON schema format for structured outputs from type.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIChatResponseFormatBuilder.GetTypeName(System.Type)">
            <summary>
            Returns a type name concatenated with generic argument type names if they exist.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFilePurpose">
            <summary>
            Defines the purpose associated with the uploaded file:
            https://platform.openai.com/docs/api-reference/files/object#files/object-purpose
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFilePurpose.Assistants">
            <summary>
            File to be used by assistants as input.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFilePurpose.AssistantsOutput">
            <summary>
            File produced as assistants output.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFilePurpose.Batch">
            <summary>
            Files uploaded as a batch of API requests
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFilePurpose.BatchOutput">
            <summary>
            File produced as result of a file included as a batch request.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFilePurpose.FineTune">
            <summary>
            File to be used as input to fine-tune a model.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFilePurpose.FineTuneResults">
            <summary>
            File produced as result of fine-tuning a model.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFilePurpose.Vision">
            <summary>
            File to be used for Assistants image file inputs.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFilePurpose.Label">
            <summary>
            Gets the label associated with this <see cref="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFilePurpose"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFilePurpose.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFilePurpose"/> instance with the provided label.
            </summary>
            <param name="label">The label to associate with this <see cref="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFilePurpose"/>.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFilePurpose.op_Equality(Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFilePurpose,Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFilePurpose)">
            <summary>
            Returns a value indicating whether two <see cref="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFilePurpose"/> instances are equivalent, as determined by a
            case-insensitive comparison of their labels.
            </summary>
            <param name="left"> the first <see cref="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFilePurpose"/> instance to compare </param>
            <param name="right"> the second <see cref="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFilePurpose"/> instance to compare </param>
            <returns> true if left and right are both null or have equivalent labels; false otherwise </returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFilePurpose.op_Inequality(Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFilePurpose,Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFilePurpose)">
            <summary>
            Returns a value indicating whether two <see cref="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFilePurpose"/> instances are not equivalent, as determined by a
            case-insensitive comparison of their labels.
            </summary>
            <param name="left"> the first <see cref="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFilePurpose"/> instance to compare </param>
            <param name="right"> the second <see cref="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFilePurpose"/> instance to compare </param>
            <returns> false if left and right are both null or have equivalent labels; true otherwise </returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFilePurpose.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFilePurpose.Equals(Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFilePurpose)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFilePurpose.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFilePurpose.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFileReference">
            <summary>
            References an uploaded file by id.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFileReference.Id">
            <summary>
            The file identifier.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFileReference.CreatedTimestamp">
            <summary>
            The timestamp the file was uploaded.s
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFileReference.FileName">
            <summary>
            The name of the file.s
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFileReference.Purpose">
            <summary>
            Describes the associated purpose of the file.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFileReference.SizeInBytes">
            <summary>
            The file size, in bytes.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIAudioToTextService">
            <summary>
            OpenAI text-to-audio service.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIAudioToTextService._client">
            <summary>
            OpenAI text-to-audio client for HTTP operations.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIAudioToTextService.Attributes">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIAudioToTextService.#ctor(System.String,System.String,System.String,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIAudioToTextService"/> class.
            </summary>
            <param name="modelId">Model name</param>
            <param name="apiKey">OpenAI API Key</param>
            <param name="organization">OpenAI Organization Id (usually optional)</param>
            <param name="httpClient">Custom <see cref="T:System.Net.Http.HttpClient"/> for HTTP requests.</param>
            <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> to use for logging. If null, no logging will be performed.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIAudioToTextService.#ctor(System.String,OpenAI.OpenAIClient,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIAudioToTextService"/> class.
            </summary>
            <param name="modelId">Model name</param>
            <param name="openAIClient">Custom <see cref="T:OpenAI.OpenAIClient"/> for HTTP requests.</param>
            <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> to use for logging. If null, no logging will be performed.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIAudioToTextService.GetTextContentsAsync(Microsoft.SemanticKernel.AudioContent,Microsoft.SemanticKernel.PromptExecutionSettings,Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIChatCompletionService">
            <summary>
            OpenAI chat completion service.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIChatCompletionService._client">
            <summary>Core implementation shared by OpenAI clients.</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIChatCompletionService.#ctor(System.String,System.String,System.String,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Create an instance of the OpenAI chat completion connector
            </summary>
            <param name="modelId">Model name</param>
            <param name="apiKey">OpenAI API Key</param>
            <param name="organization">OpenAI Organization Id (usually optional)</param>
            <param name="httpClient">Custom <see cref="T:System.Net.Http.HttpClient"/> for HTTP requests.</param>
            <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> to use for logging. If null, no logging will be performed.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIChatCompletionService.#ctor(System.String,System.Uri,System.String,System.String,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Create an instance of the Custom Message API OpenAI chat completion connector
            </summary>
            <param name="modelId">Model name</param>
            <param name="endpoint">Custom Message API compatible endpoint</param>
            <param name="apiKey">OpenAI API Key</param>
            <param name="organization">OpenAI Organization Id (usually optional)</param>
            <param name="httpClient">Custom <see cref="T:System.Net.Http.HttpClient"/> for HTTP requests.</param>
            <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> to use for logging. If null, no logging will be performed.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIChatCompletionService.#ctor(System.String,OpenAI.OpenAIClient,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Create an instance of the OpenAI chat completion connector
            </summary>
            <param name="modelId">Model name</param>
            <param name="openAIClient">Custom <see cref="T:OpenAI.OpenAIClient"/> for HTTP requests.</param>
            <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> to use for logging. If null, no logging will be performed.</param>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIChatCompletionService.Attributes">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIChatCompletionService.GetChatMessageContentsAsync(Microsoft.SemanticKernel.ChatCompletion.ChatHistory,Microsoft.SemanticKernel.PromptExecutionSettings,Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIChatCompletionService.GetStreamingChatMessageContentsAsync(Microsoft.SemanticKernel.ChatCompletion.ChatHistory,Microsoft.SemanticKernel.PromptExecutionSettings,Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIChatCompletionService.GetTextContentsAsync(System.String,Microsoft.SemanticKernel.PromptExecutionSettings,Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIChatCompletionService.GetStreamingTextContentsAsync(System.String,Microsoft.SemanticKernel.PromptExecutionSettings,Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFileService">
            <summary>
            File service access for OpenAI: https://api.openai.com/v1/files
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFileService.#ctor(System.Uri,System.String,System.String,System.String,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Create an instance of the Azure OpenAI chat completion connector
            </summary>
            <param name="endpoint">Azure Endpoint URL</param>
            <param name="apiKey">Azure OpenAI API Key</param>
            <param name="organization">OpenAI Organization Id (usually optional)</param>
            <param name="version">The API version to target.</param>
            <param name="httpClient">Custom <see cref="T:System.Net.Http.HttpClient"/> for HTTP requests.</param>
            <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> to use for logging. If null, no logging will be performed.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFileService.#ctor(System.String,System.String,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Create an instance of the OpenAI chat completion connector
            </summary>
            <param name="apiKey">OpenAI API Key</param>
            <param name="organization">OpenAI Organization Id (usually optional)</param>
            <param name="httpClient">Custom <see cref="T:System.Net.Http.HttpClient"/> for HTTP requests.</param>
            <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> to use for logging. If null, no logging will be performed.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFileService.DeleteFileAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Remove a previously uploaded file.
            </summary>
            <param name="id">The uploaded file identifier.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFileService.GetFileContentAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieve the file content from a previously uploaded file.
            </summary>
            <param name="id">The uploaded file identifier.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>The file content as <see cref="T:Microsoft.SemanticKernel.BinaryContent"/></returns>
            <remarks>
            Files uploaded with <see cref="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFilePurpose.Assistants"/> do not support content retrieval.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFileService.GetFileAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieve metadata for a previously uploaded file.
            </summary>
            <param name="id">The uploaded file identifier.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>The metadata associated with the specified file identifier.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFileService.GetFilesAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieve metadata for all previously uploaded files.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>The metadata of all uploaded files.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFileService.GetFilesAsync(System.Nullable{Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFilePurpose},System.Threading.CancellationToken)">
            <summary>
            Retrieve metadata for previously uploaded files
            </summary>
            <param name="filePurpose">The purpose of the files by which to filter.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>The metadata of all uploaded files.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFileService.UploadContentAsync(Microsoft.SemanticKernel.BinaryContent,Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFileUploadExecutionSettings,System.Threading.CancellationToken)">
            <summary>
            Upload a file.
            </summary>
            <param name="fileContent">The file content as <see cref="T:Microsoft.SemanticKernel.BinaryContent"/></param>
            <param name="settings">The upload settings</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>The file metadata.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAITextEmbeddingGenerationService">
            <summary>
            OpenAI implementation of <see cref="T:Microsoft.SemanticKernel.Embeddings.ITextEmbeddingGenerationService"/>
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAITextEmbeddingGenerationService.#ctor(System.String,System.String,System.String,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILoggerFactory,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAITextEmbeddingGenerationService"/> class.
            </summary>
            <param name="modelId">Model name</param>
            <param name="apiKey">OpenAI API Key</param>
            <param name="organization">OpenAI Organization Id (usually optional)</param>
            <param name="httpClient">Custom <see cref="T:System.Net.Http.HttpClient"/> for HTTP requests.</param>
            <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> to use for logging. If null, no logging will be performed.</param>
            <param name="dimensions">The number of dimensions the resulting output embeddings should have. Only supported in "text-embedding-3" and later models.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAITextEmbeddingGenerationService.#ctor(System.String,OpenAI.OpenAIClient,Microsoft.Extensions.Logging.ILoggerFactory,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAITextEmbeddingGenerationService"/> class.
            </summary>
            <param name="modelId">Model name</param>
            <param name="openAIClient">Custom <see cref="T:OpenAI.OpenAIClient"/> for HTTP requests.</param>
            <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> to use for logging. If null, no logging will be performed.</param>
            <param name="dimensions">The number of dimensions the resulting output embeddings should have. Only supported in "text-embedding-3" and later models.</param>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAITextEmbeddingGenerationService.Attributes">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAITextEmbeddingGenerationService.GenerateEmbeddingsAsync(System.Collections.Generic.IList{System.String},Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAITextToAudioService">
            <summary>
            OpenAI text-to-audio service.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAITextToAudioService._client">
            <summary>
            OpenAI text-to-audio client for HTTP operations.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAITextToAudioService.OrganizationKey">
            <summary>
            Gets the attribute name used to store the organization in the <see cref="P:Microsoft.SemanticKernel.Services.IAIService.Attributes"/> dictionary.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAITextToAudioService.Attributes">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAITextToAudioService.#ctor(System.String,System.String,System.String,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAITextToAudioService"/> class.
            </summary>
            <param name="modelId">Model name</param>
            <param name="apiKey">OpenAI API Key</param>
            <param name="organization">OpenAI Organization Id (usually optional)</param>
            <param name="httpClient">Custom <see cref="T:System.Net.Http.HttpClient"/> for HTTP requests.</param>
            <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> to use for logging. If null, no logging will be performed.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAITextToAudioService.GetAudioContentsAsync(System.String,Microsoft.SemanticKernel.PromptExecutionSettings,Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAITextToImageService">
            <summary>
            OpenAI text to image service.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAITextToImageService.Attributes">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAITextToImageService.#ctor(System.String,System.String,System.String,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAITextToImageService"/> class.
            </summary>
            <param name="apiKey">OpenAI API key, see https://platform.openai.com/account/api-keys</param>
            <param name="organization">OpenAI organization id. This is usually optional unless your account belongs to multiple organizations.</param>
            <param name="modelId">The model to use for image generation.</param>
            <param name="httpClient">Custom <see cref="T:System.Net.Http.HttpClient"/> for HTTP requests.</param>
            <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> to use for logging. If null, no logging will be performed.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAITextToImageService.GetImageContentsAsync(Microsoft.SemanticKernel.TextContent,Microsoft.SemanticKernel.PromptExecutionSettings,Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIAudioToTextExecutionSettings">
            <summary>
            Execution settings for OpenAI audio-to-text request.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIAudioToTextExecutionSettings.Filename">
            <summary>
            Filename or identifier associated with audio data.
            Should be in format {filename}.{extension}
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIAudioToTextExecutionSettings.Language">
            <summary>
            An optional language of the audio data as two-letter ISO-639-1 language code (e.g. 'en' or 'es').
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIAudioToTextExecutionSettings.Prompt">
            <summary>
            An optional text to guide the model's style or continue a previous audio segment. The prompt should match the audio language.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIAudioToTextExecutionSettings.ResponseFormat">
            <summary>
            The format of the transcript output, in one of these options: json, srt, verbose_json, or vtt. Default is 'json'.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIAudioToTextExecutionSettings.Temperature">
            <summary>
            The sampling temperature, between 0 and 1.
            Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
            If set to 0, the model will use log probability to automatically increase the temperature until certain thresholds are hit.
            Default is 0.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIAudioToTextExecutionSettings.TimestampGranularities">
            <summary>
            The timestamp granularities to populate for this transcription. response_format must be set <c>verbose_json</c> to use timestamp granularities.
            Either or both of these options are supported: word, or segment.
            </summary>
            <remarks>
            There is no additional latency for segment timestamps, but generating word timestamps incurs additional latency.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIAudioToTextExecutionSettings.#ctor">
            <summary>
            Creates an instance of <see cref="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIAudioToTextExecutionSettings"/> class with default filename - "file.mp3".
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIAudioToTextExecutionSettings.#ctor(System.String)">
            <summary>
            Creates an instance of <see cref="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIAudioToTextExecutionSettings"/> class.
            </summary>
            <param name="filename">Filename or identifier associated with audio data. Should be in format {filename}.{extension}</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIAudioToTextExecutionSettings.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIAudioToTextExecutionSettings.FromExecutionSettings(Microsoft.SemanticKernel.PromptExecutionSettings)">
            <summary>
            Converts <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/> to derived <see cref="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIAudioToTextExecutionSettings"/> type.
            </summary>
            <param name="executionSettings">Instance of <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/>.</param>
            <returns>Instance of <see cref="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIAudioToTextExecutionSettings"/>.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFileUploadExecutionSettings">
            <summary>
            Execution serttings associated with Open AI file upload <see cref="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFileService.UploadContentAsync(Microsoft.SemanticKernel.BinaryContent,Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFileUploadExecutionSettings,System.Threading.CancellationToken)"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFileUploadExecutionSettings.#ctor(System.String,Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFilePurpose)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFileUploadExecutionSettings"/> class.
            </summary>
            <param name="fileName">The file name</param>
            <param name="purpose">The file purpose</param>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFileUploadExecutionSettings.FileName">
            <summary>
            The file name.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFileUploadExecutionSettings.Purpose">
            <summary>
            The file purpose.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIPromptExecutionSettings">
            <summary>
            Execution settings for an OpenAI completion request.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIPromptExecutionSettings.ReasoningEffort">
            <summary>
            Gets or sets an object specifying the effort level for the model to use when generating the completion.
            </summary>
            <remarks>
            Constrains effort on reasoning for reasoning models.
            Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.
            Possible values are:
            <para>- <see cref="T:System.String"/> values: <c>"low"</c>, <c>"medium"</c>, <c>"high"</c>;</para>
            <para>- <see cref="T:OpenAI.Chat.ChatReasoningEffortLevel"/> object;</para>
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIPromptExecutionSettings.Temperature">
            <summary>
            Temperature controls the randomness of the completion.
            The higher the temperature, the more random the completion.
            Default is 1.0.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIPromptExecutionSettings.TopP">
            <summary>
            TopP controls the diversity of the completion.
            The higher the TopP, the more diverse the completion.
            Default is 1.0.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIPromptExecutionSettings.PresencePenalty">
            <summary>
            Number between -2.0 and 2.0. Positive values penalize new tokens
            based on whether they appear in the text so far, increasing the
            model's likelihood to talk about new topics.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIPromptExecutionSettings.FrequencyPenalty">
            <summary>
            Number between -2.0 and 2.0. Positive values penalize new tokens
            based on their existing frequency in the text so far, decreasing
            the model's likelihood to repeat the same line verbatim.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIPromptExecutionSettings.MaxTokens">
            <summary>
            The maximum number of tokens to generate in the completion.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIPromptExecutionSettings.StopSequences">
            <summary>
            Sequences where the completion will stop generating further tokens.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIPromptExecutionSettings.Seed">
            <summary>
            If specified, the system will make a best effort to sample deterministically such that repeated requests with the
            same seed and parameters should return the same result. Determinism is not guaranteed.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIPromptExecutionSettings.ResponseFormat">
            <summary>
            Gets or sets the response format to use for the completion.
            </summary>
            <remarks>
            An object specifying the format that the model must output.
            Setting to <c>{ "type": "json_schema", "json_schema": { ...} }</c> enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the Structured Outputs guide.
            Setting to <c>{ "type": "json_object" }</c> enables JSON mode, which ensures the message the model generates is valid JSON.
            Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason= "length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
            Possible values are:
            <para>- <see cref="T:System.String"/> values: <c>"json_object"</c>, <c>"text"</c>;</para>
            <para>- <see cref="T:OpenAI.Chat.ChatResponseFormat"/> object;</para>
            <para>- <see cref="T:System.Type"/> object, which will be used to automatically create a JSON schema.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIPromptExecutionSettings.ChatSystemPrompt">
            <summary>
            The system prompt to use when generating text using a chat model.
            Defaults to "Assistant is a large language model."
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIPromptExecutionSettings.ChatDeveloperPrompt">
            <summary>
            The system prompt to use when generating text using a chat model.
            Defaults to "Assistant is a large language model."
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIPromptExecutionSettings.TokenSelectionBiases">
            <summary>
            Modify the likelihood of specified tokens appearing in the completion.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIPromptExecutionSettings.ToolCallBehavior">
            <summary>
            Gets or sets the behavior for how tool calls are handled.
            </summary>
            <remarks>
            <list type="bullet">
            <item>To disable all tool calling, set the property to null (the default).</item>
            <item>
            To request that the model use a specific function, set the property to an instance returned
            from <see cref="M:Microsoft.SemanticKernel.Connectors.OpenAI.ToolCallBehavior.RequireFunction(Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunction,System.Boolean)"/>.
            </item>
            <item>
            To allow the model to request one of any number of functions, set the property to an
            instance returned from <see cref="M:Microsoft.SemanticKernel.Connectors.OpenAI.ToolCallBehavior.EnableFunctions(System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunction},System.Boolean)"/>, called with
            a list of the functions available.
            </item>
            <item>
            To allow the model to request one of any of the functions in the supplied <see cref="T:Microsoft.SemanticKernel.Kernel"/>,
            set the property to <see cref="P:Microsoft.SemanticKernel.Connectors.OpenAI.ToolCallBehavior.EnableKernelFunctions"/> if the client should simply
            send the information about the functions and not handle the response in any special manner, or
            <see cref="P:Microsoft.SemanticKernel.Connectors.OpenAI.ToolCallBehavior.AutoInvokeKernelFunctions"/> if the client should attempt to automatically
            invoke the function and send the result back to the service.
            </item>
            </list>
            For all options where an instance is provided, auto-invoke behavior may be selected. If the service
            sends a request for a function call, if auto-invoke has been requested, the client will attempt to
            resolve that function from the functions available in the <see cref="T:Microsoft.SemanticKernel.Kernel"/>, and if found, rather
            than returning the response back to the caller, it will handle the request automatically, invoking
            the function, and sending back the result. The intermediate messages will be retained in the
            <see cref="T:Microsoft.SemanticKernel.ChatCompletion.ChatHistory"/> if an instance was provided.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIPromptExecutionSettings.User">
            <summary>
            A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIPromptExecutionSettings.Logprobs">
            <summary>
            Whether to return log probabilities of the output tokens or not.
            If true, returns the log probabilities of each output token returned in the `content` of `message`.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIPromptExecutionSettings.TopLogprobs">
            <summary>
            An integer specifying the number of most likely tokens to return at each token position, each with an associated log probability.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIPromptExecutionSettings.Metadata">
            <summary>
            Developer-defined tags and values used for filtering completions in the OpenAI dashboard.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIPromptExecutionSettings.Store">
            <summary>
            Whether or not to store the output of this chat completion request for use in the OpenAI model distillation or evals products.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIPromptExecutionSettings.WebSearchOptions">
            <summary>
            An object to allow models to search the web for the latest information before generating a response.
            </summary>
            <remarks>
            Supported types are:
            <para>- <see cref="T:OpenAI.Chat.ChatWebSearchOptions"/> object;</para>
            <para>- <see cref="T:System.Text.Json.JsonElement"/>, which will be used to automatically deserialize into <see cref="T:OpenAI.Chat.ChatWebSearchOptions"/>.</para>
            <para>- <see cref="T:System.String"/>, which will be used to automatically deserialize into <see cref="T:OpenAI.Chat.ChatWebSearchOptions"/>.</para>
            <para>
            Currently, you need to use one of these models to use web search in Chat Completions:
            <list type="bullet">
            <item>gpt-4o-search-preview</item>
            <item>gpt-4o-mini-search-preview</item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIPromptExecutionSettings.Freeze">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIPromptExecutionSettings.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIPromptExecutionSettings.FromExecutionSettings(Microsoft.SemanticKernel.PromptExecutionSettings,System.Nullable{System.Int32})">
            <summary>
            Create a new settings object with the values from another settings object.
            </summary>
            <param name="executionSettings">Template configuration</param>
            <param name="defaultMaxTokens">Default max tokens</param>
            <returns>An instance of OpenAIPromptExecutionSettings</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIPromptExecutionSettings.Clone``1">
            <summary>
            Clone the settings object.
            </summary>
            <typeparam name="T">The type of the settings object to clone.</typeparam>
            <returns>A new instance of the settings object.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAITextToAudioExecutionSettings">
            <summary>
            Execution settings for OpenAI text-to-audio request.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAITextToAudioExecutionSettings.Voice">
            <summary>
            The voice to use when generating the audio. Supported voices are alloy, echo, fable, onyx, nova, and shimmer.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAITextToAudioExecutionSettings.ResponseFormat">
            <summary>
            The format to audio in. Supported formats are mp3, opus, aac, and flac.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAITextToAudioExecutionSettings.Speed">
            <summary>
            The speed of the generated audio. Select a value from 0.25 to 4.0. 1.0 is the default.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAITextToAudioExecutionSettings.#ctor">
            <summary>
            Creates an instance of <see cref="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAITextToAudioExecutionSettings"/> class with default voice - "alloy".
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAITextToAudioExecutionSettings.#ctor(System.String)">
            <summary>
            Creates an instance of <see cref="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAITextToAudioExecutionSettings"/> class.
            </summary>
            <param name="voice">The voice to use when generating the audio. Supported voices are alloy, echo, fable, onyx, nova, and shimmer.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAITextToAudioExecutionSettings.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAITextToAudioExecutionSettings.FromExecutionSettings(Microsoft.SemanticKernel.PromptExecutionSettings)">
            <summary>
            Converts <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/> to derived <see cref="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAITextToAudioExecutionSettings"/> type.
            </summary>
            <param name="executionSettings">Instance of <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/>.</param>
            <returns>Instance of <see cref="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAITextToAudioExecutionSettings"/>.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAITextToImageExecutionSettings">
            <summary>
            Text to image execution settings for an OpenAI image generation request.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAITextToImageExecutionSettings.Size">
            <summary>
            Optional width and height of the generated image.
            </summary>
            <remarks>
            <list type="bullet">
            <item>Must be one of <c>256x256, 512x512, or 1024x1024</c> for <c>dall-e-2</c> model.</item>
            <item>Must be one of <c>1024x1024, 1792x1024, 1024x1792</c> for <c>dall-e-3</c> model.</item>
            </list>
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAITextToImageExecutionSettings.Quality">
            <summary>
            The quality of the image that will be generated.
            </summary>
            <remarks>
            Must be one of <c>standard</c> or <c>hd</c> or <c>high</c>.
            <list type="bullet">
            <item><c>standard</c>: creates images with standard quality. This is the default.</item>
            <item><c>hd</c> OR <c>high</c>: creates images with finer details and greater consistency.</item>
            </list>
            This param is only supported for <c>dall-e-3</c> model.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAITextToImageExecutionSettings.Style">
            <summary>
            The style of the generated images.
            </summary>
            <remarks>
            Must be one of <c>vivid</c> or <c>natural</c>.
            <list type="bullet">
            <item><c>vivid</c>: causes the model to lean towards generating hyper-real and dramatic images.</item>
            <item><c>natural</c>: causes the model to produce more natural, less hyper-real looking images.</item>
            </list>
            This param is only supported for <c>dall-e-3</c> model.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAITextToImageExecutionSettings.ResponseFormat">
            <summary>
            The format of the generated images.
            Can be a <see cref="T:OpenAI.Images.GeneratedImageFormat"/> or a <c>string</c> where:
            <list type="bullet">
            <item><see cref="T:OpenAI.Images.GeneratedImageFormat"/>: causes the model to generated in the provided format</item>
            <item><c>url</c> OR <c>uri</c>: causes the model to return an url for the generated images.</item>
            <item><c>b64_json</c> or <c>bytes</c>: causes the model to return in a Base64 format the content of the images.</item>
            </list>
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAITextToImageExecutionSettings.EndUserId">
            <summary>
            A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAITextToImageExecutionSettings.Freeze">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAITextToImageExecutionSettings.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAITextToImageExecutionSettings.FromExecutionSettings(Microsoft.SemanticKernel.PromptExecutionSettings)">
            <summary>
            Create a new settings object with the values from another settings object.
            </summary>
            <param name="executionSettings">Template configuration</param>
            <returns>An instance of OpenAIPromptExecutionSettings</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Connectors.OpenAI.ToolCallBehavior">
            <summary>Represents a behavior for OpenAI tool calls.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Connectors.OpenAI.ToolCallBehavior.DefaultMaximumAutoInvokeAttempts">
            <summary>
            The default maximum number of tool-call auto-invokes that can be made in a single request.
            </summary>
            <remarks>
            After this number of iterations as part of a single user request is reached, auto-invocation
            will be disabled (e.g. <see cref="P:Microsoft.SemanticKernel.Connectors.OpenAI.ToolCallBehavior.AutoInvokeKernelFunctions"/> will behave like <see cref="P:Microsoft.SemanticKernel.Connectors.OpenAI.ToolCallBehavior.EnableKernelFunctions"/>)).
            This is a safeguard against possible runaway execution if the model routinely re-requests
            the same function over and over. It is currently hardcoded, but in the future it could
            be made configurable by the developer. Other configuration is also possible in the future,
            such as a delegate on the instance that can be invoked upon function call failure (e.g. failure
            to find the requested function, failure to invoke the function, etc.), with behaviors for
            what to do in such a case, e.g. respond to the model telling it to try again. With parallel tool call
            support, where the model can request multiple tools in a single response, it is significantly
            less likely that this limit is reached, as most of the time only a single request is needed.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.ToolCallBehavior.EnableKernelFunctions">
            <summary>
            Gets an instance that will provide all of the <see cref="T:Microsoft.SemanticKernel.Kernel"/>'s plugins' function information.
            Function call requests from the model will be propagated back to the caller.
            </summary>
            <remarks>
            If no <see cref="T:Microsoft.SemanticKernel.Kernel"/> is available, no function information will be provided to the model.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.ToolCallBehavior.AutoInvokeKernelFunctions">
            <summary>
            Gets an instance that will both provide all of the <see cref="T:Microsoft.SemanticKernel.Kernel"/>'s plugins' function information
            to the model and attempt to automatically handle any function call requests.
            </summary>
            <remarks>
            When successful, tool call requests from the model become an implementation detail, with the service
            handling invoking any requested functions and supplying the results back to the model.
            If no <see cref="T:Microsoft.SemanticKernel.Kernel"/> is available, no function information will be provided to the model.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.ToolCallBehavior.EnableFunctions(System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunction},System.Boolean)">
            <summary>Gets an instance that will provide the specified list of functions to the model.</summary>
            <param name="functions">The functions that should be made available to the model.</param>
            <param name="autoInvoke">true to attempt to automatically handle function call requests; otherwise, false.</param>
            <returns>
            The <see cref="T:Microsoft.SemanticKernel.Connectors.OpenAI.ToolCallBehavior"/> that may be set into <see cref="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIPromptExecutionSettings.ToolCallBehavior"/>
            to indicate that the specified functions should be made available to the model.
            </returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.ToolCallBehavior.RequireFunction(Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFunction,System.Boolean)">
            <summary>Gets an instance that will request the model to use the specified function.</summary>
            <param name="function">The function the model should request to use.</param>
            <param name="autoInvoke">true to attempt to automatically handle function call requests; otherwise, false.</param>
            <returns>
            The <see cref="T:Microsoft.SemanticKernel.Connectors.OpenAI.ToolCallBehavior"/> that may be set into <see cref="P:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIPromptExecutionSettings.ToolCallBehavior"/>
            to indicate that the specified function should be requested by the model.
            </returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.ToolCallBehavior.#ctor(System.Boolean)">
            <summary>Initializes the instance; prevents external instantiation.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.ToolCallBehavior.ToolCallResultSerializerOptions">
            <summary>
            Options to control tool call result serialization behavior.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.ToolCallBehavior.MaximumUseAttempts">
            <summary>Gets how many requests are part of a single interaction should include this tool in the request.</summary>
            <remarks>
            This should be greater than or equal to <see cref="P:Microsoft.SemanticKernel.Connectors.OpenAI.ToolCallBehavior.MaximumAutoInvokeAttempts"/>. It defaults to <see cref="F:System.Int32.MaxValue"/>.
            Once this limit is reached, the tools will no longer be included in subsequent retries as part of the operation, e.g.
            if this is 1, the first request will include the tools, but the subsequent response sending back the tool's result
            will not include the tools for further use.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.ToolCallBehavior.MaximumAutoInvokeAttempts">
            <summary>Gets how many tool call request/response roundtrips are supported with auto-invocation.</summary>
            <remarks>
            To disable auto invocation, this can be set to 0.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.ToolCallBehavior.AllowAnyRequestedKernelFunction">
            <summary>
            Gets whether validation against a specified list is required before allowing the model to request a function from the kernel.
            </summary>
            <value>true if it's ok to invoke any kernel function requested by the model if it's found; false if a request needs to be validated against an allow list.</value>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.OpenAI.ToolCallBehavior.ConfigureOptions(Microsoft.SemanticKernel.Kernel)">
            <summary>Returns list of available tools and the way model should use them.</summary>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> used for the operation. This can be queried to determine what tools to return.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.Connectors.OpenAI.ToolCallBehavior.KernelFunctions">
            <summary>
            Represents a <see cref="T:Microsoft.SemanticKernel.Connectors.OpenAI.ToolCallBehavior"/> that will provide to the model all available functions from a
            <see cref="T:Microsoft.SemanticKernel.Kernel"/> provided by the client. Setting this will have no effect if no <see cref="T:Microsoft.SemanticKernel.Kernel"/> is provided.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Connectors.OpenAI.ToolCallBehavior.EnabledFunctions">
            <summary>
            Represents a <see cref="T:Microsoft.SemanticKernel.Connectors.OpenAI.ToolCallBehavior"/> that provides a specified list of functions to the model.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Connectors.OpenAI.ToolCallBehavior.RequiredFunction">
            <summary>Represents a <see cref="T:Microsoft.SemanticKernel.Connectors.OpenAI.ToolCallBehavior"/> that requests the model use a specific function.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.OpenAI.ToolCallBehavior.RequiredFunction.MaximumUseAttempts">
            <summary>Gets how many requests are part of a single interaction should include this tool in the request.</summary>
            <remarks>
            Unlike <see cref="T:Microsoft.SemanticKernel.Connectors.OpenAI.ToolCallBehavior.EnabledFunctions"/> and <see cref="T:Microsoft.SemanticKernel.Connectors.OpenAI.ToolCallBehavior.KernelFunctions"/>, this must use 1 as the maximum
            use attempts. Otherwise, every call back to the model _requires_ it to invoke the function (as opposed
            to allows it), which means we end up doing the same work over and over and over until the maximum is reached.
            Thus for "requires", we must send the tool information only once.
            </remarks>
        </member>
        <member name="T:Microsoft.SemanticKernel.Connectors.FunctionCalling.FunctionCallsProcessor">
            <summary>
            Class responsible for providing function calling configuration and processing AI function calls. As part of the processing, it will:
            1. Iterate over <see cref="T:Microsoft.SemanticKernel.FunctionCallContent"/> items representing AI model function calls in the <see cref="P:Microsoft.SemanticKernel.ChatMessageContent.Items"/> collection.
            2. Look up each function in the <see cref="T:Microsoft.SemanticKernel.Kernel"/>.
            3. Invoke the auto function invocation filter, if registered, for each function.
            4. Invoke each function and add the function result to the <see cref="T:Microsoft.SemanticKernel.ChatCompletion.ChatHistory"/>.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Connectors.FunctionCalling.FunctionCallsProcessor.MaxInflightAutoInvokes">
            <summary>
            The maximum number of auto-invokes that can be in-flight at any given time as part of the current
            asynchronous chain of execution.
            </summary>
            <remarks>
            This is a fail-safe mechanism. If someone accidentally manages to set up execution settings in such a way that
            auto-invocation is invoked recursively, and in particular where a prompt function is able to auto-invoke itself,
            we could end up in an infinite loop. This const is a backstop against that happening. We should never come close
            to this limit, but if we do, auto-invoke will be disabled for the current flow in order to prevent runaway execution.
            With the current setup, the way this could possibly happen is if a prompt function is configured with built-in
            execution settings that opt-in to auto-invocation of everything in the kernel, in which case the invocation of that
            prompt function could advertize itself as a candidate for auto-invocation. We don't want to outright block that,
            if that's something a developer has asked to do (e.g. it might be invoked with different arguments than its parent
            was invoked with), but we do want to limit it. This limit is arbitrary and can be tweaked in the future and/or made
            configurable should need arise.
            </remarks>
        </member>
        <member name="F:Microsoft.SemanticKernel.Connectors.FunctionCalling.FunctionCallsProcessor.MaximumAutoInvokeAttempts">
            <summary>
            The maximum number of function auto-invokes that can be made in a single user request.
            </summary>
            <remarks>
            After this number of iterations as part of a single user request is reached, auto-invocation
            will be disabled. This is a safeguard against possible runaway execution if the model routinely re-requests
            the same function over and over.
            </remarks>
        </member>
        <member name="F:Microsoft.SemanticKernel.Connectors.FunctionCalling.FunctionCallsProcessor.s_inflightAutoInvokes">
            <summary>Tracking <see cref="T:System.Threading.AsyncLocal`1"/> for <see cref="F:Microsoft.SemanticKernel.Connectors.FunctionCalling.FunctionCallsProcessor.MaxInflightAutoInvokes"/>.</summary>
            <remarks>
            It is temporarily made internal to allow code that uses the old function model to read it and decide whether to continue auto-invocation or not.
            It should be made private when the old model is deprecated.
            Despite the field being static, its value is unique per execution flow. So if thousands of requests hit it in parallel, each request will see its unique value.
            </remarks>
        </member>
        <member name="F:Microsoft.SemanticKernel.Connectors.FunctionCalling.FunctionCallsProcessor._logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.FunctionCalling.FunctionCallsProcessor.#ctor(Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Connectors.FunctionCalling.FunctionCallsProcessor"/> class.
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.FunctionCalling.FunctionCallsProcessor.GetConfiguration(Microsoft.SemanticKernel.FunctionChoiceBehavior,Microsoft.SemanticKernel.ChatCompletion.ChatHistory,System.Int32,Microsoft.SemanticKernel.Kernel)">
            <summary>
            Retrieves the configuration of the specified <see cref="T:Microsoft.SemanticKernel.FunctionChoiceBehavior"/>.
            </summary>
            <param name="behavior">The function choice behavior.</param>
            <param name="chatHistory">The chat history.</param>
            <param name="requestIndex">Request sequence index.</param>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/>.</param>
            <returns>The configuration of the specified <see cref="T:Microsoft.SemanticKernel.FunctionChoiceBehavior"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.FunctionCalling.FunctionCallsProcessor.ProcessFunctionCallsAsync(Microsoft.SemanticKernel.ChatMessageContent,Microsoft.SemanticKernel.PromptExecutionSettings,Microsoft.SemanticKernel.ChatCompletion.ChatHistory,System.Int32,System.Func{Microsoft.SemanticKernel.FunctionCallContent,System.Boolean},Microsoft.SemanticKernel.FunctionChoiceBehaviorOptions,Microsoft.SemanticKernel.Kernel,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Processes AI function calls by iterating over the function calls, invoking them and adding the results to the chat history.
            </summary>
            <param name="chatMessageContent">The chat message content representing AI model response and containing function calls.</param>
            <param name="executionSettings">The prompt execution settings.</param>
            <param name="chatHistory">The chat history to add function invocation results to.</param>
            <param name="requestIndex">AI model function(s) call request sequence index.</param>
            <param name="checkIfFunctionAdvertised">Callback to check if a function was advertised to AI model or not.</param>
            <param name="options">Function choice behavior options.</param>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/>.</param>
            <param name="isStreaming">Boolean flag which indicates whether an operation is invoked within streaming or non-streaming mode.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests.</param>
            <returns>Last chat history message if function invocation filter requested processing termination, otherwise null.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.FunctionCalling.FunctionCallsProcessor.InvokeFunctionCallsAsync(Microsoft.SemanticKernel.ChatMessageContent,System.Func{Microsoft.SemanticKernel.FunctionCallContent,System.Boolean},Microsoft.SemanticKernel.FunctionChoiceBehaviorOptions,Microsoft.SemanticKernel.Kernel,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Processes function calls specifically for Open AI Assistant API.  In this context, the chat-history is not
            present in local memory.
            </summary>
            <param name="chatMessageContent">The chat message content representing AI model response and containing function calls.</param>
            <param name="checkIfFunctionAdvertised">Callback to check if a function was advertised to AI model or not.</param>
            <param name="options">Function choice behavior options.</param>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/>.</param>
            <param name="isStreaming">Boolean flag which indicates whether an operation is invoked within streaming or non-streaming mode.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests.</param>
            <returns>Last chat history message if function invocation filter requested processing termination, otherwise null.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.FunctionCalling.FunctionCallsProcessor.AddFunctionCallResultToChatHistory(Microsoft.SemanticKernel.ChatCompletion.ChatHistory,Microsoft.SemanticKernel.Connectors.FunctionCalling.FunctionCallsProcessor.FunctionResultContext)">
            <summary>
            Adds the function call result or error message to the chat history.
            </summary>
            <param name="chatHistory">The chat history to add the function call result to.</param>
            <param name="resultContext">The function result context.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.FunctionCalling.FunctionCallsProcessor.AddFunctionCallErrorToChatHistory(Microsoft.SemanticKernel.ChatCompletion.ChatHistory,Microsoft.SemanticKernel.FunctionCallContent,System.String)">
            <summary>
            Adds the function call result or error message to the chat history.
            </summary>
            <param name="chatHistory">The chat history to add the function call result to.</param>
            <param name="functionCall">The function call content.</param>
            <param name="errorMessage">An error message.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.FunctionCalling.FunctionCallsProcessor.GenerateResultContent(Microsoft.SemanticKernel.Connectors.FunctionCalling.FunctionCallsProcessor.FunctionResultContext)">
            <summary>
            Creates a <see cref="T:Microsoft.SemanticKernel.FunctionResultContent"/> instance.
            </summary>
            <param name="resultContext">The function result context.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.FunctionCalling.FunctionCallsProcessor.GenerateResultContent(Microsoft.SemanticKernel.FunctionCallContent,System.String,System.String)">
            <summary>
            Creates a <see cref="T:Microsoft.SemanticKernel.FunctionResultContent"/> instance.
            </summary>
            <param name="functionCall">The function call content.</param>
            <param name="result">The function result, if available</param>
            <param name="errorMessage">An error message.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.FunctionCalling.FunctionCallsProcessor.OnAutoFunctionInvocationAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.AutoFunctionInvocationContext,System.Func{Microsoft.SemanticKernel.AutoFunctionInvocationContext,System.Threading.Tasks.Task})">
            <summary>
            Invokes the auto function invocation filters.
            </summary>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/>.</param>
            <param name="context">The auto function invocation context.</param>
            <param name="functionCallCallback">The function to call after the filters.</param>
            <returns>The auto function invocation context.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.FunctionCalling.FunctionCallsProcessor.InvokeFilterOrFunctionAsync(System.Collections.Generic.IList{Microsoft.SemanticKernel.IAutoFunctionInvocationFilter},System.Func{Microsoft.SemanticKernel.AutoFunctionInvocationContext,System.Threading.Tasks.Task},Microsoft.SemanticKernel.AutoFunctionInvocationContext,System.Int32)">
            <summary>
            This method will execute auto function invocation filters and function recursively.
            If there are no registered filters, just function will be executed.
            If there are registered filters, filter on <paramref name="index"/> position will be executed.
            Second parameter of filter is callback. It can be either filter on <paramref name="index"/> + 1 position or function if there are no remaining filters to execute.
            Function will be always executed as last step after all filters.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.FunctionCalling.FunctionCallsProcessor.ProcessFunctionResult(System.Object)">
            <summary>
            Processes the function result.
            </summary>
            <param name="functionResult">The result of the function call.</param>
            <returns>A string representation of the function result.</returns>
        </member>
        <member name="F:Microsoft.SemanticKernel.Connectors.FunctionCalling.FunctionCallsProcessor.s_functionResultSerializerOptions">
            <summary>
            The <see cref="T:System.Text.Json.JsonSerializerOptions" /> which will be used in <see cref="M:Microsoft.SemanticKernel.Connectors.FunctionCalling.FunctionCallsProcessor.ProcessFunctionResult(System.Object)"/>.
            </summary>
            <remarks>
            <see cref="M:System.Text.Json.JsonSerializer.Serialize``1(``0,System.Text.Json.JsonSerializerOptions)"/> is very likely to escape characters and generates LLM unfriendly results by default.
            </remarks>
        </member>
        <member name="F:Microsoft.SemanticKernel.Connectors.FunctionCalling.FunctionCallsProcessorLoggingExtensions.s_logFunctionChoiceBehaviorConfiguration">
            <summary>
            Action to log the <see cref="T:Microsoft.SemanticKernel.FunctionChoiceBehaviorConfiguration"/>.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Connectors.FunctionCalling.FunctionCallsProcessorLoggingExtensions.s_logFunctionCalls">
            <summary>
            Action to log function calls.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Connectors.FunctionCalling.FunctionCallsProcessorLoggingExtensions.s_logAutoFunctionInvocationFilterContext">
            <summary>
            Action to log auto function invocation filter context.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Connectors.FunctionCalling.FunctionCallsProcessorLoggingExtensions.s_logAutoFunctionInvocationFilterTermination">
            <summary>
            Action to log auto function invocation filter termination.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.FunctionCalling.FunctionCallsProcessorLoggingExtensions.LogFunctionChoiceBehaviorConfiguration(Microsoft.Extensions.Logging.ILogger,Microsoft.SemanticKernel.FunctionChoiceBehaviorConfiguration)">
            <summary>
            Logs <see cref="T:Microsoft.SemanticKernel.FunctionChoiceBehaviorConfiguration"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.FunctionCalling.FunctionCallsProcessorLoggingExtensions.LogFunctionCalls(Microsoft.Extensions.Logging.ILogger,Microsoft.SemanticKernel.FunctionCallContent[])">
            <summary>
            Logs function calls.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.FunctionCalling.FunctionCallsProcessorLoggingExtensions.LogAutoFunctionInvocationFilterContext(Microsoft.Extensions.Logging.ILogger,Microsoft.SemanticKernel.AutoFunctionInvocationContext)">
            <summary>
            Logs the <see cref="T:Microsoft.SemanticKernel.AutoFunctionInvocationContext"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.FunctionCalling.FunctionCallsProcessorLoggingExtensions.LogAutoFunctionInvocationProcessTermination(Microsoft.Extensions.Logging.ILogger,Microsoft.SemanticKernel.AutoFunctionInvocationContext)">
            <summary>
            Logs the auto function invocation process termination.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.FunctionCalling.FunctionCallsProcessorLoggingExtensions.LogFunctionCallRequestFailure(Microsoft.Extensions.Logging.ILogger,Microsoft.SemanticKernel.FunctionCallContent,System.String)">
            <summary>
            Logs function call request failure.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.OpenAIChatHistoryExtensions">
            <summary>
            Chat history extensions.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.OpenAIChatHistoryExtensions.AddStreamingMessageAsync(Microsoft.SemanticKernel.ChatCompletion.ChatHistory,System.Collections.Generic.IAsyncEnumerable{Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIStreamingChatMessageContent},System.Boolean)">
            <summary>
            Add a message to the chat history at the end of the streamed message
            </summary>
            <param name="chatHistory">Target chat history</param>
            <param name="streamingMessageContents"><see cref="T:System.Collections.Generic.IAsyncEnumerator`1"/> list of streaming message contents</param>
            <param name="includeToolCalls">The tool call information from the processed message will be ignored (<c>false</c>) by default.</param>
            <remarks>
            Setting <c>removeToolCalls</c> to <c>false</c> should be only for manual tool calling scenarios, otherwise
            may result in the error below. See <a href="https://github.com/microsoft/semantic-kernel/issues/9458">Issue 9458</a>
            <code>An assistant message with 'tool_calls' must be followed by tool messages</code>
            </remarks>
            <returns>Returns the original streaming results with some message processing</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.OpenAIKernelBuilderExtensions">
            <summary>
            Sponsor extensions class for <see cref="T:Microsoft.SemanticKernel.IKernelBuilder"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.OpenAIKernelBuilderExtensions.AddOpenAITextEmbeddingGeneration(Microsoft.SemanticKernel.IKernelBuilder,System.String,System.String,System.String,System.String,System.Net.Http.HttpClient,System.Nullable{System.Int32})">
            <summary>
            Adds <see cref="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAITextEmbeddingGenerationService"/> to the <see cref="P:Microsoft.SemanticKernel.IKernelBuilder.Services"/>.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.SemanticKernel.IKernelBuilder"/> instance to augment.</param>
            <param name="modelId">OpenAI model name, see https://platform.openai.com/docs/models</param>
            <param name="apiKey">OpenAI API key, see https://platform.openai.com/account/api-keys</param>
            <param name="orgId">OpenAI organization id. This is usually optional unless your account belongs to multiple organizations.</param>
            <param name="serviceId">A local identifier for the given AI service</param>
            <param name="httpClient">The HttpClient to use with this service.</param>
            <param name="dimensions">The number of dimensions the resulting output embeddings should have. Only supported in "text-embedding-3" and later models.</param>
            <returns>The same instance as <paramref name="builder"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.OpenAIKernelBuilderExtensions.AddOpenAITextEmbeddingGeneration(Microsoft.SemanticKernel.IKernelBuilder,System.String,OpenAI.OpenAIClient,System.String,System.Nullable{System.Int32})">
            <summary>
            Adds the <see cref="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAITextEmbeddingGenerationService"/> to the <see cref="P:Microsoft.SemanticKernel.IKernelBuilder.Services"/>.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> instance to augment.</param>
            <param name="modelId">OpenAI model name, see https://platform.openai.com/docs/models</param>
            <param name="openAIClient"><see cref="T:OpenAI.OpenAIClient"/> to use for the service. If null, one must be available in the service provider when this service is resolved.</param>
            <param name="serviceId">A local identifier for the given AI service</param>
            <param name="dimensions">The number of dimensions the resulting output embeddings should have. Only supported in "text-embedding-3" and later models.</param>
            <returns>The same instance as <paramref name="builder"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.OpenAIKernelBuilderExtensions.AddOpenAITextToImage(Microsoft.SemanticKernel.IKernelBuilder,System.String,System.String,System.String,System.String,System.Net.Http.HttpClient)">
            <summary>
            Add the OpenAI Dall-E text to image service to the list
            </summary>
            <param name="builder">The <see cref="T:Microsoft.SemanticKernel.IKernelBuilder"/> instance to augment.</param>
            <param name="apiKey">OpenAI API key, see https://platform.openai.com/account/api-keys</param>
            <param name="orgId">OpenAI organization id. This is usually optional unless your account belongs to multiple organizations.</param>
            <param name="modelId">The model to use for image generation.</param>
            <param name="serviceId">A local identifier for the given AI service</param>
            <param name="httpClient">The HttpClient to use with this service.</param>
            <returns>The same instance as <paramref name="builder"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.OpenAIKernelBuilderExtensions.AddOpenAITextToAudio(Microsoft.SemanticKernel.IKernelBuilder,System.String,System.String,System.String,System.String,System.Net.Http.HttpClient)">
            <summary>
            Adds the OpenAI text-to-audio service to the list.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.SemanticKernel.IKernelBuilder"/> instance to augment.</param>
            <param name="modelId">OpenAI model name, see https://platform.openai.com/docs/models</param>
            <param name="apiKey">OpenAI API key, see https://platform.openai.com/account/api-keys</param>
            <param name="orgId">OpenAI organization id. This is usually optional unless your account belongs to multiple organizations.</param>
            <param name="serviceId">A local identifier for the given AI service</param>
            <param name="httpClient">The HttpClient to use with this service.</param>
            <returns>The same instance as <paramref name="builder"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.OpenAIKernelBuilderExtensions.AddOpenAIAudioToText(Microsoft.SemanticKernel.IKernelBuilder,System.String,System.String,System.String,System.String,System.Net.Http.HttpClient)">
            <summary>
            Adds the OpenAI audio-to-text service to the list.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.SemanticKernel.IKernelBuilder"/> instance to augment.</param>
            <param name="modelId">OpenAI model name, see https://platform.openai.com/docs/models</param>
            <param name="apiKey">OpenAI API key, see https://platform.openai.com/account/api-keys</param>
            <param name="orgId">OpenAI organization id. This is usually optional unless your account belongs to multiple organizations.</param>
            <param name="serviceId">A local identifier for the given AI service</param>
            <param name="httpClient">The HttpClient to use with this service.</param>
            <returns>The same instance as <paramref name="builder"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.OpenAIKernelBuilderExtensions.AddOpenAIAudioToText(Microsoft.SemanticKernel.IKernelBuilder,System.String,OpenAI.OpenAIClient,System.String)">
            <summary>
            Adds the OpenAI audio-to-text service to the list.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.SemanticKernel.IKernelBuilder"/> instance to augment.</param>
            <param name="modelId">OpenAI model id</param>
            <param name="openAIClient"><see cref="T:OpenAI.OpenAIClient"/> to use for the service. If null, one must be available in the service provider when this service is resolved.</param>
            <param name="serviceId">A local identifier for the given AI service</param>
            <returns>The same instance as <paramref name="builder"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.OpenAIKernelBuilderExtensions.AddOpenAIFiles(Microsoft.SemanticKernel.IKernelBuilder,System.String,System.String,System.String,System.Net.Http.HttpClient)">
            <summary>
            Adds the <see cref="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFileService"/> to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.SemanticKernel.IKernelBuilder"/> instance to augment.</param>
            <param name="apiKey">OpenAI API key, see https://platform.openai.com/account/api-keys</param>
            <param name="orgId">OpenAI organization id. This is usually optional unless your account belongs to multiple organizations.</param>
            <param name="serviceId">A local identifier for the given AI service</param>
            <param name="httpClient">The HttpClient to use with this service.</param>
            <returns>The same instance as <paramref name="builder"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.OpenAIKernelBuilderExtensions.AddOpenAIChatCompletion(Microsoft.SemanticKernel.IKernelBuilder,System.String,System.String,System.String,System.String,System.Net.Http.HttpClient)">
            <summary>
            Adds the OpenAI chat completion service to the list.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.SemanticKernel.IKernelBuilder"/> instance to augment.</param>
            <param name="modelId">OpenAI model name, see https://platform.openai.com/docs/models</param>
            <param name="apiKey">OpenAI API key, see https://platform.openai.com/account/api-keys</param>
            <param name="orgId">OpenAI organization id. This is usually optional unless your account belongs to multiple organizations.</param>
            <param name="serviceId">A local identifier for the given AI service</param>
            <param name="httpClient">The HttpClient to use with this service.</param>
            <returns>The same instance as <paramref name="builder"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.OpenAIKernelBuilderExtensions.AddOpenAIChatCompletion(Microsoft.SemanticKernel.IKernelBuilder,System.String,OpenAI.OpenAIClient,System.String)">
            <summary>
            Adds the OpenAI chat completion service to the list.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.SemanticKernel.IKernelBuilder"/> instance to augment.</param>
            <param name="modelId">OpenAI model id</param>
            <param name="openAIClient"><see cref="T:OpenAI.OpenAIClient"/> to use for the service. If null, one must be available in the service provider when this service is resolved.</param>
            <param name="serviceId">A local identifier for the given AI service</param>
            <returns>The same instance as <paramref name="builder"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.OpenAIKernelBuilderExtensions.AddOpenAIChatCompletion(Microsoft.SemanticKernel.IKernelBuilder,System.String,System.Uri,System.String,System.String,System.String,System.Net.Http.HttpClient)">
            <summary>
            Adds the Custom Endpoint OpenAI chat completion service to the list.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.SemanticKernel.IKernelBuilder"/> instance to augment.</param>
            <param name="modelId">OpenAI model name, see https://platform.openai.com/docs/models</param>
            <param name="endpoint">Custom OpenAI Compatible Message API endpoint</param>
            <param name="apiKey">OpenAI API key, see https://platform.openai.com/account/api-keys</param>
            <param name="orgId">OpenAI organization id. This is usually optional unless your account belongs to multiple organizations.</param>
            <param name="serviceId">A local identifier for the given AI service</param>
            <param name="httpClient">The HttpClient to use with this service.</param>
            <returns>The same instance as <paramref name="builder"/>.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.OpenAIServiceCollectionExtensions">
            <summary>
            Sponsor extensions class for <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.OpenAIServiceCollectionExtensions.AddOpenAITextEmbeddingGeneration(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Adds the <see cref="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAITextEmbeddingGenerationService"/> to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> instance to augment.</param>
            <param name="modelId">OpenAI model name, see https://platform.openai.com/docs/models</param>
            <param name="apiKey">OpenAI API key, see https://platform.openai.com/account/api-keys</param>
            <param name="orgId">OpenAI organization id. This is usually optional unless your account belongs to multiple organizations.</param>
            <param name="serviceId">A local identifier for the given AI service</param>
            <param name="dimensions">The number of dimensions the resulting output embeddings should have. Only supported in "text-embedding-3" and later models.</param>
            <returns>The same instance as <paramref name="services"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.OpenAIServiceCollectionExtensions.AddOpenAITextEmbeddingGeneration(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,OpenAI.OpenAIClient,System.String,System.Nullable{System.Int32})">
            <summary>
            Adds the <see cref="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAITextEmbeddingGenerationService"/> to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> instance to augment.</param>
            <param name="modelId">The OpenAI model id.</param>
            <param name="openAIClient"><see cref="T:OpenAI.OpenAIClient"/> to use for the service. If null, one must be available in the service provider when this service is resolved.</param>
            <param name="serviceId">A local identifier for the given AI service</param>
            <param name="dimensions">The number of dimensions the resulting output embeddings should have. Only supported in "text-embedding-3" and later models.</param>
            <returns>The same instance as <paramref name="services"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.OpenAIServiceCollectionExtensions.AddOpenAITextToImage(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.String,System.String,System.String)">
            <summary>
            Add the OpenAI Dall-E text to image service to the list
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> instance to augment.</param>
            <param name="apiKey">OpenAI API key, see https://platform.openai.com/account/api-keys</param>
            <param name="orgId">OpenAI organization id. This is usually optional unless your account belongs to multiple organizations.</param>
            <param name="modelId">The model to use for image generation.</param>
            <param name="serviceId">A local identifier for the given AI service</param>
            <returns>The same instance as <paramref name="services"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.OpenAIServiceCollectionExtensions.AddOpenAITextToAudio(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.String,System.String,System.String)">
            <summary>
            Adds the OpenAI text-to-audio service to the list.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> instance to augment.</param>
            <param name="modelId">OpenAI model name, see https://platform.openai.com/docs/models</param>
            <param name="apiKey">OpenAI API key, see https://platform.openai.com/account/api-keys</param>
            <param name="orgId">OpenAI organization id. This is usually optional unless your account belongs to multiple organizations.</param>
            <param name="serviceId">A local identifier for the given AI service</param>
            <returns>The same instance as <paramref name="services"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.OpenAIServiceCollectionExtensions.AddOpenAIAudioToText(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.String,System.String,System.String)">
            <summary>
            Adds the OpenAI audio-to-text service to the list.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> instance to augment.</param>
            <param name="modelId">OpenAI model name, see https://platform.openai.com/docs/models</param>
            <param name="apiKey">OpenAI API key, see https://platform.openai.com/account/api-keys</param>
            <param name="orgId">OpenAI organization id. This is usually optional unless your account belongs to multiple organizations.</param>
            <param name="serviceId">A local identifier for the given AI service</param>
            <returns>The same instance as <paramref name="services"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.OpenAIServiceCollectionExtensions.AddOpenAIAudioToText(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,OpenAI.OpenAIClient,System.String)">
            <summary>
            Adds the OpenAI audio-to-text service to the list.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> instance to augment.</param>
            <param name="modelId">OpenAI model id</param>
            <param name="openAIClient"><see cref="T:OpenAI.OpenAIClient"/> to use for the service. If null, one must be available in the service provider when this service is resolved.</param>
            <param name="serviceId">A local identifier for the given AI service</param>
            <returns>The same instance as <paramref name="services"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.OpenAIServiceCollectionExtensions.AddOpenAIFiles(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.String,System.String)">
            <summary>
            Adds the <see cref="T:Microsoft.SemanticKernel.Connectors.OpenAI.OpenAIFileService"/> to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> instance to augment.</param>
            <param name="apiKey">OpenAI API key, see https://platform.openai.com/account/api-keys</param>
            <param name="orgId">OpenAI organization id. This is usually optional unless your account belongs to multiple organizations.</param>
            <param name="serviceId">A local identifier for the given AI service</param>
            <returns>The same instance as <paramref name="services"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.OpenAIServiceCollectionExtensions.AddOpenAIChatCompletion(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.String,System.String,System.String)">
            <summary>
            Adds the OpenAI chat completion service to the list.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> instance to augment.</param>
            <param name="modelId">OpenAI model name, see https://platform.openai.com/docs/models</param>
            <param name="apiKey">OpenAI API key, see https://platform.openai.com/account/api-keys</param>
            <param name="orgId">OpenAI organization id. This is usually optional unless your account belongs to multiple organizations.</param>
            <param name="serviceId">A local identifier for the given AI service</param>
            <returns>The same instance as <paramref name="services"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.OpenAIServiceCollectionExtensions.AddOpenAIChatCompletion(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,OpenAI.OpenAIClient,System.String)">
            <summary>
            Adds the OpenAI chat completion service to the list.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> instance to augment.</param>
            <param name="modelId">OpenAI model id</param>
            <param name="openAIClient"><see cref="T:OpenAI.OpenAIClient"/> to use for the service. If null, one must be available in the service provider when this service is resolved.</param>
            <param name="serviceId">A local identifier for the given AI service</param>
            <returns>The same instance as <paramref name="services"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.OpenAIServiceCollectionExtensions.AddOpenAIChatCompletion(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Uri,System.String,System.String,System.String)">
            <summary>
            Adds the Custom OpenAI chat completion service to the list.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> instance to augment.</param>
            <param name="modelId">OpenAI model name, see https://platform.openai.com/docs/models</param>
            <param name="endpoint">A Custom Message API compatible endpoint.</param>
            <param name="apiKey">OpenAI API key, see https://platform.openai.com/account/api-keys</param>
            <param name="orgId">OpenAI organization id. This is usually optional unless your account belongs to multiple organizations.</param>
            <param name="serviceId">A local identifier for the given AI service</param>
            <returns>The same instance as <paramref name="services"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ActivityExtensions.StartActivityWithTags(System.Diagnostics.ActivitySource,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Diagnostics.ActivityKind)">
            <summary>
            Starts an activity with the specified name and tags.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ActivityExtensions.SetTags(System.Diagnostics.Activity,System.ReadOnlySpan{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Adds tags to the activity.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ActivityExtensions.AttachSensitiveDataAsEvent(System.Diagnostics.Activity,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Adds an event to the activity. Should only be used for events that contain sensitive data.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ActivityExtensions.SetError(System.Diagnostics.Activity,System.Exception)">
            <summary>
            Sets the error status and type on the activity.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics">
            <summary>
            Model diagnostics helper class that provides a set of methods to trace model activities with the OTel semantic conventions.
            This class contains experimental features and may change in the future.
            To enable these features, set one of the following switches to true:
                `Microsoft.SemanticKernel.Experimental.GenAI.EnableOTelDiagnostics`
                `Microsoft.SemanticKernel.Experimental.GenAI.EnableOTelDiagnosticsSensitive`
            Or set the following environment variables to true:
               `SEMANTICKERNEL_EXPERIMENTAL_GENAI_ENABLE_OTEL_DIAGNOSTICS`
               `SEMANTICKERNEL_EXPERIMENTAL_GENAI_ENABLE_OTEL_DIAGNOSTICS_SENSITIVE`
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.StartCompletionActivity``1(System.Uri,System.String,System.String,System.String,``0)">
            <summary>
            Start a text completion activity for a given model.
            The activity will be tagged with the a set of attributes specified by the semantic conventions.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.StartCompletionActivity``1(System.Uri,System.String,System.String,Microsoft.SemanticKernel.ChatCompletion.ChatHistory,``0)">
            <summary>
            Start a chat completion activity for a given model.
            The activity will be tagged with the a set of attributes specified by the semantic conventions.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.StartAgentInvocationActivity(System.String,System.String,System.String)">
            <summary>
            Start an agent invocation activity and return the activity.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.SetCompletionResponse(System.Diagnostics.Activity,System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.TextContent},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Set the text completion response for a given activity.
            The activity will be enriched with the response attributes specified by the semantic conventions.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.SetCompletionResponse(System.Diagnostics.Activity,System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.ChatMessageContent},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Set the chat completion response for a given activity.
            The activity will be enriched with the response attributes specified by the semantic conventions.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.EndStreaming(System.Diagnostics.Activity,System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.StreamingKernelContent},System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.FunctionCallContent},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Notify the end of streaming for a given activity.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.SetResponseId(System.Diagnostics.Activity,System.String)">
            <summary>
            Set the response id for a given activity.
            </summary>
            <param name="activity">The activity to set the response id</param>
            <param name="responseId">The response id</param>
            <returns>The activity with the response id set for chaining</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.SetPromptTokenUsage(System.Diagnostics.Activity,System.Int32)">
            <summary>
            Set the prompt token usage for a given activity.
            </summary>
            <param name="activity">The activity to set the prompt token usage</param>
            <param name="promptTokens">The number of prompt tokens used</param>
            <returns>The activity with the prompt token usage set for chaining</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.SetCompletionTokenUsage(System.Diagnostics.Activity,System.Int32)">
            <summary>
            Set the completion token usage for a given activity.
            </summary>
            <param name="activity">The activity to set the completion token usage</param>
            <param name="completionTokens">The number of completion tokens used</param>
            <returns>The activity with the completion token usage set for chaining</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.IsModelDiagnosticsEnabled">
            <summary>
            Check if model diagnostics is enabled
            Model diagnostics is enabled if either EnableModelDiagnostics or EnableSensitiveEvents is set to true and there are listeners.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.IsSensitiveEventsEnabled">
            <summary>
            Check if sensitive events are enabled.
            Sensitive events are enabled if EnableSensitiveEvents is set to true and there are listeners.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.ToOpenAIFormat(System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.ChatMessageContent})">
            <summary>
            Convert chat history to a string aligned with the OpenAI format
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.ToOpenAIFormat(System.Text.StringBuilder,Microsoft.SemanticKernel.ChatCompletion.ChatMessageContentItemCollection)">
            <summary>
            Helper method to convert tool calls to a string aligned with the OpenAI format
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.StartCompletionActivity``2(System.Uri,System.String,System.String,``0,``1,System.Func{``0,System.String})">
            <summary>
            Start a completion activity and return the activity.
            The `formatPrompt` delegate won't be invoked if events are disabled.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.SetCompletionResponse``1(System.Diagnostics.Activity,``0,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Func{``0,System.String})">
            <summary>
            Set the completion response for a given activity.
            The `formatCompletions` delegate won't be invoked if events are disabled.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.SetCompletionResponse(System.Diagnostics.Activity,System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{Microsoft.SemanticKernel.StreamingKernelContent}},System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.FunctionCallContent},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Set the streaming completion response for a given activity.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.OrganizeStreamingContent(System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.StreamingKernelContent})">
            <summary>
            Organize streaming content by choice index
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.ModelDiagnosticsTags">
            <summary>
            Tags used in model diagnostics
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Verify.NotNull(System.Object,System.String)">
            <summary>
            Equivalent of ArgumentNullException.ThrowIfNull
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Verify.ParametersUniqueness(System.Collections.Generic.IReadOnlyList{Microsoft.SemanticKernel.KernelParameterMetadata})">
            <summary>
            Make sure every function parameter name is unique
            </summary>
            <param name="parameters">List of parameters</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Verify.ValidHostnameSegment(System.String,System.String)">
            <summary>
            Validates that a hostname segment string is safe for use as a URL segment, preventing URL injection.
            </summary>
            <param name="hostNameSegment">The hostname segment string to validate (e.g., 'us-east1', 'europe-west4')</param>
            <param name="paramName">Optional parameter name for the exception</param>
            <exception cref="T:System.ArgumentException">Thrown when the location contains invalid characters or patterns</exception>
        </member>
        <member name="T:Microsoft.SemanticKernel.FunctionName">
            <summary>
            Represents a function name.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.FunctionName.PluginName">
            <summary>
            The plugin name.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.FunctionName.Name">
            <summary>
            The function name.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.FunctionName.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.FunctionName"/> class.
            </summary>
            <param name="name">The function name.</param>
            <param name="pluginName">The plugin name.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.FunctionName.ToFullyQualifiedName(System.String,System.String,System.String)">
            <summary>
            Gets the fully-qualified name of the function.
            </summary>
            <param name="functionName">The function name.</param>
            <param name="pluginName">The plugin name.</param>
            <param name="functionNameSeparator">The function name separator.</param>
            <returns>Fully-qualified name of the function.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.FunctionName.Parse(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.SemanticKernel.FunctionName"/> class.
            </summary>
            <param name="fullyQualifiedName">Fully-qualified name of the function.</param>
            <param name="functionNameSeparator">The function name separator.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Http.HttpClientExtensions.SendWithSuccessCheckAsync(System.Net.Http.HttpClient,System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
            Sends an HTTP request using the provided <see cref="T:System.Net.Http.HttpClient"/> instance and checks for a successful response.
            If the response is not successful, it logs an error and throws an <see cref="T:Microsoft.SemanticKernel.HttpOperationException"/>.
            </summary>
            <param name="client">The <see cref="T:System.Net.Http.HttpClient"/> instance to use for sending the request.</param>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/> to send.</param>
            <param name="completionOption">Indicates if HttpClient operations should be considered completed either as soon as a response is available,
            or after reading the entire response message including the content.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> for canceling the request.</param>
            <returns>The <see cref="T:System.Net.Http.HttpResponseMessage"/> representing the response.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Http.HttpClientExtensions.SendWithSuccessCheckAsync(System.Net.Http.HttpClient,System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            Sends an HTTP request using the provided <see cref="T:System.Net.Http.HttpClient"/> instance and checks for a successful response.
            If the response is not successful, it logs an error and throws an <see cref="T:Microsoft.SemanticKernel.HttpOperationException"/>.
            </summary>
            <param name="client">The <see cref="T:System.Net.Http.HttpClient"/> instance to use for sending the request.</param>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/> to send.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> for canceling the request.</param>
            <returns>The <see cref="T:System.Net.Http.HttpResponseMessage"/> representing the response.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Http.HttpClientProvider">
            <summary>
            Provides functionality for retrieving instances of HttpClient.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Http.HttpClientProvider.GetHttpClient">
            <summary>
            Retrieves an instance of HttpClient.
            </summary>
            <returns>An instance of HttpClient.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Http.HttpClientProvider.GetHttpClient(System.Net.Http.HttpClient)">
            <summary>
            Retrieves an instance of HttpClient.
            </summary>
            <returns>An instance of HttpClient.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Http.HttpClientProvider.GetHttpClient(System.IServiceProvider)">
            <summary>
            Retrieves an instance of HttpClient.
            </summary>
            <returns>An instance of HttpClient.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Http.HttpClientProvider.GetHttpClient(System.Net.Http.HttpClient,System.IServiceProvider)">
            <summary>
            Retrieves an instance of HttpClient.
            </summary>
            <returns>An instance of HttpClient.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Http.HttpClientProvider.NonDisposableHttpClientHandler">
            <summary>
            Represents a singleton implementation of <see cref="T:System.Net.Http.HttpClientHandler"/> that is not disposable.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Http.HttpClientProvider.NonDisposableHttpClientHandler.#ctor">
            <summary>
            Private constructor to prevent direct instantiation of the class.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Http.HttpClientProvider.NonDisposableHttpClientHandler.Instance">
            <summary>
            Gets the singleton instance of <see cref="T:Microsoft.SemanticKernel.Http.HttpClientProvider.NonDisposableHttpClientHandler"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Http.HttpClientProvider.NonDisposableHttpClientHandler.Dispose(System.Boolean)">
            <summary>
            Disposes the underlying resources held by the <see cref="T:Microsoft.SemanticKernel.Http.HttpClientProvider.NonDisposableHttpClientHandler"/>.
            This implementation does nothing to prevent unintended disposal, as it may affect all references.
            </summary>
            <param name="disposing">True if called from <see cref="M:Microsoft.SemanticKernel.Http.HttpClientProvider.NonDisposableHttpClientHandler.Dispose(System.Boolean)"/>, false if called from a finalizer.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.Http.HttpContentExtensions">
            <summary>
            Provides extension methods for working with HTTP content in a way that translates HttpRequestExceptions into HttpOperationExceptions.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Http.HttpContentExtensions.ReadAsStringWithExceptionMappingAsync(System.Net.Http.HttpContent,System.Threading.CancellationToken)">
            <summary>
            Reads the content of the HTTP response as a string and translates any HttpRequestException into an HttpOperationException.
            </summary>
            <param name="httpContent">The HTTP content to read.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A string representation of the HTTP content.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Http.HttpContentExtensions.ReadAsStreamAndTranslateExceptionAsync(System.Net.Http.HttpContent,System.Threading.CancellationToken)">
            <summary>
            Reads the content of the HTTP response as a stream and translates any HttpRequestException into an HttpOperationException.
            </summary>
            <param name="httpContent">The HTTP content to read.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A stream representing the HTTP content.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Http.HttpContentExtensions.ReadAsByteArrayAndTranslateExceptionAsync(System.Net.Http.HttpContent,System.Threading.CancellationToken)">
            <summary>
            Reads the content of the HTTP response as a byte array and translates any HttpRequestException into an HttpOperationException.
            </summary>
            <param name="httpContent">The HTTP content to read.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A byte array representing the HTTP content.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Http.HttpHeaderConstant">
            <summary>Provides HTTP header names and values for common purposes.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Http.HttpHeaderConstant.Names.SemanticKernelVersion">
            <summary>HTTP header name to use to include the Semantic Kernel package version in all HTTP requests issued by Semantic Kernel.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Http.HttpHeaderConstant.Names.UserAgent">
            <summary>HTTP User-Agent header name.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Http.HttpHeaderConstant.Values.UserAgent">
            <summary>User agent string to use for all HTTP requests issued by Semantic Kernel.</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Http.HttpHeaderConstant.Values.GetAssemblyVersion(System.Type)">
            <summary>
            Gets the version of the <see cref="T:System.Reflection.Assembly"/> in which the specific type is declared.
            </summary>
            <param name="type">Type for which the assembly version is returned.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.Http.HttpResponseStream">
            <summary>
            Associate a response stream with its parent response for parity in life-cycle management.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Http.HttpResponseStream.#ctor(System.IO.Stream,System.Net.Http.HttpResponseMessage)">
            <summary>
            Associate a response stream with its parent response for parity in life-cycle management.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Freezable">
            <summary>
            Represents a freezable object.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Freezable.Freeze">
            <summary>
            Makes the current instance unmodifiable.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Freezable.ThrowIfFrozen">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> if the object is frozen.
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:Microsoft.SemanticKernel.AppContextSwitchHelper">
            <summary>
            Helper class to get app context switch value
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.AppContextSwitchHelper.GetConfigValue(System.String,System.String)">
            <summary>
            Returns the value of the specified app switch or environment variable if it is set.
            If the switch or environment variable is not set, return false.
            The app switch value takes precedence over the environment variable.
            </summary>
            <param name="appContextSwitchName">The name of the app switch.</param>
            <param name="envVarName">The name of the environment variable.</param>
            <returns>The value of the app switch or environment variable if it is set; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.IListExtensions.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds a range of elements from the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/> source to the target <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <param name="target">The target <see cref="T:System.Collections.Generic.IList`1"/> to add elements to.</param>
            <param name="source">The source <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing elements to add to the target <see cref="T:System.Collections.Generic.IList`1"/>.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.InternalTypeConverter">
            <summary>
            Provides internal utility methods for converting types to strings with consideration for CultureInfo.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.InternalTypeConverter.ConvertToString(System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the given object value to a string representation using the appropriate CultureInfo.
            </summary>
            <param name="value">The object to convert.</param>
            <param name="culture">The CultureInfo to consider during conversion.</param>
            <returns>A string representation of the object value, considering the specified CultureInfo.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.InternalTypeConverter.GetTypeToStringConverterDelegate(System.Type)">
            <summary>
            Retrieves a type-to-string converter delegate for the specified source type.
            </summary>
            <param name="sourceType">The source Type for which to retrieve the type-to-string converter delegate.</param>
            <returns>A Func delegate for converting the source type to a string, considering CultureInfo, or null if no suitable converter is found.</returns>
        </member>
        <member name="F:Microsoft.SemanticKernel.InternalTypeConverter.s_converters">
            <summary>Converter functions for converting types to strings.</summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.NonNullCollection`1">
            <summary>
            Provides a collection of non-null items.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.NonNullCollection`1._items">
            <summary>
            The underlying list of items.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.NonNullCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.NonNullCollection`1"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.NonNullCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.NonNullCollection`1"/> class.
            </summary>
            <param name="items">The initial collection of items to populate this collection.</param>
        </member>
        <member name="P:Microsoft.SemanticKernel.NonNullCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index in the collection.
            </summary>
            <param name="index">The index of the item to get or set.</param>
            <returns>The item at the specified index.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index"/> was not valid for this collection.</exception>
        </member>
        <member name="P:Microsoft.SemanticKernel.NonNullCollection`1.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.NonNullCollection`1.Add(`0)">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="item">The item to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is null.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.NonNullCollection`1.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.NonNullCollection`1.Contains(`0)">
            <summary>
            Determines whether an item is in the collection.
            </summary>
            <param name="item">The item to locate.</param>
            <returns>True if the item is found in the collection; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is null.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.NonNullCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies all of the items in the collection to an array, starting at the specified destination array index.
            </summary>
            <param name="array">The destination array into which the items should be copied.</param>
            <param name="arrayIndex">The zero-based index into <paramref name="array"/> at which copying should begin.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The number of items in the collection is greater than the available space from <paramref name="arrayIndex"/> to the end of <paramref name="array"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.NonNullCollection`1.IndexOf(`0)">
            <summary>
            Searches for the specified item and returns the index of the first occurrence.
            </summary>
            <param name="item">The item to locate.</param>
            <returns>The index of the first found occurrence of the specified item; -1 if the item could not be found.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.NonNullCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item into the collection at the specified index.
            </summary>
            <param name="index">The index at which the item should be inserted.</param>
            <param name="item">The item to insert.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is null.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.NonNullCollection`1.Remove(`0)">
            <summary>
            Removes the first occurrence of the specified item from the collection.
            </summary>
            <param name="item">The item to remove from the collection.</param>
            <returns>True if the item was successfully removed; false if it wasn't located in the collection.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is null.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.NonNullCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index from the collection.
            </summary>
            <param name="index">The index of the item to remove.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.TypeConverterFactory">
            <summary>
            Factory for creating TypeConverter instances based on a provided type.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.TypeConverterFactory.GetTypeConverter(System.Type)">
            <summary>
            Returns a TypeConverter instance for the specified type.
            </summary>
            <param name="type">The Type of the object to convert.</param>
            <returns>A TypeConverter instance if a suitable converter is found, otherwise null.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Text.DataUriParser">
            <summary>
            Data Uri Scheme Parser based on RFC 2397.
            https://datatracker.ietf.org/doc/html/rfc2397
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Text.DataUriParser.IsBase64String(System.String)">
            <summary>
            Extension method to test whether the value is a base64 string
            </summary>
            <param name="value">Value to test</param>
            <returns>Boolean value, true if the string is base64, otherwise false</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Text.DataUriParser.DataUri">
            <summary>
            Represents the data URI parts.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Text.DataUriParser.DataUri.MimeType">
            <summary>
            The mime type of the data.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Text.DataUriParser.DataUri.Parameters">
            <summary>
            The optional parameters of the data.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Text.DataUriParser.DataUri.DataFormat">
            <summary>
            The optional format of the data. Most common is "base64".
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Text.DataUriParser.DataUri.Data">
            <summary>
            The data content.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Text.ExceptionJsonConverter">
            <summary>
            Serializes an exception as a string. This is useful when serializing an instance of an exception directly or indirectly via serializing an instance that
            references an exception. For example, when serializing chat history that contains FunctionCallContent or FunctionResultContent items referencing an exception.
            Serializing an exception without this converter will throw a System.NotSupportedException: Serialization and deserialization of System.Reflection.MethodBase instances is not supported. Path: $.Items.Exception.TargetSite.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Text.ExceptionJsonConverter.CanConvert(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Text.ExceptionJsonConverter.Write(System.Text.Json.Utf8JsonWriter,System.Object,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Text.ExceptionJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.Text.JsonOptionsCache">
            <summary>Caches common configurations of <see cref="T:System.Text.Json.JsonSerializerOptions"/>.</summary>\
            <remarks>
            All of the instances include a converter for <see cref="T:System.ReadOnlyMemory`1"/>.
            Once the System.Text.Json package is upgraded to 8.0+, this will no longer be
            necessary and the actual default can be used.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Text.JsonOptionsCache.Default">
            <summary>
            Cached <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance for reading and writing JSON using the default settings.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Text.JsonOptionsCache.WriteIndented">
            <summary>
            Cached <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance for writing JSON with indentation.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Text.JsonOptionsCache.ReadPermissive">
            <summary>
            Cached <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance for reading JSON in a permissive way,
            including support for trailing commas, case-insensitive property names, and comments.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Text.JsonOptionsCache.ChatHistory">
            <summary>
            Gets the <see cref="T:System.Text.Json.JsonSerializerOptions"/> configured for serializing chat history data.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Text.SseData">
            <summary>
            Represents a single Server-Sent Events (SSE) data object.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Text.SseData.EventName">
            <summary>
            The name of the sse event.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Text.SseData.DataType">
            <summary>
            Represents the type of data parsed from SSE message.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Text.SseData.Data">
            <summary>
            Represents the data parsed from SSE message.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Text.SseData.#ctor(System.String,System.Object)">
            <summary>
            Represents a single Server-Sent Events (SSE) data object.
            </summary>
            <param name="eventName">The name of the sse event.</param>
            <param name="data">The data parsed from SSE message.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.Text.SseJsonParser">
            <summary>
            Internal class for parsing Server-Sent Events (SSE) data from a stream.
            </summary>
            <remarks>
            This is specialized parser for Server-Sent Events (SSE) data that is formatted as JSON.<br/>
            If you need to parse non-structured json streaming data, use <see cref="T:Microsoft.SemanticKernel.Text.StreamJsonParser"/> instead.<br/>
            <a href="https://html.spec.whatwg.org/multipage/server-sent-events.html#parsing-an-event-stream">SSE specification</a><br/>
            This class is thread-safe.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Text.SseJsonParser.ParseAsync(System.IO.Stream,System.Func{Microsoft.SemanticKernel.Text.SseLine,Microsoft.SemanticKernel.Text.SseData},System.Threading.CancellationToken)">
            <summary>
            Parses Server-Sent Events (SSE) data asynchronously from a stream.
            </summary>
            <param name="stream">The stream containing the SSE data.</param>
            <param name="parser">The function to parse each <see cref="T:Microsoft.SemanticKernel.Text.SseLine"/> into an <see cref="T:Microsoft.SemanticKernel.Text.SseData"/> object.</param>
            <param name="cancellationToken">A cancellation token to stop the parsing process.</param>
            <remarks><paramref name="stream"/> will be disposed immediately once enumeration is complete.</remarks>
            <returns>An asynchronous enumerable sequence of <see cref="T:Microsoft.SemanticKernel.Text.SseData"/> objects.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Text.SseJsonParser.ParseAsync``1(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Parses Server-Sent Events (SSE) data asynchronously from a stream and deserializes the data into the specified type.
            </summary>
            <typeparam name="T">The type to deserialize the data into.</typeparam>
            <param name="stream">The stream containing the SSE data.</param>
            <param name="cancellationToken">A cancellation token to stop the parsing process.</param>
            <returns>An asynchronous enumerable sequence of deserialized objects of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Text.SseLine">
            <summary>
            Represents a line of a Server-Sent Events (SSE) stream.
            </summary>
            <remarks>
            <a href="https://html.spec.whatwg.org/multipage/server-sent-events.html#parsing-an-event-stream">SSE specification</a>
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Text.SseLine.Empty">
            <summary>
            Represents an empty SSE line.
            </summary>
            <remarks>
            The <see cref="P:Microsoft.SemanticKernel.Text.SseLine.Empty"/> property is a static instance of the <see cref="T:Microsoft.SemanticKernel.Text.SseLine"/> struct.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Text.SseLine.EventName">
            <summary>
            The name of the last event for the Server-Sent Events (SSE) line.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Text.SseLine.IsEmpty">
            <summary>
            Determines whether the SseLine is empty.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Text.SseLine.IsValueEmpty">
            <summary>
            Gets a value indicating whether the value of the SseLine is empty.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Text.SseLine.IsComment">
            <summary>
            Determines whether the SseLine is comment line.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Text.SseLine.FieldName">
            <summary>
            Represents a field name in a Server-Sent Events (SSE) line.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Text.SseLine.FieldValue">
            <summary>
            Represents a field value in Server-Sent Events (SSE) format.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Text.SseLine.ToString">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.SemanticKernel.Text.SseLine.Equals(Microsoft.SemanticKernel.Text.SseLine)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.SemanticKernel.Text.SseLine.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.SemanticKernel.Text.SseLine.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.SemanticKernel.Text.SseLine.op_Equality(Microsoft.SemanticKernel.Text.SseLine,Microsoft.SemanticKernel.Text.SseLine)">
            <summary>
            Defines the equality operator for comparing two instances of the SseLine class.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Text.SseLine.op_Inequality(Microsoft.SemanticKernel.Text.SseLine,Microsoft.SemanticKernel.Text.SseLine)">
            <summary>
            Represents the inequality operator for comparing two SseLine objects.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Text.SseReader">
            <summary>
            Provides a reader for Server-Sent Events (SSE) data.
            </summary>
            <remarks>
            <a href="https://html.spec.whatwg.org/multipage/server-sent-events.html#parsing-an-event-stream">SSE specification</a>
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Text.SseReader.#ctor(System.IO.Stream)">
            <summary>
            Provides a reader for Server-Sent Events (SSE) data.
            </summary>
            <remarks>
            <a href="https://html.spec.whatwg.org/multipage/server-sent-events.html#parsing-an-event-stream">SSE specification</a>
            </remarks>
        </member>
        <member name="T:Microsoft.SemanticKernel.Text.StreamJsonParser">
            <summary>
            Internal class for parsing a stream of text which contains a series of discrete JSON strings into en enumerable containing each separate JSON string.
            </summary>
            <remarks>
            This is universal parser for parsing stream of text which contains a series of discrete JSON.<br/>
            If you need a specialized SSE parser, use <see cref="T:Microsoft.SemanticKernel.Text.SseJsonParser"/> instead.<br/>
            This class is thread-safe.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Text.StreamJsonParser.ParseAsync(System.IO.Stream,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Parses a Stream containing JSON data and yields the individual JSON objects.
            </summary>
            <param name="stream">The Stream containing the JSON data.</param>
            <param name="validateJson">Set to true to enable checking json chunks are well-formed. Default is false.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>An enumerable collection of string representing the individual JSON objects.</returns>
            <remarks>Stream will be disposed after parsing.</remarks>
        </member>
        <member name="T:Microsoft.Extensions.VectorData.VectorStoreErrorHandler">
            <summary>
            Contains helpers for reading vector store model properties and their attributes.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.VectorData.VectorStoreErrorHandler.RunModelConversion``1(System.String,System.String,System.String,System.Func{``0})">
            <summary>
            Run the given model conversion and wrap any exceptions with <see cref="T:Microsoft.Extensions.VectorData.VectorStoreRecordMappingException"/>.
            </summary>
            <typeparam name="T">The response type of the operation.</typeparam>
            <param name="databaseSystemName">The name of the database system the operation is being run on.</param>
            <param name="collectionName">The name of the collection the operation is being run on.</param>
            <param name="operationName">The type of database operation being run.</param>
            <param name="operation">The operation to run.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="T:Microsoft.Extensions.VectorData.VectorStoreRecordMapping">
            <summary>
            Contains helper methods to map between storage and data models.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.VectorData.VectorStoreRecordMapping.SetValuesOnProperties``2(``1,System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Collections.Generic.IReadOnlyDictionary{System.String,``0},System.Func{``0,System.Type,System.Object})">
            <summary>
            Loop through the list of <see cref="T:System.Reflection.PropertyInfo"/> objects and for each one look up the storage name
            in the <paramref name="dataModelPropertiesInfo"/> and check if the value exists in the <paramref name="storageValues"/>.
            If so, set the value on the record object.
            </summary>
            <typeparam name="TStorageType">The type of the storage properties.</typeparam>
            <typeparam name="TRecord">The type of the target object.</typeparam>
            <param name="record">The target object to set the property values on.</param>
            <param name="dataModelPropertiesInfo"><see cref="T:System.Reflection.PropertyInfo"/> objects listing the properties on the data model to get values for.</param>
            <param name="dataModelToStorageNameMapping">Storage property names keyed by data property names.</param>
            <param name="storageValues">A dictionary of storage values by storage property name.</param>
            <param name="storageValueConverter">An optional function to convert the storage property values to data property values.</param>
        </member>
        <member name="M:Microsoft.Extensions.VectorData.VectorStoreRecordMapping.BuildPropertiesInfoWithValues``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Collections.Generic.IReadOnlyDictionary{System.String,``0},System.Func{``0,System.Type,System.Object})">
            <summary>
            Build a list of properties with their values from the given data model properties and storage values.
            </summary>
            <typeparam name="TStorageType">The type of the storage properties.</typeparam>
            <param name="dataModelPropertiesInfo"><see cref="T:System.Reflection.PropertyInfo"/> objects listing the properties on the data model to get values for.</param>
            <param name="dataModelToStorageNameMapping">Storage property names keyed by data property names.</param>
            <param name="storageValues">A dictionary of storage values by storage property name.</param>
            <param name="storageValueConverter">An optional function to convert the storage property values to data property values.</param>
            <returns>The list of data property objects and their values.</returns>
        </member>
        <member name="M:Microsoft.Extensions.VectorData.VectorStoreRecordMapping.SetPropertiesOnRecord``1(``0,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Reflection.PropertyInfo,System.Object}})">
            <summary>
            Set the given list of properties with their values on the given object.
            </summary>
            <typeparam name="TRecord">The type of the target object.</typeparam>
            <param name="record">The target object to set the property values on.</param>
            <param name="propertiesInfoWithValues">A list of properties and their values to set.</param>
        </member>
        <member name="M:Microsoft.Extensions.VectorData.VectorStoreRecordMapping.CreateEnumerable``1(System.Collections.Generic.IEnumerable{``0},System.Type)">
            <summary>
            Create an enumerable of the required type from the input enumerable.
            </summary>
            <typeparam name="T">The type of elements in the input enumerable.</typeparam>
            <param name="input">The input enumerable to convert.</param>
            <param name="requiredEnumerable">The type to convert to.</param>
            <returns>The new enumerable in the required type.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when a target type is requested that is not supported.</exception>
        </member>
        <member name="T:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader">
            <summary>
            Contains helpers for reading vector store model properties and their attributes.
            </summary>
        </member>
        <member name="F:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader._dataModelType">
            <summary>The <see cref="T:System.Type"/> of the data model.</summary>
        </member>
        <member name="F:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader._vectorStoreRecordDefinition">
            <summary>A definition of the current storage model.</summary>
        </member>
        <member name="F:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader._options">
            <summary>Options for configuring the behavior of this class.</summary>
        </member>
        <member name="F:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader._keyProperties">
            <summary>The key properties from the definition.</summary>
        </member>
        <member name="F:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader._dataProperties">
            <summary>The data properties from the definition.</summary>
        </member>
        <member name="F:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader._vectorProperties">
            <summary>The vector properties from the definition.</summary>
        </member>
        <member name="F:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader._parameterlessConstructorInfo">
            <summary>The <see cref="T:System.Reflection.ConstructorInfo"/> of the parameterless constructor from the data model if one exists.</summary>
        </member>
        <member name="F:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader._keyPropertiesInfo">
            <summary>The key <see cref="T:System.Reflection.PropertyInfo"/> objects from the data model.</summary>
        </member>
        <member name="F:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader._dataPropertiesInfo">
            <summary>The data <see cref="T:System.Reflection.PropertyInfo"/> objects from the data model.</summary>
        </member>
        <member name="F:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader._vectorPropertiesInfo">
            <summary>The vector <see cref="T:System.Reflection.PropertyInfo"/> objects from the data model.</summary>
        </member>
        <member name="F:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader._storagePropertyNamesMap">
            <summary>A lazy initialized map of data model property names to the names under which they are stored in the data store.</summary>
        </member>
        <member name="F:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader._keyPropertyStoragePropertyNames">
            <summary>A lazy initialized list of storage names of key properties.</summary>
        </member>
        <member name="F:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader._dataPropertyStoragePropertyNames">
            <summary>A lazy initialized list of storage names of data properties.</summary>
        </member>
        <member name="F:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader._vectorPropertyStoragePropertyNames">
            <summary>A lazy initialized list of storage names of vector properties.</summary>
        </member>
        <member name="F:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader._jsonPropertyNamesMap">
            <summary>A lazy initialized map of data model property names to the names they will have if serialized to JSON.</summary>
        </member>
        <member name="F:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader._keyPropertyJsonNames">
            <summary>A lazy initialized list of json names of key properties.</summary>
        </member>
        <member name="F:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader._dataPropertyJsonNames">
            <summary>A lazy initialized list of json names of data properties.</summary>
        </member>
        <member name="F:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader._vectorPropertyJsonNames">
            <summary>A lazy initialized list of json names of vector properties.</summary>
        </member>
        <member name="P:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader.RecordDefinition">
            <summary>Gets the record definition of the current storage model.</summary>
        </member>
        <member name="P:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader.Properties">
            <summary>Gets the list of properties from the record definition.</summary>
        </member>
        <member name="P:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader.KeyProperty">
            <summary>Gets the first <see cref="T:Microsoft.Extensions.VectorData.VectorStoreRecordKeyProperty"/> object from the record definition that was provided or that was generated from the data model.</summary>
        </member>
        <member name="P:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader.KeyProperties">
            <summary>Gets all <see cref="T:Microsoft.Extensions.VectorData.VectorStoreRecordKeyProperty"/> objects from the record definition that was provided or that was generated from the data model.</summary>
        </member>
        <member name="P:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader.DataProperties">
            <summary>Gets all <see cref="T:Microsoft.Extensions.VectorData.VectorStoreRecordDataProperty"/> objects from the record definition that was provided or that was generated from the data model.</summary>
        </member>
        <member name="P:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader.VectorProperty">
            <summary>Gets the first <see cref="T:Microsoft.Extensions.VectorData.VectorStoreRecordVectorProperty"/> objects from the record definition that was provided or that was generated from the data model.</summary>
        </member>
        <member name="P:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader.VectorProperties">
            <summary>Gets all <see cref="T:Microsoft.Extensions.VectorData.VectorStoreRecordVectorProperty"/> objects from the record definition that was provided or that was generated from the data model.</summary>
        </member>
        <member name="P:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader.ParameterLessConstructorInfo">
            <summary>Gets the parameterless constructor if one exists, throws otherwise.</summary>
        </member>
        <member name="P:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader.KeyPropertyInfo">
            <summary>Gets the first key property info object.</summary>
        </member>
        <member name="P:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader.KeyPropertiesInfo">
            <summary>Gets the key property info objects.</summary>
        </member>
        <member name="P:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader.DataPropertiesInfo">
            <summary>Gets the data property info objects.</summary>
        </member>
        <member name="P:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader.VectorPropertiesInfo">
            <summary>Gets the vector property info objects.</summary>
        </member>
        <member name="P:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader.FirstVectorPropertyName">
            <summary>Gets the name of the first vector property in the definition or null if there are no vectors.</summary>
        </member>
        <member name="P:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader.FirstVectorPropertyInfo">
            <summary>Gets the first vector PropertyInfo object in the data model or null if there are no vectors.</summary>
        </member>
        <member name="P:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader.KeyPropertyName">
            <summary>Gets the property name of the first key property in the definition.</summary>
        </member>
        <member name="P:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader.KeyPropertyStoragePropertyName">
            <summary>Gets the storage name of the first key property in the definition.</summary>
        </member>
        <member name="P:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader.StoragePropertyNamesMap">
            <summary>Gets the storage names of all the properties in the definition.</summary>
        </member>
        <member name="P:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader.KeyPropertyStoragePropertyNames">
            <summary>Gets the storage names of the key properties in the definition.</summary>
        </member>
        <member name="P:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader.DataPropertyStoragePropertyNames">
            <summary>Gets the storage names of the data properties in the definition.</summary>
        </member>
        <member name="P:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader.FirstVectorPropertyStoragePropertyName">
            <summary>Gets the storage name of the first vector property in the definition or null if there are no vectors.</summary>
        </member>
        <member name="P:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader.VectorPropertyStoragePropertyNames">
            <summary>Gets the storage names of the vector properties in the definition.</summary>
        </member>
        <member name="P:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader.KeyPropertyJsonName">
            <summary>Gets the json name of the first key property in the definition.</summary>
        </member>
        <member name="P:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader.KeyPropertyJsonNames">
            <summary>Gets the json names of the key properties in the definition.</summary>
        </member>
        <member name="P:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader.DataPropertyJsonNames">
            <summary>Gets the json names of the data properties in the definition.</summary>
        </member>
        <member name="P:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader.FirstVectorPropertyJsonName">
            <summary>Gets the json name of the first vector property in the definition or null if there are no vectors.</summary>
        </member>
        <member name="P:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader.VectorPropertyJsonNames">
            <summary>Gets the json names of the vector properties in the definition.</summary>
        </member>
        <member name="P:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader.JsonPropertyNamesMap">
            <summary>A map of data model property names to the names they will have if serialized to JSON.</summary>
        </member>
        <member name="M:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader.VerifyHasParameterlessConstructor">
            <summary>Verify that the data model has a parameterless constructor.</summary>
        </member>
        <member name="M:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader.VerifyKeyProperties(System.Collections.Generic.HashSet{System.Type})">
            <summary>Verify that the types of the key properties fall within the provided set.</summary>
            <param name="supportedTypes">The list of supported types.</param>
        </member>
        <member name="M:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader.VerifyDataProperties(System.Collections.Generic.HashSet{System.Type},System.Boolean)">
            <summary>Verify that the types of the data properties fall within the provided set.</summary>
            <param name="supportedTypes">The list of supported types.</param>
            <param name="supportEnumerable">A value indicating whether enumerable types are supported where the element type is one of the supported types.</param>
        </member>
        <member name="M:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader.VerifyDataProperties(System.Collections.Generic.HashSet{System.Type},System.Collections.Generic.HashSet{System.Type})">
            <summary>Verify that the types of the data properties fall within the provided set.</summary>
            <param name="supportedTypes">The list of supported types.</param>
            <param name="supportedEnumerableElementTypes">A value indicating whether enumerable types are supported where the element type is one of the supported types.</param>
        </member>
        <member name="M:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader.VerifyVectorProperties(System.Collections.Generic.HashSet{System.Type})">
            <summary>Verify that the types of the vector properties fall within the provided set.</summary>
            <param name="supportedTypes">The list of supported types.</param>
        </member>
        <member name="M:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader.GetStoragePropertyName(System.String)">
            <summary>
            Get the storage property name for the given data model property name.
            </summary>
            <param name="dataModelPropertyName">The data model property name for which to get the storage property name.</param>
            <returns>The storage property name.</returns>
        </member>
        <member name="M:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader.GetJsonPropertyName(System.String)">
            <summary>
            Get the name under which a property will be stored if serialized to JSON
            </summary>
            <param name="dataModelPropertyName">The data model property name for which to get the JSON name.</param>
            <returns>The JSON name.</returns>
        </member>
        <member name="M:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader.GetVectorPropertyOrSingle``1(Microsoft.Extensions.VectorData.VectorSearchOptions{``0})">
            <summary>
            Get the vector property with the provided name if a name is provided, and fall back
            to a vector property in the schema if not. If no name is provided and there is more
            than one vector property, an exception will be thrown.
            </summary>
            <param name="searchOptions">The search options.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the provided property name is not a valid vector property name.</exception>
        </member>
        <member name="M:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader.GetFullTextDataPropertyOrSingle``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Get the text data property, that has full text search indexing enabled, with the provided name if a name is provided, and fall back
            to a text data property in the schema if not. If no name is provided and there is more than one text data property with
            full text search indexing enabled, an exception will be thrown.
            </summary>
            <param name="expression">The full text search property selector.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the provided property name is not a valid text data property name.</exception>
        </member>
        <member name="M:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader.LoadPropertyInfoIfNeeded">
            <summary>
            Check if we have previously loaded the <see cref="T:System.Reflection.PropertyInfo"/> objects from the data model and if not, load them.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader.SplitDefinitionAndVerify(System.String,Microsoft.Extensions.VectorData.VectorStoreRecordDefinition,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Split the given <paramref name="definition"/> into key, data and vector properties and verify that we have the expected numbers of each type.
            </summary>
            <param name="typeName">The name of the type that the definition relates to.</param>
            <param name="definition">The <see cref="T:Microsoft.Extensions.VectorData.VectorStoreRecordDefinition"/> to split.</param>
            <param name="supportsMultipleKeys">A value indicating whether multiple key properties are supported.</param>
            <param name="supportsMultipleVectors">A value indicating whether multiple vectors are supported.</param>
            <param name="requiresAtLeastOneVector">A value indicating whether we need at least one vector.</param>
            <returns>The properties on the <see cref="T:Microsoft.Extensions.VectorData.VectorStoreRecordDefinition"/> split into key, data and vector groupings.</returns>
            <exception cref="T:System.ArgumentException">Thrown if there are any validation failures with the provided <paramref name="definition"/>.</exception>
        </member>
        <member name="M:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader.FindPropertiesInfo(System.Type)">
            <summary>
            Find the properties with <see cref="T:Microsoft.Extensions.VectorData.VectorStoreRecordKeyAttribute"/>, <see cref="T:Microsoft.Extensions.VectorData.VectorStoreRecordDataAttribute"/> and <see cref="T:Microsoft.Extensions.VectorData.VectorStoreRecordVectorAttribute"/> attributes
            and verify that they exist and that we have the expected numbers of each type.
            Return those properties in separate categories.
            </summary>
            <param name="type">The data model to find the properties on.</param>
            <returns>The categorized properties.</returns>
        </member>
        <member name="M:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader.FindPropertiesInfo(System.Type,Microsoft.Extensions.VectorData.VectorStoreRecordDefinition)">
            <summary>
            Find the properties listed in the <paramref name="vectorStoreRecordDefinition"/> on the <paramref name="type"/> and verify
            that they exist.
            Return those properties in separate categories.
            </summary>
            <param name="type">The data model to find the properties on.</param>
            <param name="vectorStoreRecordDefinition">The property configuration.</param>
            <returns>The categorized properties.</returns>
        </member>
        <member name="M:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader.CreateVectorStoreRecordDefinitionFromType(System.ValueTuple{System.Collections.Generic.List{System.Reflection.PropertyInfo},System.Collections.Generic.List{System.Reflection.PropertyInfo},System.Collections.Generic.List{System.Reflection.PropertyInfo}})">
            <summary>
            Create a <see cref="T:Microsoft.Extensions.VectorData.VectorStoreRecordDefinition"/> by reading the attributes on the provided <see cref="T:System.Reflection.PropertyInfo"/> objects.
            </summary>
            <param name="propertiesInfo"><see cref="T:System.Reflection.PropertyInfo"/> objects to build a <see cref="T:Microsoft.Extensions.VectorData.VectorStoreRecordDefinition"/> from.</param>
            <returns>The <see cref="T:Microsoft.Extensions.VectorData.VectorStoreRecordDefinition"/> based on the given <see cref="T:System.Reflection.PropertyInfo"/> objects.</returns>
        </member>
        <member name="M:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader.BuildPropertyNameToStorageNameMap(System.ValueTuple{System.Collections.Generic.List{Microsoft.Extensions.VectorData.VectorStoreRecordKeyProperty},System.Collections.Generic.List{Microsoft.Extensions.VectorData.VectorStoreRecordDataProperty},System.Collections.Generic.List{Microsoft.Extensions.VectorData.VectorStoreRecordVectorProperty}})">
            <summary>
            Build a map of property names to the names under which they should be saved in storage, for the given properties.
            </summary>
            <param name="properties">The properties to build the map for.</param>
            <returns>The map from property names to the names under which they should be saved in storage.</returns>
        </member>
        <member name="M:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader.BuildPropertyNameToJsonPropertyNameMap(System.ValueTuple{System.Collections.Generic.List{Microsoft.Extensions.VectorData.VectorStoreRecordKeyProperty},System.Collections.Generic.List{Microsoft.Extensions.VectorData.VectorStoreRecordDataProperty},System.Collections.Generic.List{Microsoft.Extensions.VectorData.VectorStoreRecordVectorProperty}},System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Build a map of property names to the names that they would have if serialized to JSON.
            </summary>
            <param name="properties">The properties to build the map for.</param>
            <param name="dataModel">The data model type that the property belongs to.</param>
            <param name="options">The options used for JSON serialization.</param>
            <returns>The map from property names to the names that they would have if serialized to JSON.</returns>
        </member>
        <member name="M:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader.GetJsonPropertyName(Microsoft.Extensions.VectorData.VectorStoreRecordProperty,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Get the JSON property name of a property by using the <see cref="T:System.Text.Json.Serialization.JsonPropertyNameAttribute"/> if available, otherwise
            using the <see cref="T:System.Text.Json.JsonNamingPolicy"/> if available, otherwise falling back to the property name.
            The provided <paramref name="dataModel"/> may not actually contain the property, e.g. when the user has a data model that
            doesn't resemble the stored data and where they are using a custom mapper.
            </summary>
            <param name="property">The property to retrieve a JSON name for.</param>
            <param name="dataModel">The data model type that the property belongs to.</param>
            <param name="options">The options used for JSON serialization.</param>
            <returns>The JSON property name.</returns>
        </member>
        <member name="T:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReaderOptions">
            <summary>
            Contains options for <see cref="T:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReader"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReaderOptions.SupportsMultipleKeys">
            <summary>
            Gets or sets a value indicating whether the connector/db supports multiple key properties.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReaderOptions.SupportsMultipleVectors">
            <summary>
            Gets or sets a value indicating whether the connector/db supports multiple vector properties.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReaderOptions.RequiresAtLeastOneVector">
            <summary>
            Gets or sets a value indicating whether the connector/db requires at least one vector property.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyReaderOptions.JsonSerializerOptions">
            <summary>
            Gets or sets the json serializer options that the connector might be using for storage serialization.
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyVerification">
            <summary>
            Contains helpers for verifying the types of vector store record properties.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyVerification.VerifyPropertyTypes(System.Collections.Generic.List{System.Reflection.PropertyInfo},System.Collections.Generic.HashSet{System.Type},System.String,System.Nullable{System.Boolean})">
            <summary>
            Verify that the given properties are of the supported types.
            </summary>
            <param name="properties">The properties to check.</param>
            <param name="supportedTypes">A set of supported types that the provided properties may have.</param>
            <param name="propertyCategoryDescription">A description of the category of properties being checked. Used for error messaging.</param>
            <param name="supportEnumerable">A value indicating whether <see cref="T:System.Collections.Generic.IEnumerable`1"/> versions of all the types should also be supported.</param>
            <exception cref="T:System.ArgumentException">Thrown if any of the properties are not in the given set of types.</exception>
        </member>
        <member name="M:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyVerification.VerifyPropertyTypes(System.Collections.Generic.List{System.Reflection.PropertyInfo},System.Collections.Generic.HashSet{System.Type},System.Collections.Generic.HashSet{System.Type},System.String)">
            <summary>
            Verify that the given properties are of the supported types.
            </summary>
            <param name="properties">The properties to check.</param>
            <param name="supportedTypes">A set of supported types that the provided properties may have.</param>
            <param name="supportedEnumerableElementTypes">A set of supported types that the provided enumerable properties may use as their element type.</param>
            <param name="propertyCategoryDescription">A description of the category of properties being checked. Used for error messaging.</param>
            <exception cref="T:System.ArgumentException">Thrown if any of the properties are not in the given set of types.</exception>
        </member>
        <member name="M:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyVerification.VerifyPropertyTypes(System.Collections.Generic.IEnumerable{Microsoft.Extensions.VectorData.VectorStoreRecordProperty},System.Collections.Generic.HashSet{System.Type},System.String,System.Nullable{System.Boolean})">
            <summary>
            Verify that the given properties are of the supported types.
            </summary>
            <param name="properties">The properties to check.</param>
            <param name="supportedTypes">A set of supported types that the provided properties may have.</param>
            <param name="propertyCategoryDescription">A description of the category of properties being checked. Used for error messaging.</param>
            <param name="supportEnumerable">A value indicating whether <see cref="T:System.Collections.Generic.IEnumerable`1"/> versions of all the types should also be supported.</param>
            <exception cref="T:System.ArgumentException">Thrown if any of the properties are not in the given set of types.</exception>
        </member>
        <member name="M:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyVerification.VerifyPropertyTypes(System.Collections.Generic.IEnumerable{Microsoft.Extensions.VectorData.VectorStoreRecordProperty},System.Collections.Generic.HashSet{System.Type},System.Collections.Generic.HashSet{System.Type},System.String)">
            <summary>
            Verify that the given properties are of the supported types.
            </summary>
            <param name="properties">The properties to check.</param>
            <param name="supportedTypes">A set of supported types that the provided properties may have.</param>
            <param name="supportedEnumerableElementTypes">A set of supported types that the provided enumerable properties may use as their element type.</param>
            <param name="propertyCategoryDescription">A description of the category of properties being checked. Used for error messaging.</param>
            <exception cref="T:System.ArgumentException">Thrown if any of the properties are not in the given set of types.</exception>
        </member>
        <member name="M:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyVerification.VerifyPropertyType(System.String,System.Type,System.Collections.Generic.HashSet{System.Type},System.Collections.Generic.HashSet{System.Type},System.String)">
            <summary>
            Verify that the given property is of the supported types.
            </summary>
            <param name="propertyName">The name of the property being checked. Used for error messaging.</param>
            <param name="propertyType">The type of the property being checked.</param>
            <param name="supportedTypes">A set of supported types that the provided property may have.</param>
            <param name="supportedEnumerableElementTypes">A set of supported types that the provided property may use as its element type if it's enumerable.</param>
            <param name="propertyCategoryDescription">A description of the category of property being checked. Used for error messaging.</param>
            <exception cref="T:System.ArgumentException">Thrown if the property is not in the given set of types.</exception>
        </member>
        <member name="M:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyVerification.IsSupportedEnumerableType(System.Type)">
            <summary>
            Verify if the provided type is one of the supported Enumerable types.
            </summary>
            <param name="type">The type to check.</param>
            <returns><see langword="true"/> if the type is a supported Enumerable, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyVerification.GetCollectionElementType(System.Type)">
            <summary>
            Returns <see cref="T:System.Type"/> of collection elements.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyVerification.VerifyGenericDataModelKeyType(System.Type,System.Boolean,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Checks that if the provided <paramref name="recordType"/> is a <see cref="T:Microsoft.Extensions.VectorData.VectorStoreGenericDataModel`1"/> that the key type is supported by the default mappers.
            If not supported, a custom mapper must be supplied, otherwise an exception is thrown.
            </summary>
            <param name="recordType">The type of the record data model used by the connector.</param>
            <param name="customMapperSupplied">A value indicating whether a custom mapper was supplied to the connector</param>
            <param name="allowedKeyTypes">The list of key types supported by the default mappers.</param>
            <exception cref="T:System.ArgumentException">Thrown if the key type of the <see cref="T:Microsoft.Extensions.VectorData.VectorStoreGenericDataModel`1"/> is not supported by the default mappers and a custom mapper was not supplied.</exception>
        </member>
        <member name="M:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyVerification.VerifyGenericDataModelDefinitionSupplied(System.Type,System.Boolean)">
            <summary>
            Checks that if the provided <paramref name="recordType"/> is a <see cref="T:Microsoft.Extensions.VectorData.VectorStoreGenericDataModel`1"/> that a <see cref="T:Microsoft.Extensions.VectorData.VectorStoreRecordDefinition"/> is also provided.
            </summary>
            <param name="recordType">The type of the record data model used by the connector.</param>
            <param name="recordDefinitionSupplied">A value indicating whether a record definition was supplied to the connector.</param>
            <exception cref="T:System.ArgumentException">Thrown if a <see cref="T:Microsoft.Extensions.VectorData.VectorStoreRecordDefinition"/> is not provided when using <see cref="T:Microsoft.Extensions.VectorData.VectorStoreGenericDataModel`1"/>.</exception>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute">
             <summary>
             Polyfill for the DynamicallyAccessedMembersAttribute not available in .NET Standard 2.0.
             Indicates that certain members on a specified <see cref="T:System.Type"/> are accessed dynamically,
             for example through <see cref="N:System.Reflection"/>.
             </summary>
             <remarks>
             This allows tools to understand which members are being accessed during the execution
             of a program.
            
             This attribute is valid on members whose type is <see cref="T:System.Type"/> or <see cref="T:System.String"/>.
            
             When this attribute is applied to a location of type <see cref="T:System.String"/>, the assumption is
             that the string represents a fully qualified type name.
            
             When this attribute is applied to a class, interface, or struct, the members specified
             can be accessed dynamically on <see cref="T:System.Type"/> instances returned from calling
             <see cref="M:System.Object.GetType"/> on instances of that class, interface, or struct.
            
             If the attribute is applied to a method it's treated as a special case and it implies
             the attribute should be applied to the "this" parameter of the method. As such the attribute
             should only be used on instance methods of types assignable to System.Type (or string, but no methods
             will use it there).
             </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute"/> class
            with the specified member types.
            </summary>
            <param name="memberTypes">The types of members dynamically accessed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute.MemberTypes">
            <summary>
            Gets the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes"/> which specifies the type
            of members dynamically accessed.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes">
             <summary>
             Specifies the types of members that are dynamically accessed.
            
             This enumeration has a <see cref="T:System.FlagsAttribute"/> attribute that allows a
             bitwise combination of its member values.
             </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None">
            <summary>
            Specifies no members.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicParameterlessConstructor">
            <summary>
            Specifies the default, parameterless public constructor.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors">
            <summary>
            Specifies all public constructors.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicConstructors">
            <summary>
            Specifies all non-public constructors.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicMethods">
            <summary>
            Specifies all public methods.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicMethods">
            <summary>
            Specifies all non-public methods.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicFields">
            <summary>
            Specifies all public fields.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicFields">
            <summary>
            Specifies all non-public fields.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicNestedTypes">
            <summary>
            Specifies all public nested types.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicNestedTypes">
            <summary>
            Specifies all non-public nested types.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties">
            <summary>
            Specifies all public properties.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicProperties">
            <summary>
            Specifies all non-public properties.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicEvents">
            <summary>
            Specifies all public events.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicEvents">
            <summary>
            Specifies all non-public events.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.Interfaces">
            <summary>
            Specifies all interfaces implemented by the type.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.All">
            <summary>
            Specifies all members.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute">
            <summary>
             Indicates that an API is experimental and it may change in the future.
            </summary>
            <remarks>
              This attribute allows call sites to be flagged with a diagnostic that indicates that an experimental
              feature is used. Authors can use this attribute to ship preview features in their assemblies.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.#ctor(System.String)">
            <summary>
             Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute"/> class, specifying the ID that the compiler will use
             when reporting a use of the API the attribute applies to.
            </summary>
            <param name="diagnosticId">The ID that the compiler will use when reporting a use of the API the attribute applies to.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.DiagnosticId">
            <summary>
             Gets the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <value>The unique diagnostic ID.</value>
            <remarks>
             The diagnostic ID is shown in build output for warnings and errors.
             <para>This property represents the unique ID that can be used to suppress the warnings or errors, if needed.</para>
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.UrlFormat">
            <summary>
             Gets or sets the URL for corresponding documentation.
             The API accepts a format string instead of an actual URL, creating a generic URL that includes the diagnostic ID.
            </summary>
            <value>The format string that represents a URL to corresponding documentation.</value>
            <remarks>An example format string is <c>https://contoso.com/obsoletion-warnings/{0}</c>.</remarks>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>Specifies that null is allowed as an input even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with the associated parameter name.</summary>
            <param name="parameterName">
            The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>Specifies that the method will not return if the associated Boolean parameter is passed the specified value.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified parameter value.</summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>Gets the condition parameter value.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with a field or property member.</summary>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>Initializes the attribute with the list of field and property members.</summary>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values when returning with the specified return value condition.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>Initializes the attribute with the specified return value condition and a field or property member.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>Initializes the attribute with the specified return value condition and list of field and property members.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute">
            <summary>
            Polyfill for the RequiresDynamicCodeAttribute not available in .NET Standard 2.0.
            Indicates that the specified method requires the ability to generate new code at runtime,
            for example through <see cref="N:System.Reflection"/>.
            </summary>
            <remarks>
            This allows tools to understand which methods are unsafe to call when compiling ahead of time.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute"/> class
            with the specified message.
            </summary>
            <param name="message">
            A message that contains information about the usage of dynamic code.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.Message">
            <summary>
            Gets a message that contains information about the usage of dynamic code.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.Url">
            <summary>
            Gets or sets an optional URL that contains more information about the method,
            why it requires dynamic code, and what options a consumer has to deal with it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute">
            <summary>
            Polyfill for the RequiresUnreferencedCodeAttribute not available in .NET Standard 2.0.
            Indicates that the specified method requires dynamic access to code that is not referenced
            statically, for example through <see cref="N:System.Reflection"/>.
            </summary>
            <remarks>
            This allows tools to understand which methods are unsafe to call when removing unreferenced
            code from an application.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute"/> class
            with the specified message.
            </summary>
            <param name="message">
            A message that contains information about the usage of unreferenced code.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.Message">
            <summary>
            Gets a message that contains information about the usage of unreferenced code.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.Url">
            <summary>
            Gets or sets an optional URL that contains more information about the method,
            why it requires unreferenced code, and what options a consumer has to deal with it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute">
            <summary>
            Polyfill for the UnconditionalSuppressMessageAttribute introduced in .NET 8.0
            Suppresses reporting of a specific rule violation, allowing multiple suppressions on a
            single code artifact.
            </summary>
            <remarks>
            <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute"/> is different than
            <see cref="T:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"/> in that it doesn't have a
            <see cref="T:System.Diagnostics.ConditionalAttribute"/>. So it is always preserved in the compiled assembly.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute"/>
            class, specifying the category of the tool and the identifier for an analysis rule.
            </summary>
            <param name="category">The category for the attribute.</param>
            <param name="checkId">The identifier of the analysis rule the attribute applies to.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category">
            <summary>
            Gets the category identifying the classification of the attribute.
            </summary>
            <remarks>
            The <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category"/> property describes the tool or tool analysis category
            for which a message suppression attribute applies.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.CheckId">
            <summary>
            Gets the identifier of the analysis tool rule to be suppressed.
            </summary>
            <remarks>
            Concatenated together, the <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category"/> and <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.CheckId"/>
            properties form a unique check identifier.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Scope">
            <summary>
            Gets or sets the scope of the code that is relevant for the attribute.
            </summary>
            <remarks>
            The Scope property is an optional argument that specifies the metadata scope for which
            the attribute is relevant.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Target">
            <summary>
            Gets or sets a fully qualified path that represents the target of the attribute.
            </summary>
            <remarks>
            The <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Target"/> property is an optional argument identifying the analysis target
            of the attribute. An example value is "System.IO.Stream.ctor():System.Void".
            Because it is fully qualified, it can be long, particularly for targets such as parameters.
            The analysis tool user interface should be capable of automatically formatting the parameter.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.MessageId">
            <summary>
            Gets or sets an optional argument expanding on exclusion criteria.
            </summary>
            <remarks>
            The <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.MessageId"/> property is an optional argument that specifies additional
            exclusion where the literal metadata target is not sufficiently precise. For example,
            the <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute"/> cannot be applied within a method,
            and it may be desirable to suppress a violation against a statement in the method that will
            give a rule violation, but not against all statements in the method.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Justification">
            <summary>
            Gets or sets the justification for suppressing the code analysis message.
            </summary>
        </member>
        <member name="T:System.Diagnostics.UnreachableException">
            <summary>
            Exception thrown when the program executes an instruction that was thought to be unreachable.
            </summary>
        </member>
        <member name="M:System.Diagnostics.UnreachableException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.UnreachableException"/> class with the default error message.
            </summary>
        </member>
        <member name="M:System.Diagnostics.UnreachableException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.UnreachableException"/>
            class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:System.Diagnostics.UnreachableException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.UnreachableException"/>
            class with a specified error message and a reference to the inner exception that is the cause of
            this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:System.ExceptionExtensions">
            <summary>
            Exception extension methods.
            </summary>
        </member>
        <member name="M:System.ExceptionExtensions.IsCriticalException(System.Exception)">
            <summary>
            Check if an exception is of a type that should not be caught by the kernel.
            </summary>
            <param name="ex">Exception.</param>
            <returns>True if <paramref name="ex"/> is a critical exception and should not be caught.</returns>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AnyAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Determines whether any element of an async-enumerable sequence satisfies a condition.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence whose elements to apply the predicate to.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element determining whether any elements in the source sequence pass the test in the specified predicate.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="predicate"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SelectAsync``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Projects each element of an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> into a new form by incorporating
            an asynchronous transformation function.
            </summary>
            <typeparam name="TSource">The type of the elements of the source sequence.</typeparam>
            <typeparam name="TResult">The type of the elements of the resulting sequence.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> to invoke a transform function on.</param>
            <param name="selector">
            A transform function to apply to each element. This function takes an element of
            type TSource and returns an element of type TResult.
            </param>
            <param name="cancellationToken">
            A CancellationToken to observe while iterating through the sequence.
            </param>
            <returns>
            An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> whose elements are the result of invoking the transform
            function on each element of the original sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the source or selector is null.</exception>
        </member>
        <member name="M:System.EnvExtensions.GetBoolEnvVar(System.String)">
            <summary>
            Source: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/src/DiagnosticsOptions.cs
            Values: https://learn.microsoft.com/en-us/dotnet/api/azure.core.diagnosticsoptions.istelemetryenabled?view=azure-dotnet
            </summary>
        </member>
        <member name="T:System.TypeExtensions">
            <summary>
            Extensions methods for <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:System.TypeExtensions.TryGetGenericResultType(System.Type,System.Type@)">
            <summary>
            Tries to get the result type from a generic parameter.
            </summary>
            <param name="returnType">Return type.</param>
            <param name="resultType">The result type of the Nullable generic parameter.</param>
            <returns><c>true</c> if the result type was successfully retrieved; otherwise, <c>false</c>.</returns>
            TODO [@teresaqhoang]: Issue #4202 Cache Generic Types Extraction - Handlebars
        </member>
        <member name="M:System.TypeExtensions.GetFriendlyTypeName(System.Type)">
            <summary>
            Returns a string with the type's name. If the type is generic, it also includes the type parameters in a readable format.
            </summary>
            <param name="type">Target type.</param>
        </member>
        <member name="T:ClientResultExceptionExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.ClientModel.ClientResultException"/> class.
            </summary>
        </member>
        <member name="M:ClientResultExceptionExtensions.ToHttpOperationException(System.ClientModel.ClientResultException)">
            <summary>
            Converts a <see cref="T:System.ClientModel.ClientResultException"/> to an <see cref="T:Microsoft.SemanticKernel.HttpOperationException"/>.
            </summary>
            <param name="exception">The original <see cref="T:System.ClientModel.ClientResultException"/>.</param>
            <returns>An <see cref="T:Microsoft.SemanticKernel.HttpOperationException"/> instance.</returns>
        </member>
        <member name="T:GenericActionPipelinePolicy">
            <summary>
            Generic action pipeline policy for processing messages.
            </summary>
        </member>
    </members>
</doc>
